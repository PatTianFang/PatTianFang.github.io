<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>05-使用BeeWare打包无法下载RCEdit的问题解决</title>
    <link href="/2025/08/07/05-%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BDRCEdit%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/08/07/05-%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BDRCEdit%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase build</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807094630062.png" alt=""></p><p>出现错误</p><p><img src="file-20250807095320810.png" alt=""></p><h1 id="1-下载RCEdit"><a href="#1-下载RCEdit" class="headerlink" title="1-下载RCEdit"></a>1-下载RCEdit</h1><p>打开浏览器，访问 RCEdit 的 GitHub 发布页：  <a href="https://github.com/electron/rcedit/releases">https://github.com/electron/rcedit/releases</a></p><p><img src="file-20250807100634880.png" alt=""></p><p>下载与你的系统对应的版本（通常是 <code>rcedit-x64.exe</code>）</p><p><img src="file-20250807100656213.png" alt=""></p><h1 id="2-移动RCEdit"><a href="#2-移动RCEdit" class="headerlink" title="2-移动RCEdit"></a>2-移动RCEdit</h1><p>将下载好的<code>rcedit-x64.exe</code>文件放入以下路径：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\&lt;你的用户名&gt;\AppData\Local\BeeWare\briefcase\Cache\tools\<br></code></pre></td></tr></table></figure><p>如果该路径不存在，手动创建。</p><p><img src="file-20250807100802944.png" alt=""></p><p><img src="file-20250807100816647.png" alt=""></p><h1 id="3-重新运行"><a href="#3-重新运行" class="headerlink" title="3-重新运行"></a>3-重新运行</h1><p>重新运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">briefcase build<br></code></pre></td></tr></table></figure><p><img src="file-20250807100909379.png" alt=""></p><p>成功</p><p><img src="file-20250807100924893.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BeeWare</tag>
      
      <tag>网络超时</tag>
      
      <tag>网络错误</tag>
      
      <tag>RCEdit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-使用BeeWare打包无法下载WiX的问题解决</title>
    <link href="/2025/08/07/06-%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BDWiX%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/08/07/06-%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BDWiX%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>输入</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">briefcase <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807102308933.png" alt=""></p><p>出现错误</p><p><img src="file-20250807103225909.png" alt=""></p><h1 id="1-下载WiX"><a href="#1-下载WiX" class="headerlink" title="1-下载WiX"></a>1-下载WiX</h1><p>打开浏览器，访问WiX的 GitHub 发布页：<a href="https://github.com/wixtoolset/wix/releases">Releases · wixtoolset/wix</a></p><p><img src="file-20250807104821555.png" alt=""></p><p>下载与你的系统对应的版本（如<a href="https://github.com/wixtoolset/wix/releases/download/v6.0.1/wix-cli-x64.msi">wix-cli-x64.msi</a>）</p><p><img src="file-20250807104958925.png" alt=""></p><h1 id="2-移动WiX"><a href="#2-移动WiX" class="headerlink" title="2-移动WiX"></a>2-移动WiX</h1><p>将下载好的文件放入以下路径：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\&lt;你的用户名&gt;\AppData\Local\BeeWare\briefcase\Cache\tools\<br></code></pre></td></tr></table></figure><p>如果该路径不存在，手动创建。</p><p><img src="file-20250807100802944.png" alt=""></p><p><img src="file-20250807105014951.png" alt=""></p><h1 id="3-重新运行"><a href="#3-重新运行" class="headerlink" title="3-重新运行"></a>3-重新运行</h1><p>重新运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">briefcase package<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="file-20250807114907753.png" alt=""> </p><p><img src="file-20250807121545983.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BeeWare</tag>
      
      <tag>网络超时</tag>
      
      <tag>网络错误</tag>
      
      <tag>RCEdit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-使用BeeWare打包下载嵌入版Python的解决方法</title>
    <link href="/2025/08/07/04-%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%B5%8C%E5%85%A5%E7%89%88Python%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2025/08/07/04-%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%B5%8C%E5%85%A5%E7%89%88Python%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>按照官网教程<a href="https://docs.beeware.org/zh-cn/latest/tutorial/tutorial-3.html">教程 3 - 打包与分发 - BeeWare Tutorial</a>打包时，执行briefcase create时</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase create</span><br></code></pre></td></tr></table></figure><p>会出现网络错误</p><p><img src="file-20250807093136434.png" alt=""></p><p><strong>解决方法通过手动下载并指定路径，可以避免去官网线上下载导致超时</strong></p><h1 id="1-下载缺少的包"><a href="#1-下载缺少的包" class="headerlink" title="1-下载缺少的包"></a>1-下载缺少的包</h1><p>直接按住Ctrl点击对应链接</p><p><img src="file-20250807093333935.png" alt=""></p><p>完成下载</p><p><img src="file-20250807093412801.png" alt=""></p><h1 id="2-移动到指定路径"><a href="#2-移动到指定路径" class="headerlink" title="2-移动到指定路径"></a>2-移动到指定路径</h1><p>将该文件移动到一个想要的路径上，并复制路径</p><p><img src="file-20250807093537503.png" alt=""></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\PatTi\Desktop\BeeWare<br></code></pre></td></tr></table></figure><h1 id="3-修改pyproject-toml文件"><a href="#3-修改pyproject-toml文件" class="headerlink" title="3-修改pyproject.toml文件"></a>3-修改pyproject.toml文件</h1><p>打开项目的文件夹，找到其中的pyproject.toml文件</p><p><img src="file-20250807093700732.png" alt=""></p><p>打开这个文件</p><p><img src="file-20250807093718093.png" alt=""></p><p>按下Ctrl+F，输入tool.briefcase.app.helloworld.windows搜索</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tool<span class="hljs-selector-class">.briefcase</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.helloworld</span>.windows<br></code></pre></td></tr></table></figure><p><img src="file-20250807093821353.png" alt=""></p><p>在其下方四行添加刚刚记下的路径加<strong>文件名</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 手动指定本地 support package，避免联网下载</span><br><span class="hljs-attr">support_package</span> = <span class="hljs-string">&quot;C:/Users/PatTi/Desktop/BeeWare/python-3.12.9-embed-amd64.zip&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意要把斜杠改为反斜杠</strong></p><p><img src="file-20250807094100496.png" alt=""></p><p><img src="file-20250807094108390.png" alt=""></p><p>保存</p><h1 id="4-再次运行"><a href="#4-再次运行" class="headerlink" title="4-再次运行"></a>4-再次运行</h1><p>再次执行briefcase create</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase create</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807094209890.png" alt=""></p><p>成功识别并跳过下载</p><p><img src="file-20250807094250830.png" alt=""></p><p>成功</p><p><img src="file-20250807094303467.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>BeeWare</tag>
      
      <tag>网络超时</tag>
      
      <tag>网络错误</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-快速入门Flutter：从零开始构建你的第一个应用</title>
    <link href="/2025/08/07/01-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Flutter%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/"/>
    <url>/2025/08/07/01-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Flutter%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN孤影过客的文章《快速入门Flutter：从零开始构建你的第一个应用》^[<a href="https://blog.csdn.net/gygkhd/article/details/139646716">https://blog.csdn.net/gygkhd/article/details/139646716</a>]</p><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-安装-Flutter-SDK"><a href="#1-安装-Flutter-SDK" class="headerlink" title="1-安装 Flutter SDK"></a>1-安装 Flutter SDK</h2><p>在官网<a href="https://flutter.dev/">Flutter - Build apps for any screen</a>下载Flutter SDK。</p><p><img src="file-20250729080900666.png" alt=""></p><p>可以参考文档<a href="https://docs.flutter.cn/get-started/install/windows/desktop">开发 Windows 桌面应用 | Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p><p><img src="file-20250729081105457.png" alt=""></p><p>安装 <a href="https://code.visualstudio.com/docs/setup/windows">Visual Studio Code</a> 以及 <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Flutter extension for VS Code</a></p><p>打开VS Code，下载Flutter拓展</p><p><img src="file-20250729081326723.png" alt=""></p><h2 id="1-1-安装-Flutter"><a href="#1-1-安装-Flutter" class="headerlink" title="1-1-安装 Flutter"></a>1-1-安装 Flutter</h2><ol><li>打开 <strong>命令面板 (Command Palette)</strong>，按下快捷键 Control + Shift + P。</li></ol><p><img src="file-20250729081558544.png" alt=""></p><ol><li>在 <strong>命令面板 (Command Palette)</strong> 中输入 <code>flutter</code>。</li></ol><p><img src="file-20250729081620184.png" alt=""></p><ol><li>选择 <strong>Flutter: New Project</strong>。</li></ol><p><img src="file-20250729081650482.png" alt=""></p><ol><li>显示没有安装 Flutter SDK, 单击 <strong>Download SDK</strong>。当对话框 Select Folder for Flutter SDK 显示时，选择你想要安装 Flutter 的位置。</li></ol><p><img src="file-20250729081846070.png" alt=""></p><ol><li>等待下载完成</li></ol><p><img src="file-20250729081926326.png" alt=""></p><p><strong>注意</strong></p><p>不要将 Flutter 安装到以下情况的目录或路径中：</p><ul><li><p>路径包含特殊字符或空格。</p></li><li><p>路径需要较高的权限。</p></li></ul><h2 id="1-2-解决Resolving-dependencies…问题"><a href="#1-2-解决Resolving-dependencies…问题" class="headerlink" title="1-2-解决Resolving dependencies…问题"></a>1-2-解决Resolving dependencies…问题</h2><p>发现卡在Resolving dependencies…这一步</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">Running</span></span> pub upgrade...<br><br><span class="hljs-function"><span class="hljs-title">Resolving</span></span> dependencies...<br><br>Got socket error trying to find package <span class="hljs-keyword">file</span> at https:<span class="hljs-comment">//pub.dev.</span><br></code></pre></td></tr></table></figure><p>打开环境变量</p><p><img src="file-20250729083104049.png" alt=""></p><p>在用户变量下添加下面两个变量名：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">PUB_HOSTED_URL https<span class="hljs-punctuation">:</span><span class="hljs-comment">//pub.flutter-io.cn</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">FLUTTER_STORAGE_BASE_URL https<span class="hljs-punctuation">:</span><span class="hljs-comment">//storage.flutter-io.cn</span><br></code></pre></td></tr></table></figure><p><img src="file-20250729092009444.png" alt=""></p><p>成功后会显示通知：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">The Flutter SDK was added <span class="hljs-selector-tag">to</span> your <span class="hljs-selector-tag">PATH</span><br></code></pre></td></tr></table></figure><p><img src="file-20250729095500703.png" alt=""></p><h2 id="1-3-检查安装是否成功"><a href="#1-3-检查安装是否成功" class="headerlink" title="1-3-检查安装是否成功"></a>1-3-检查安装是否成功</h2><p>打开PowerShell。</p><p><img src="file-20250729095647145.png" alt=""></p><p>运行以下指令。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flutter doctor</span><br></code></pre></td></tr></table></figure><p><img src="file-20250729105120549.png" alt=""></p><p>安装成功</p><h1 id="二、第一个应用"><a href="#二、第一个应用" class="headerlink" title="二、第一个应用"></a>二、第一个应用</h1><h2 id="2-1-创建应用"><a href="#2-1-创建应用" class="headerlink" title="2-1-创建应用"></a>2-1-创建应用</h2><p>打开你想要创建Flutter应用的位置</p><p><img src="file-20250729105530746.png" alt=""></p><p>打开终端</p><p><img src="file-20250729105553562.png" alt=""></p><p>在终端中，运行以下命令创建一个新的 Flutter 项目：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flutter create my_first_app</span><br></code></pre></td></tr></table></figure><p>创建完毕</p><p><img src="file-20250729110128819.png" alt=""></p><p><img src="file-20250729110153956.png" alt=""></p><p>进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_first_app<br></code></pre></td></tr></table></figure><h2 id="2-2-运行应用"><a href="#2-2-运行应用" class="headerlink" title="2-2-运行应用"></a>2-2-运行应用</h2><p>运行以下命令启动应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter run<br></code></pre></td></tr></table></figure><p><img src="file-20250729110642500.png" alt=""></p><p>选择设备后，弹出测试程序</p><p><img src="file-20250729110714236.png" alt=""></p><p>在创建的项目中，目录结构如下：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix">my_first_app<span class="hljs-symbol">/</span><br>├── android<span class="hljs-symbol">/</span><br>├── ios<span class="hljs-symbol">/</span><br>├── lib<span class="hljs-symbol">/</span><br>│   └── main.dart<br>├── test<span class="hljs-symbol">/</span><br>├── pubspec.yaml<br>└── README.md<br></code></pre></td></tr></table></figure><br>其中：</p><p><code>lib/</code>：主要的 Dart 代码目录，<code>main.dart</code>是应用的入口文件。</p><p><code>pubspec.yaml</code>：项目的配置文件，用于管理依赖包。</p><h1 id="三、编译应用"><a href="#三、编译应用" class="headerlink" title="三、编译应用"></a>三、编译应用</h1><h2 id="3-1-生成apk文件"><a href="#3-1-生成apk文件" class="headerlink" title="3-1-生成apk文件"></a>3-1-生成apk文件</h2><p>在对应目录下打开终端，输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flutter build apk</span><br></code></pre></td></tr></table></figure><p><img src="file-20250729122208682.png" alt=""></p><p>但总是卡在</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">Running</span></span> Gradle task <span class="hljs-string">&#x27;assembleRelease&#x27;</span>...  <br></code></pre></td></tr></table></figure><p>这一步，网上的各种教程都是说修改<code>/android/build.gradle</code>、<code>flutter/packages/flutter_tools/gradle/flutter.gradle</code>这些<code>.gradle</code>结尾的文件，但实际打开目录时发现这些文件后面多了<code>kts</code>后缀。</p><p><img src="file-20250729131621144.png" alt=""></p><p>这种情况通常发生在较新的Android项目中，因为Google正在推动从Groovy转向Kotlin DSL作为构建脚本语言。新版Android Studio的gradle文件已经默认使用Kotlin脚本(KTS)。</p><p>.gradle使用Groovy语言编写，而.gradle.kts使用Kotlin脚本。</p><p>所以应该修改<code>settings.gradle.kts</code>文件和<code>build.gradle.kts</code>文件。</p><p>对于<code>settings.gradle.kts</code>文件</p><p><img src="file-20250729131918996.png" alt=""></p><p>在此处插入国内镜像源</p><p><img src="file-20250729132012299.png" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Google 专属仓库（Android 项目必备）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/google&quot;</span>)</span></span><br><br><span class="hljs-comment">// 公共中央仓库（代理 Maven Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span>)</span></span><br><br><span class="hljs-comment">// Gradle 插件仓库</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>)</span></span><br><br><span class="hljs-comment">// JCenter 仓库（兼容旧项目）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/jcenter&quot;</span>)</span></span><br><br><span class="hljs-comment">// 通用仓库（覆盖 Google + Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://repo.huaweicloud.com/repository/maven&quot;</span>)</span></span><br><br><span class="hljs-comment">// 公共仓库（代理 Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://mirrors.cloud.tencent.com/nexus/repository/maven-public&quot;</span>)</span></span><br><br><span class="hljs-comment">// 清华大学镜像</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/maven&quot;</span>)</span></span><br><br><span class="hljs-comment">// 中国科学技术大学镜像</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/maven&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>完整配置如下</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">pluginManagement</span> &#123;<br>    <span class="hljs-variable">val</span> <span class="hljs-variable">flutterSdkPath</span> = <span class="hljs-variable">run</span> &#123;<br>        <span class="hljs-variable">val</span> <span class="hljs-variable">properties</span> = <span class="hljs-variable">java.util.Properties</span>()<br>        <span class="hljs-function"><span class="hljs-title">file</span>(<span class="hljs-string">&quot;local.properties&quot;</span>).inputStream().use &#123; <span class="hljs-variable">properties.load</span>(<span class="hljs-variable">it</span>) &#125;</span><br><span class="hljs-function">        <span class="hljs-variable">val</span> <span class="hljs-variable">flutterSdkPath</span> = <span class="hljs-variable">properties.getProperty</span>(<span class="hljs-string">&quot;flutter.sdk&quot;</span>)</span><br>        <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-variable">flutterSdkPath</span> <span class="hljs-variable">!</span>= <span class="hljs-variable"><span class="hljs-literal">null</span></span>) &#123; <span class="hljs-string">&quot;flutter.sdk not set in local.properties&quot;</span> &#125;</span><br><span class="hljs-function">        <span class="hljs-variable">flutterSdkPath</span></span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">includeBuild</span>(<span class="hljs-string">&quot;$flutterSdkPath/packages/flutter_tools/gradle&quot;</span>)</span><br><br>    <span class="hljs-variable">repositories</span> &#123;<br><br><span class="hljs-comment">// Google 专属仓库（Android 项目必备）</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/google&quot;</span>)</span><br><br><span class="hljs-comment">// 公共中央仓库（代理 Maven Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span>)</span><br><br><span class="hljs-comment">// Gradle 插件仓库</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>)</span><br><br><span class="hljs-comment">// JCenter 仓库（兼容旧项目）</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/jcenter&quot;</span>)</span><br><br><span class="hljs-comment">// 通用仓库（覆盖 Google + Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://repo.huaweicloud.com/repository/maven&quot;</span>)</span><br><br><span class="hljs-comment">// 公共仓库（代理 Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://mirrors.cloud.tencent.com/nexus/repository/maven-public&quot;</span>)</span><br><br><span class="hljs-comment">// 清华大学镜像</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/maven&quot;</span>)</span><br><br><span class="hljs-comment">// 中国科学技术大学镜像</span><br><span class="hljs-function"><span class="hljs-title">maven</span>(<span class="hljs-variable">url</span> = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/maven&quot;</span>)</span><br><br>        <span class="hljs-function"><span class="hljs-title">google</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">mavenCentral</span>()</span><br>        <span class="hljs-function"><span class="hljs-title">gradlePluginPortal</span>()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">plugins</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">id</span>(<span class="hljs-string">&quot;dev.flutter.flutter-plugin-loader&quot;</span>) <span class="hljs-variable">version</span> <span class="hljs-string">&quot;1.0.0&quot;</span></span><br><span class="hljs-function">    <span class="hljs-title">id</span>(<span class="hljs-string">&quot;com.android.application&quot;</span>) <span class="hljs-variable">version</span> <span class="hljs-string">&quot;8.7.3&quot;</span> <span class="hljs-variable">apply</span> <span class="hljs-variable"><span class="hljs-literal">false</span></span></span><br><span class="hljs-function">    <span class="hljs-title">id</span>(<span class="hljs-string">&quot;org.jetbrains.kotlin.android&quot;</span>) <span class="hljs-variable">version</span> <span class="hljs-string">&quot;2.1.0&quot;</span> <span class="hljs-variable">apply</span> <span class="hljs-variable"><span class="hljs-literal">false</span></span></span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">include</span>(<span class="hljs-string">&quot;:app&quot;</span>)</span><br><br></code></pre></td></tr></table></figure><p>对于<code>build.gradle.kts</code>文件</p><p><img src="file-20250729142010643.png" alt=""></p><p>添加</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Google 专属仓库（Android 项目必备）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/google&quot;</span>)</span></span><br><br><span class="hljs-comment">// 公共中央仓库（代理 Maven Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span>)</span></span><br><br><span class="hljs-comment">// Gradle 插件仓库</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>)</span></span><br><br><span class="hljs-comment">// JCenter 仓库（兼容旧项目）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/jcenter&quot;</span>)</span></span><br><br><span class="hljs-comment">// 通用仓库（覆盖 Google + Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://repo.huaweicloud.com/repository/maven&quot;</span>)</span></span><br><br><span class="hljs-comment">// 公共仓库（代理 Central）</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://mirrors.cloud.tencent.com/nexus/repository/maven-public&quot;</span>)</span></span><br><br><span class="hljs-comment">// 清华大学镜像</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/maven&quot;</span>)</span></span><br><br><span class="hljs-comment">// 中国科学技术大学镜像</span><br><span class="hljs-function"><span class="hljs-title">maven</span><span class="hljs-params">(url = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/maven&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>完整配置如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs stylus">allprojects &#123;<br>    repositories &#123;<br><span class="hljs-comment">// Google 专属仓库（Android 项目必备）</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/google&quot;</span>)<br><br><span class="hljs-comment">// 公共中央仓库（代理 Maven Central）</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span>)<br><br><span class="hljs-comment">// Gradle 插件仓库</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>)<br><br><span class="hljs-comment">// JCenter 仓库（兼容旧项目）</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://maven.aliyun.com/repository/jcenter&quot;</span>)<br><br><span class="hljs-comment">// 通用仓库（覆盖 Google + Central）</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://repo.huaweicloud.com/repository/maven&quot;</span>)<br><br><span class="hljs-comment">// 公共仓库（代理 Central）</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://mirrors.cloud.tencent.com/nexus/repository/maven-public&quot;</span>)<br><br><span class="hljs-comment">// 清华大学镜像</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/maven&quot;</span>)<br><br><span class="hljs-comment">// 中国科学技术大学镜像</span><br><span class="hljs-built_in">maven</span>(url = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/maven&quot;</span>)<br><br>        <span class="hljs-built_in">google</span>()<br>        <span class="hljs-built_in">mavenCentral</span>()<br>    &#125;<br>&#125;<br><br>val newBuildDir: Directory = rootProject<span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.buildDirectory</span><span class="hljs-selector-class">.dir</span>(<span class="hljs-string">&quot;../../build&quot;</span>)<span class="hljs-selector-class">.get</span>()<br>rootProject<span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.buildDirectory</span><span class="hljs-selector-class">.value</span>(newBuildDir)<br><br>subprojects &#123;<br>    val newSubprojectBuildDir: Directory = newBuildDir<span class="hljs-selector-class">.dir</span>(project.name)<br>    project<span class="hljs-selector-class">.layout</span><span class="hljs-selector-class">.buildDirectory</span><span class="hljs-selector-class">.value</span>(newSubprojectBuildDir)<br>&#125;<br>subprojects &#123;<br>    project<span class="hljs-selector-class">.evaluationDependsOn</span>(<span class="hljs-string">&quot;:app&quot;</span>)<br>&#125;<br><br>tasks.register&lt;Delete&gt;(<span class="hljs-string">&quot;clean&quot;</span>) &#123;<br>    <span class="hljs-built_in">delete</span>(rootProject<span class="hljs-selector-class">.layout</span>.buildDirectory)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="file-20250729142028835.png" alt=""></p><p>添加镜像源后速度恢复正常。</p><p><img src="file-20250729131000344.png" alt=""></p><p>编译apk成功</p><p><img src="file-20250729142645613.png" alt=""></p><p>输出路径在<code>项目名\build\app\outputs\apk\release</code>内</p><p><img src="file-20250729142739490.png" alt=""></p><h2 id="3-2-生成exe文件"><a href="#3-2-生成exe文件" class="headerlink" title="3-2-生成exe文件"></a>3-2-生成exe文件</h2><p>项目目录下，在命令行输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flutter build windows</span><br></code></pre></td></tr></table></figure><p><img src="file-20250729143527833.png" alt=""></p><p>生成exe成功</p><p><img src="file-20250729143807058.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-使用python操作neo4j</title>
    <link href="/2025/08/07/02-%E4%BD%BF%E7%94%A8python%E6%93%8D%E4%BD%9Cneo4j/"/>
    <url>/2025/08/07/02-%E4%BD%BF%E7%94%A8python%E6%93%8D%E4%BD%9Cneo4j/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考微信公众号Python伊甸园的文章《使用python操作neo4j》^[<a href="https://mp.weixin.qq.com/s/by6qzy7Omkv-tDAtt1muow">https://mp.weixin.qq.com/s/by6qzy7Omkv-tDAtt1muow</a>]</p><h1 id="一、基础环境准备"><a href="#一、基础环境准备" class="headerlink" title="一、基础环境准备"></a>一、基础环境准备</h1><h2 id="1-1-创建-Conda-虚拟环境"><a href="#1-1-创建-Conda-虚拟环境" class="headerlink" title="1-1-创建 Conda 虚拟环境"></a>1-1-创建 Conda 虚拟环境</h2><p>打开终端/命令行，输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> create -n name python=<span class="hljs-number">3</span>.<span class="hljs-number">11</span> -y<br></code></pre></td></tr></table></figure><p><code>name</code>：环境名称，可自定义，如neo4j。</p><p><code>python=3.11</code>：指定Python版本。</p><p><code>-y</code>：自动确认安装依赖。</p><p><img src="file-20250729195316271.png" alt=""></p><p> 激活环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> neo4j<br></code></pre></td></tr></table></figure><h2 id="1-2-安装-Py2neo-库"><a href="#1-2-安装-Py2neo-库" class="headerlink" title="1-2-安装 Py2neo 库"></a>1-2-安装 Py2neo 库</h2><p>在终端输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> py2neo<br></code></pre></td></tr></table></figure><p><img src="file-20250730153400213.png" alt=""></p><h2 id="1-3-安装neo4j"><a href="#1-3-安装neo4j" class="headerlink" title="1-3-安装neo4j"></a>1-3-安装neo4j</h2><p>文章主要参考知乎watersprite的文章《windows下安装neo4j community版详细步骤（知识图谱 一）》^[<a href="https://zhuanlan.zhihu.com/p/26634070689">https://zhuanlan.zhihu.com/p/26634070689</a>]</p><p>要搞清楚特定neo4j版本对应的java版本，两者之间版本需要对应</p><p>java 下载路径：<a href="https://link.zhihu.com/?target=https%3A//download.oracle.com/java/17/archive/jdk-17.0.7_windows-x64_bin.exe">jdk</a></p><p>neo4j下载路径：<a href="https://link.zhihu.com/?target=http%3A//dist.neo4j.org/neo4j-community-5.15.0-windows.zip">neo4j</a></p><h3 id="1-3-1-java环境安装及配置"><a href="#1-3-1-java环境安装及配置" class="headerlink" title="1-3-1-java环境安装及配置"></a>1-3-1-java环境安装及配置</h3><p>打开安装包</p><p><img src="file-20250731123237860.png" alt=""></p><p>进入安装程序</p><p><img src="file-20250805151810824.png" alt=""></p><h3 id="1-3-2-安装neo4j"><a href="#1-3-2-安装neo4j" class="headerlink" title="1-3-2-安装neo4j"></a>1-3-2-安装neo4j</h3><p>解压neo4j-community-5.15.0-windows.zip文件到目标地址</p><p><img src="file-20250805152351557.png" alt=""></p><p>进入neo4j的解压文件夹，然后进入bin目录，复制该路径</p><p><img src="file-20250805152518379.png" alt=""></p><p>编辑PATH变量，再新增一个环境变量</p><p><img src="file-20250805152644425.png" alt=""></p><p>打开cmd，输入neo4j console</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">neo4j <span class="hljs-built_in">console</span><br></code></pre></td></tr></table></figure><p><img src="file-20250805153502924.png" alt=""></p><p>如果显示<code>无法识别为cmdlet、函数、脚本文件或可运行程序的名称</code>可以重启电脑再次尝试</p><p>打开给出的地址，可以进入后台</p><p><img src="file-20250805153534645.png" alt=""></p><p><img src="file-20250805153550465.png" alt=""></p><h3 id="1-3-3-测试neo4j"><a href="#1-3-3-测试neo4j" class="headerlink" title="1-3-3-测试neo4j"></a>1-3-3-测试neo4j</h3><p>创建并登录库，具体界面如下图所示，用户名写neo4j，原始密码为neo4j，点击connect后进入设置新密码页面。</p><p><img src="file-20250806103533630.png" alt=""></p><p><img src="file-20250806103628445.png" alt=""></p><p>密码修改完毕</p><p><img src="file-20250806104120748.png" alt=""></p><p>进入数据库</p><p><img src="file-20250806104543361.png" alt=""></p><p><img src="file-20250806104611642.png" alt=""></p><p>此处为命令行</p><p><img src="file-20250806104646450.png" alt=""></p><p>输入下面两行代码创建两个节点，然后点击运行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">create (p1:Person &#123;name:<span class="hljs-string">&quot;zs&quot;</span>&#125;) <br>create (p2:Person &#123;name:<span class="hljs-string">&quot;ls&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><img src="file-20250806105156263.png" alt=""></p><p>运行结果如下图所示</p><p><img src="file-20250806105223727.png" alt=""></p><p>使用下面代码创建两个边</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">create (p1:Person &#123;name:<span class="hljs-string">&quot;zs&quot;</span>&#125;) -<span class="hljs-selector-attr">[:like]</span>-&gt; (p2:Person &#123;name:<span class="hljs-string">&quot;ls&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><img src="file-20250806105436890.png" alt=""></p><p><img src="file-20250806105449553.png" alt=""></p><p>点击关系类型中like关系，可显示显示图结构</p><p><img src="file-20250806105542805.png" alt=""></p><p><img src="file-20250806105558092.png" alt=""></p><h2 id="1-4-验证安装"><a href="#1-4-验证安装" class="headerlink" title="1-4-验证安装"></a>1-4-验证安装</h2><p>在 Python 交互环境中测试：（<strong>别忘把代码中”你的密码“这一项修改</strong>）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> py2neo import __version__<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Py2neo 版本:&quot;</span>, __version__)  # 应显示安装版本号<br><span class="hljs-comment"># 连接 Neo4j 测试（确保本地 Neo4j 服务已启动）</span><br><span class="hljs-keyword">from</span> py2neo import Graph<br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;你的密码&quot;</span>))<br><span class="hljs-built_in">print</span>(graph.<span class="hljs-built_in">run</span>(<span class="hljs-string">&quot;RETURN &#x27;连接成功&#x27;&quot;</span>).data())<br></code></pre></td></tr></table></figure><p>如果直接运行会显示</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">py2neo.errors.ConnectionUnavailable: Cannot <span class="hljs-keyword">open</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> ConnectionProfile(<span class="hljs-string">&#x27;bolt://localhost:7687&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="file-20250806110032778.png" alt=""></p><p>需要先在后台打开数据库，还是输入neo4j console</p><p><img src="file-20250806110418490.png" alt=""></p><p>正常运行</p><h1 id="二、neo4j的基础语法"><a href="#二、neo4j的基础语法" class="headerlink" title="二、neo4j的基础语法"></a>二、neo4j的基础语法</h1><h2 id="2-1-创建节点与关系"><a href="#2-1-创建节点与关系" class="headerlink" title="2-1-创建节点与关系"></a>2-1-创建节点与关系</h2><h3 id="2-1-1-创建节点"><a href="#2-1-1-创建节点" class="headerlink" title="2-1-1-创建节点"></a>2-1-1-创建节点</h3><p>创建一个Person的节点，名字是Alice。相当于Alice被划分为Person这个类别。</p><p>对于Person节点，有name和age两个属性。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">from py2neo import Graph, <span class="hljs-keyword">Node</span><br><br><span class="hljs-title"># 连接 Docker</span> 内的 Neo4j<br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, <span class="hljs-attr">auth=</span>(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 创建节点</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">= Node</span>(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attr">name=</span><span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-attr">age=</span><span class="hljs-number">30</span>)<br>graph.create(<span class="hljs-keyword">node</span><span class="hljs-title">)</span><br></code></pre></td></tr></table></figure><p>在neo4j内，每一个点称作一个实体(节点)，Alice就是一个实体，拥有age和name两个属性。</p><p>运行后，效果如下图</p><p><img src="file-20250806111147012.png" alt=""></p><h3 id="2-1-2-清空neo4j数据"><a href="#2-1-2-清空neo4j数据" class="headerlink" title="2-1-2-清空neo4j数据"></a>2-1-2-清空neo4j数据</h3><p>在neo4j后台中输入</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">MATCH</span> (<span class="hljs-built_in">n</span>)<br>DETACH DELETE <span class="hljs-built_in">n</span><br></code></pre></td></tr></table></figure><p><img src="file-20250806111331526.png" alt=""></p><p>结果如下</p><p><img src="file-20250806111415662.png" alt=""></p><p><img src="file-20250807075303747.png" alt=""></p><h3 id="2-1-3-创建关系"><a href="#2-1-3-创建关系" class="headerlink" title="2-1-3-创建关系"></a>2-1-3-创建关系</h3><p>创建Alice与Bob的关系，设定他们是朋友关系，指向关系为：alice-&gt;bob；since表示朋友关系的开始时间。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> py2neo import Graph, Node, NodeMatcher,Relationship<br><br><span class="hljs-comment"># 连接Neo4j</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 创建节点间关系</span><br>alice = Node(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Alice&quot;</span>)<br>bob = Node(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Bob&quot;</span>)<br>relation = Relationship(alice, <span class="hljs-string">&quot;FRIEND&quot;</span>, bob, <span class="hljs-attribute">since</span>=2025)<br>graph.create(relation)  # 提交关系<br></code></pre></td></tr></table></figure><p><img src="file-20250807075614260.png" alt=""></p><p>运行后</p><p><img src="file-20250807075642209.png" alt=""></p><h3 id="2-1-4-重复执行"><a href="#2-1-4-重复执行" class="headerlink" title="2-1-4-重复执行"></a>2-1-4-重复执行</h3><p>重复执行创建关系，并不会覆盖，而是会新建节点与关系。</p><p>再次执行2-1-3的代码，Alice和Bob再次形成新的实体，且id不同。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> py2neo import Graph, Node, NodeMatcher,Relationship<br><br><span class="hljs-comment"># 连接Neo4j</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 创建节点间关系</span><br>alice = Node(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Alice&quot;</span>)<br>bob = Node(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Bob&quot;</span>)<br>relation = Relationship(alice, <span class="hljs-string">&quot;FRIEND&quot;</span>, bob, <span class="hljs-attribute">since</span>=2025)<br>graph.create(relation)  # 提交关系<br></code></pre></td></tr></table></figure><p><img src="file-20250807075934250.png" alt=""></p><p><img src="file-20250807075959683.png" alt=""></p><h2 id="2-2-merge-创建节点和关系"><a href="#2-2-merge-创建节点和关系" class="headerlink" title="2-2-merge()创建节点和关系"></a>2-2-merge()创建节点和关系</h2><h3 id="2-2-1-creat-的缺点"><a href="#2-2-1-creat-的缺点" class="headerlink" title="2-2-1-creat()的缺点"></a>2-2-1-creat()的缺点</h3><p>在通过graph.create()进行节点、关系创建时，多次执行后，会重复创建节点与关系。</p><p>而多数情况下，我们想要的是多次执行，仍然只创建一组实体，可以采用merge函数来解决这个问题。</p><h3 id="2-2-2-merge-的效果"><a href="#2-2-2-merge-的效果" class="headerlink" title="2-2-2-merge()的效果"></a>2-2-2-merge()的效果</h3><p>存在则匹配：若指定模式已存在，则直接匹配并返回结果。</p><p>不存在则创建：若模式不存在，则创建该模式的所有元素（节点、关系及属性）。</p><p>在py2neo中，merge 会检查实体的 is_bound 状态（是否已绑定到数据库）。若实体未绑定（即未预先提交），则会自动创建并绑定实体，再创建关系。</p><p>简单来说，若实体存在，就不再次创建实体，直接创建关系；如果不存在，就先创建实体再创建关系。</p><h3 id="2-2-3-代码测试"><a href="#2-2-3-代码测试" class="headerlink" title="2-2-3-代码测试"></a>2-2-3-代码测试</h3><p>多次执行下述代码，也仅形成一个实体关系对。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> py2neo import Graph, Node, Relationship<br><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br>alice = Node(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Alice&quot;</span>)<br>bob = Node(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Bob&quot;</span>)<br>relation = Relationship(alice, <span class="hljs-string">&quot;FRIEND&quot;</span>, bob, <span class="hljs-attribute">since</span>=2026)<br><br><span class="hljs-comment"># 合并节点</span><br>graph.merge(alice, <span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)<br>graph.merge(bob, <span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)<br><br><span class="hljs-comment"># 创建关系</span><br>graph.merge(relation)<br></code></pre></td></tr></table></figure><p><img src="file-20250807081406938.png" alt=""></p><h2 id="2-3-实体的查询"><a href="#2-3-实体的查询" class="headerlink" title="2-3-实体的查询"></a>2-3-实体的查询</h2><h3 id="2-3-1-查询节点"><a href="#2-3-1-查询节点" class="headerlink" title="2-3-1-查询节点"></a>2-3-1-查询节点</h3><p>通过NodeMatcher去匹配节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> py2neo <span class="hljs-keyword">import</span> Graph, Node, NodeMatcher,Relationship,RelationshipMatcher<br><br><span class="hljs-comment"># 连接Neo4j</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 使用NodeMatcher</span><br>matcher = NodeMatcher(graph)<br><span class="hljs-comment"># 匹配name=Alice的节点</span><br>result = matcher.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;Person&quot;</span>).where(<span class="hljs-string">&quot;_.name = &#x27;Alice&#x27;&quot;</span>).<span class="hljs-built_in">all</span>()<br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><img src="file-20250807081638480.png" alt=""></p><p>得到结果</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">Node</span>(<span class="hljs-symbol">&#x27;Person</span>&#x27;, name=<span class="hljs-symbol">&#x27;Alice</span>&#x27;)]<br></code></pre></td></tr></table></figure><h3 id="2-3-2-查询关系"><a href="#2-3-2-查询关系" class="headerlink" title="2-3-2-查询关系"></a>2-3-2-查询关系</h3><p>通过RelationshipMatcher去匹配关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> py2neo <span class="hljs-keyword">import</span> Graph, Node, NodeMatcher,Relationship,RelationshipMatcher<br><br><span class="hljs-comment"># 连接Neo4j</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 使用RelationshipMatcher</span><br>rel_matcher = RelationshipMatcher(graph)<br>relations = rel_matcher.<span class="hljs-keyword">match</span>(r_type=<span class="hljs-string">&quot;FRIEND&quot;</span>).<span class="hljs-built_in">all</span>()<br><br><span class="hljs-built_in">print</span>(relations)<br></code></pre></td></tr></table></figure><p><img src="file-20250807081913909.png" alt=""></p><p>得到结果</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">FRIEND</span>(<span class="hljs-name">Node</span>(<span class="hljs-symbol">&#x27;Person</span>&#x27;, name=<span class="hljs-symbol">&#x27;Alice</span>&#x27;), Node(<span class="hljs-symbol">&#x27;Person</span>&#x27;, name=<span class="hljs-symbol">&#x27;Bob</span>&#x27;), since=2026)]<br></code></pre></td></tr></table></figure><h2 id="2-4-删除实体与关系"><a href="#2-4-删除实体与关系" class="headerlink" title="2-4-删除实体与关系"></a>2-4-删除实体与关系</h2><h3 id="2-4-1-删除实体"><a href="#2-4-1-删除实体" class="headerlink" title="2-4-1-删除实体"></a>2-4-1-删除实体</h3><p>通过graph.delete()删除指定实体，当实体被删除后，其关系将自动被删除。</p><p>本质：匹配到指定节点，然后用delete删除。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">from py2neo import Graph, <span class="hljs-keyword">Node</span><span class="hljs-title">, NodeMatcher</span>, Relationship<br><br><span class="hljs-comment"># 连接 Docker 内的 Neo4j</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, <span class="hljs-attr">auth=</span>(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 按条件删除节点</span><br>matcher = NodeMatcher(graph)<br><span class="hljs-comment"># 匹配第一个Alice的Person节点</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">= matcher</span>.match(<span class="hljs-string">&quot;Person&quot;</span>, <span class="hljs-attr">name=</span><span class="hljs-string">&quot;Alice&quot;</span>).first()<br>if <span class="hljs-keyword">node</span><span class="hljs-title">:</span><br><span class="hljs-title">graph</span>.delete(<span class="hljs-keyword">node</span><span class="hljs-title">)  # 自动删除关联关系</span><br><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>在删除Alice实体后，Alice实体的关系也被删除，仅保留Bob实体。</p><p><img src="file-20250807082606331.png" alt=""></p><h3 id="2-4-2-删除关系"><a href="#2-4-2-删除关系" class="headerlink" title="2-4-2-删除关系"></a>2-4-2-删除关系</h3><p>通过graph.delete()删除指定关系，实体会被保留。  </p><p>本质：匹配到指定关系，然后用delete删除。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">from py2neo import Graph, <span class="hljs-keyword">Node</span><span class="hljs-title">, NodeMatcher</span>, Relationship, RelationshipMatcher<br><br><span class="hljs-comment"># 连接Neo4j</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, <span class="hljs-attr">auth=</span>(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><br><span class="hljs-comment"># 删除特定关系</span><br>rel_matcher = RelationshipMatcher(graph)<br><span class="hljs-comment"># 匹配FRIEND的关系</span><br>relation = rel_matcher.match(<span class="hljs-attr">r_type=</span><span class="hljs-string">&quot;FRIEND&quot;</span>).first()<br>if relation:<br>    graph.separate(relation)  <span class="hljs-comment"># 仅删除关系，保留节点</span><br>    <br></code></pre></td></tr></table></figure><p>运行前</p><p><img src="file-20250807082905138.png" alt=""></p><p>运行后</p><p><img src="file-20250807082928550.png" alt=""></p><p>实体间关系被删除，但是实体得以保留。</p><h3 id="2-4-3-删除所有数据"><a href="#2-4-3-删除所有数据" class="headerlink" title="2-4-3-删除所有数据"></a>2-4-3-删除所有数据</h3><p>graph.delete_all()可以删除数据库内所有数据。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">from</span> py2neo import Graph<br><br><span class="hljs-comment"># 1. 连接 Neo4j 数据库</span><br>graph = Graph(<span class="hljs-string">&quot;bolt://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))<br><br><span class="hljs-comment"># 2. 删除所有节点和关系（谨慎操作！）</span><br>graph.delete_all()  <span class="hljs-comment"># 执行后数据库将被清空</span><br><br><span class="hljs-comment"># 3. 验证删除结果（可选）</span><br><span class="hljs-literal">result</span> = graph.<span class="hljs-built_in">run</span>(<span class="hljs-string">&quot;MATCH (n) RETURN COUNT(n) AS node_count&quot;</span>)<br>print(<span class="hljs-string">&quot;剩余节点数量:&quot;</span>, <span class="hljs-literal">result</span>.evaluate())  <span class="hljs-comment"># 输出应为 0</span><br></code></pre></td></tr></table></figure><p>运行后</p><p><img src="file-20250807083311777.png" alt=""></p><p>输出结果</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">剩余节点数量: 0</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807083355660.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>neo4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-py-window-styles打造Windows 11风格Python UI</title>
    <link href="/2025/08/06/05-py-window-styles%E6%89%93%E9%80%A0Windows%2011%E9%A3%8E%E6%A0%BCPython%20UI/"/>
    <url>/2025/08/06/05-py-window-styles%E6%89%93%E9%80%A0Windows%2011%E9%A3%8E%E6%A0%BCPython%20UI/</url>
    
    <content type="html"><![CDATA[<p>支持多种库</p><ul><li>Tkinter</li><li>Customtkinter</li><li>PyQt</li><li>PySide</li><li>WxPython</li><li>Pygame</li><li>Kivy</li><li>PySimpleGUI</li><li>DearPyGui</li></ul><p>安装第三方库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pywinstyles<br></code></pre></td></tr></table></figure><p><img src="file-20250806213031708.png" alt=""></p><p><strong>使用 pywinstyles.apply_style() 函数将主题应用到该窗口</strong></p><p>下面是测试代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import tkinter as tk<br>import pywinstyles<br><br><span class="hljs-comment"># 创建窗口</span><br>root = tk.Tk()<br><br><span class="hljs-comment"># 设置窗口大小</span><br>root.geometry(<span class="hljs-string">&quot;800x600&quot;</span>)      # 设置初始尺寸为800x600<br><br><span class="hljs-comment"># 应用Windows 11主题</span><br>pywinstyles.apply_style(root, <span class="hljs-string">&quot;acrylic&quot;</span>)<br><br><span class="hljs-comment"># 添加内容</span><br>label = tk.Label(root, <span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;Hello, World!&quot;</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, 24), <span class="hljs-attribute">bg</span>=<span class="hljs-string">&#x27;#F0F0F0&#x27;</span>)<br>label.pack(<span class="hljs-attribute">pady</span>=50)  # 增加垂直间距使内容居中<br><br><span class="hljs-comment"># 运行窗口</span><br>root.mainloop()<br></code></pre></td></tr></table></figure><p>效果如下</p><div class="table-container"><table><thead><tr><th>风格</th><th>效果</th></tr></thead><tbody><tr><td>mica</td><td><img src="file-20250806213625287.png" alt=""></td></tr><tr><td>acrylic</td><td><img src="file-20250806213645783.png" alt=""></td></tr><tr><td>aero (GPU Heavy)</td><td><img src="file-20250806213712812.png" alt=""></td></tr><tr><td>transparent (GPU Heavy)</td><td><img src="file-20250806213739395.png" alt=""></td></tr><tr><td>optimised</td><td><img src="file-20250806213758806.png" alt=""></td></tr><tr><td>win7</td><td><img src="file-20250806213817915.png" alt=""></td></tr><tr><td>inverse</td><td><img src="file-20250806213849024.png" alt=""></td></tr><tr><td>native</td><td><img src="file-20250806213926856.png" alt=""></td></tr><tr><td>popup</td><td><img src="file-20250806214004342.png" alt=""></td></tr><tr><td>dark</td><td><img src="file-20250806214025039.png" alt=""></td></tr><tr><td>normal</td><td>不修改</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-微信小程序开发</title>
    <link href="/2025/08/06/04-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <url>/2025/08/06/04-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN邢帥兵_的文章《微信小程序开发（超详细保姆式教程）》^[<a href="https://blog.csdn.net/m0_64875238/article/details/127796691">https://blog.csdn.net/m0_64875238/article/details/127796691</a>]</p><h1 id="01-注册微信小程序"><a href="#01-注册微信小程序" class="headerlink" title="01-注册微信小程序"></a>01-注册微信小程序</h1><p>打开网页<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1&amp;source=mpregister&amp;token=&amp;lang=zh_CN">小程序</a>注册一个小程序</p><p><img src="file-20250806190036374.png" alt=""></p><p>完成注册</p><p><img src="file-20250806190358719.png" alt=""></p><h1 id="02-下载微信开发者工具"><a href="#02-下载微信开发者工具" class="headerlink" title="02-下载微信开发者工具"></a>02-下载微信开发者工具</h1><p>下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信web开发者工具</a>，根据自己的操作系统下载对应的安装包进行安装即可。</p><p><img src="file-20250806190541976.png" alt=""></p><p>打开安装包</p><p><img src="file-20250806191026173.png" alt=""></p><p>点击下一步</p><p><img src="file-20250806191047989.png" alt=""></p><p>点击我接受</p><p><img src="file-20250806191107033.png" alt=""></p><p>选择安装位置后点击安装，开始安装</p><p><img src="file-20250806191145781.png" alt=""></p><p>安装完毕</p><h1 id="03-创建项目"><a href="#03-创建项目" class="headerlink" title="03-创建项目"></a>03-创建项目</h1><p>打开微信开发者工具</p><p><img src="file-20250806191552046.png" alt=""></p><p>扫码登陆</p><p><img src="file-20250806191649533.png" alt=""></p><p>新建项目</p><p><img src="file-20250806192555702.png" alt=""></p><p>进入小程序界面</p><p><img src="file-20250806193716058.png" alt=""></p><p>点击开发管理</p><p><img src="file-20250806193750219.png" alt=""></p><p>复制小程序ID</p><p><img src="file-20250806193838717.png" alt=""></p><p>填入appID处</p><p><img src="file-20250806193925712.png" alt=""></p><p>点击创建</p><p><img src="file-20250806194532057.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>微信</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-SQL Server安装</title>
    <link href="/2025/08/06/01-SQL%20Server%E5%AE%89%E8%A3%85/"/>
    <url>/2025/08/06/01-SQL%20Server%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="01-安装包下载"><a href="#01-安装包下载" class="headerlink" title="01-安装包下载"></a>01-安装包下载</h1><h2 id="01-01-下载地址"><a href="#01-01-下载地址" class="headerlink" title="01-01-下载地址"></a>01-01-下载地址</h2><p>SQL Server下载可以在官网下载<a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads">SQL Server 下载 | Microsoft</a></p><p><img src="file-20250806171558744.png" alt=""></p><h2 id="01-02-版本区别"><a href="#01-02-版本区别" class="headerlink" title="01-02-版本区别"></a>01-02-版本区别</h2><p>可以发现有多个版本</p><p><img src="file-20250806171722467.png" alt=""></p><p>版本的区别如下<a href="https://learn.microsoft.com/zh-cn/sql/sql-server/editions-and-components-of-sql-server-2022?view=sql-server-ver17">SQL Server 2022 的版本和支持的功能 - SQL Server | Microsoft Learn</a></p><div class="table-container"><table><thead><tr><th>版本</th><th>定义</th></tr></thead><tbody><tr><td>企业</td><td>作为高级产品/服务，SQL Server Enterprise Edition 提供了全面的高端数据中心功能，具有极高的性能和无限虚拟化，还具有端到端商业智能，可为任务关键工作负载和最终用户访问数据见解提供高服务级别。</td></tr><tr><td>标准</td><td>SQL Server Standard 版提供了基本数据管理和商业智能数据库，使部门和小型组织能够顺利运行其应用程序并支持将常用开发工具用于内部部署和云部署，有助于以最少的 IT 资源获得高效的数据库管理。</td></tr><tr><td>网络</td><td>对于 Web 主机托管服务提供商（包括在 Azure 上的 IaaS 上选择 Web 版）和 Web VAP 而言，SQL Server Web 版本是一项总拥有成本较低的选择，可针对从小规模到大规模 Web 资产等内容提供可伸缩性、经济性和可管理性能力。</td></tr><tr><td>开发 人员</td><td>企业 SQL Server 开发人员版允许开发人员在 SQL Server 的基础上生成任何类型的应用程序。 它包括 <strong>企业版</strong>的所有功能，但许可用作开发和测试系统，而不是生产服务器。 SQL Server Developer 是构建和测试应用程序的人员的理想之选。</td></tr><tr><td>特快</td><td>SQL Server Express Edition 是入门级的免费数据库，是学习和构建桌面及小型服务器数据驱动应用程序的理想选择。 它是独立软件供应商、开发人员和热衷于构建客户端应用程序的人员的最佳选择。 如果您需要使用更高级的数据库功能，则可以将 SQL Server Express 无缝升级到其他更高端的 SQL Server版本。 SQL Server Express LocalDB 是 Express 版本的一种轻型版本，该版本具备所有可编程性功能，在用户模式下运行，并且具有快速零配置安装和必备组件要求较少的特点。</td></tr></tbody></table></div><p>我们下载SQL Server Express Edition版本即可</p><h1 id="02-安装"><a href="#02-安装" class="headerlink" title="02-安装"></a>02-安装</h1><h2 id="02-01-安装SQL-Server"><a href="#02-01-安装SQL-Server" class="headerlink" title="02-01-安装SQL Server"></a>02-01-安装SQL Server</h2><p>打开下载好的安装包</p><p><img src="file-20250806172140557.png" alt=""></p><p>选择基本即可</p><p><img src="file-20250806172239910.png" alt=""></p><p>点击接收</p><p><img src="file-20250806172306888.png" alt=""></p><p>选择安装位置后点击安装</p><p><img src="file-20250806172359020.png" alt=""></p><p><img src="file-20250806182328465.png" alt=""></p><p>安装完毕</p><p><img src="file-20250806182846516.png" alt=""></p><h2 id="02-02-安装SQL-Server-Management-Studio"><a href="#02-02-安装SQL-Server-Management-Studio" class="headerlink" title="02-02-安装SQL Server Management Studio"></a>02-02-安装SQL Server Management Studio</h2><p>点击安装SSMS</p><p><img src="file-20250806182956374.png" alt=""></p><p>进入网页<a href="https://learn.microsoft.com/zh-cn/ssms/install/install?redirectedfrom=MSDN">安装 SQL Server Management Studio | Microsoft Learn</a></p><p><img src="file-20250806183025748.png" alt=""></p><p>在里面下载，或者点击此链接<a href="https://aka.ms/ssms/21/release/vs_SSMS.exe">下载 SSMS 21</a></p><p><img src="file-20250806183337039.png" alt=""></p><p>打开安装包</p><p><img src="file-20250806183511966.png" alt=""></p><p><img src="file-20250806183523242.png" alt=""></p><p>安装完毕</p><p><img src="file-20250806184952718.png" alt=""></p><p>安装完成后，在开始菜单中找到SQL Server Management Studio打开</p><p><img src="file-20250806185315196.png" alt=""></p><p><img src="file-20250806191907491.png" alt=""></p><p>成功登录</p><p><img src="file-20250806192348020.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>C Sharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-Python使用BeeWare打包EXE</title>
    <link href="/2025/07/28/03-Python%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85EXE/"/>
    <url>/2025/07/28/03-Python%E4%BD%BF%E7%94%A8BeeWare%E6%89%93%E5%8C%85EXE/</url>
    
    <content type="html"><![CDATA[<p>官方教程在此处<a href="https://docs.beeware.org/zh-cn/latest/tutorial/tutorial-0.html">让我们开始吧！ - BeeWare Tutorial</a></p><h1 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0-准备工作"></a>0-准备工作</h1><p>创建虚拟环境，创建Python虚拟环境的命令是：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">conda create -n your_env_name   # your_env_name 为你虚拟环境名<br></code></pre></td></tr></table></figure><p><img src="file-20250728161424352.png" alt=""></p><p><img src="file-20250728161503663.png" alt=""></p><p><img src="file-20250728161540368.png" alt=""></p><p>然后激活这个环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">conda activate BeeWare<br></code></pre></td></tr></table></figure><h1 id="01-第一个应用程序"><a href="#01-第一个应用程序" class="headerlink" title="01-第一个应用程序"></a>01-第一个应用程序</h1><p>安装第三方库<strong>briefcase</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> briefcase<br></code></pre></td></tr></table></figure><p><img src="file-20250728161847525.png" alt=""></p><p>创建默认模板</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">briefcase <span class="hljs-keyword">new</span><br></code></pre></td></tr></table></figure><p><img src="file-20250728164720361.png" alt=""></p><p>下面的设置先全部默认</p><p><img src="file-20250728164805297.png" alt=""></p><p>打开的路径中生成了文件夹</p><p><img src="file-20250728164843953.png" alt=""></p><p>文件结构如下</p><p><img src="file-20250728164910138.png" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">beeware-tutorial/<br>├── beeware-venv/<br>│   └── ...<br>└── helloworld/<br>    ├── CHANGELOG<br>    ├── LICENSE<br>    ├── pyproject<span class="hljs-selector-class">.toml</span><br>    ├── README<span class="hljs-selector-class">.rst</span><br>    ├── <span class="hljs-attribute">src</span>/<br>    │   └── helloworld/<br>    │       ├── app<span class="hljs-selector-class">.py</span><br>    │       ├── __init__<span class="hljs-selector-class">.py</span><br>    │       ├── __main__<span class="hljs-selector-class">.py</span><br>    │       └── resources/<br>    │           └── README<br>    └── tests/<br>        ├── helloworld<span class="hljs-selector-class">.py</span><br>        ├── __init__<span class="hljs-selector-class">.py</span><br>        └── test_app.py<br></code></pre></td></tr></table></figure><p>移动到 <code>helloworld</code> 项目目录，告诉 Briefcase 以开发者（或 <code>dev</code>）模式启动项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> helloworld<br><br>briefcase dev<br></code></pre></td></tr></table></figure><p><img src="file-20250728165107119.png" alt=""></p><p>弹出默认界面</p><p><img src="file-20250728165134701.png" alt=""></p><h1 id="02-打包"><a href="#02-打包" class="headerlink" title="02-打包"></a>02-打包</h1><p>在 <code>helloworld</code> 目录中，运行:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase create</span><br></code></pre></td></tr></table></figure><p><img src="file-20250728165601516.png" alt=""></p><p>报错</p><p><img src="file-20250728165942643.png" alt=""></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Unable <span class="hljs-keyword">to</span> download support package; <span class="hljs-keyword">is</span> your computer offline?<br><br>The reported cause <span class="hljs-keyword">of</span> the problem was The <span class="hljs-keyword">read</span> operation timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p>按照官网教程<a href="https://docs.beeware.org/zh-cn/latest/tutorial/tutorial-3.html">教程 3 - 打包与分发 - BeeWare Tutorial</a>打包时，执行briefcase create时</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase create</span><br></code></pre></td></tr></table></figure><p>会出现网络错误</p><p><img src="file-20250807093136434.png" alt=""></p><h2 id="02-01-联网超时问题解决"><a href="#02-01-联网超时问题解决" class="headerlink" title="02-01-联网超时问题解决"></a>02-01-联网超时问题解决</h2><p>参考<a href="04-使用BeeWare打包下载嵌入版Python的解决方法.md">04-使用BeeWare打包下载嵌入版Python的解决方法</a></p><p><strong>解决方法通过手动下载并指定路径，可以避免去官网线上下载导致超时</strong></p><h3 id="02-01-1-下载缺少的包"><a href="#02-01-1-下载缺少的包" class="headerlink" title="02-01-1-下载缺少的包"></a>02-01-1-下载缺少的包</h3><p>直接按住Ctrl点击对应链接</p><p><img src="file-20250807093333935.png" alt=""></p><p>完成下载</p><p><img src="file-20250807093412801.png" alt=""></p><h3 id="02-01-2-移动到指定路径"><a href="#02-01-2-移动到指定路径" class="headerlink" title="02-01-2-移动到指定路径"></a>02-01-2-移动到指定路径</h3><p>将该文件移动到一个想要的路径上，并复制路径</p><p><img src="file-20250807093537503.png" alt=""></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\PatTi\Desktop\BeeWare<br></code></pre></td></tr></table></figure><h3 id="02-01-3-修改pyproject-toml文件"><a href="#02-01-3-修改pyproject-toml文件" class="headerlink" title="02-01-3-修改pyproject.toml文件"></a>02-01-3-修改pyproject.toml文件</h3><p>打开项目的文件夹，找到其中的pyproject.toml文件</p><p><img src="file-20250807093700732.png" alt=""></p><p>打开这个文件</p><p><img src="file-20250807093718093.png" alt=""></p><p>按下Ctrl+F，输入tool.briefcase.app.helloworld.windows搜索</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tool<span class="hljs-selector-class">.briefcase</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.helloworld</span>.windows<br></code></pre></td></tr></table></figure><p><img src="file-20250807093821353.png" alt=""></p><p>在其下方四行添加刚刚记下的路径加<strong>文件名</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 手动指定本地 support package，避免联网下载</span><br><span class="hljs-attr">support_package</span> = <span class="hljs-string">&quot;C:/Users/PatTi/Desktop/BeeWare/python-3.12.9-embed-amd64.zip&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意要把斜杠改为反斜杠</strong></p><p><img src="file-20250807094100496.png" alt=""></p><p><img src="file-20250807094108390.png" alt=""></p><p>保存</p><h3 id="02-01-4-再次运行"><a href="#02-01-4-再次运行" class="headerlink" title="02-01-4-再次运行"></a>02-01-4-再次运行</h3><p>再次执行briefcase create</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase create</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807094209890.png" alt=""></p><p>成功识别并跳过下载</p><p><img src="file-20250807094250830.png" alt=""></p><p>成功</p><p><img src="file-20250807094303467.png" alt=""></p><h2 id="02-02-构建应用程序"><a href="#02-02-构建应用程序" class="headerlink" title="02-02-构建应用程序"></a>02-02-构建应用程序</h2><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">briefcase build</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807094630062.png" alt=""></p><p>出现错误</p><p><img src="file-20250807095320810.png" alt=""></p><h2 id="02-03-解决打包无法下载RCEdit的问题"><a href="#02-03-解决打包无法下载RCEdit的问题" class="headerlink" title="02-03-解决打包无法下载RCEdit的问题"></a>02-03-解决打包无法下载RCEdit的问题</h2><h3 id="02-03-1-下载RCEdit"><a href="#02-03-1-下载RCEdit" class="headerlink" title="02-03-1-下载RCEdit"></a>02-03-1-下载RCEdit</h3><p>打开浏览器，访问 RCEdit 的 GitHub 发布页：  <a href="https://github.com/electron/rcedit/releases">https://github.com/electron/rcedit/releases</a></p><p><img src="file-20250807100634880.png" alt=""></p><p>下载与你的系统对应的版本（通常是 <code>rcedit-x64.exe</code>）</p><p><img src="file-20250807100656213.png" alt=""></p><h3 id="02-03-2-移动RCEdit"><a href="#02-03-2-移动RCEdit" class="headerlink" title="02-03-2-移动RCEdit"></a>02-03-2-移动RCEdit</h3><p>将下载好的<code>rcedit-x64.exe</code>文件放入以下路径：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\&lt;你的用户名&gt;\AppData\Local\BeeWare\briefcase\Cache\tools\<br></code></pre></td></tr></table></figure><p>如果该路径不存在，手动创建。</p><p><img src="file-20250807100802944.png" alt=""></p><p><img src="file-20250807100816647.png" alt=""></p><h3 id="02-03-3-重新运行"><a href="#02-03-3-重新运行" class="headerlink" title="02-03-3-重新运行"></a>02-03-3-重新运行</h3><p>重新运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">briefcase build<br></code></pre></td></tr></table></figure><p><img src="file-20250807100909379.png" alt=""></p><p>成功</p><p><img src="file-20250807100924893.png" alt=""></p><h2 id="02-04-打包文件"><a href="#02-04-打包文件" class="headerlink" title="02-04-打包文件"></a>02-04-打包文件</h2><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">[helloworld] Built build\helloworld\windows\app\src\Hello World.exe<br></code></pre></td></tr></table></figure><p>上述就是输出的exe文件</p><p><img src="file-20250807101841559.png" alt=""></p><p>打开对应目录</p><p><img src="file-20250807101914642.png" alt=""></p><p>EXE文件能够运行</p><p><img src="file-20250807101938993.png" alt=""></p><p>或使用</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">briefcase <span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807102044067.png" alt=""></p><p><img src="file-20250807102106357.png" alt=""></p><h1 id="03-创建安装程序"><a href="#03-创建安装程序" class="headerlink" title="03-创建安装程序"></a>03-创建安装程序</h1><p>使用 package 命令打包应用程序，以便发布。打包命令会执行将脚手架项目转换为最终可发布产品所需的编译工作。根据平台的不同，这可能涉及编译安装程序、执行代码签名或执行其他发布前任务。</p><p>输入</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">briefcase <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p><img src="file-20250807102308933.png" alt=""></p><p>出现问题，无法下载WiX</p><p><img src="file-20250807103225909.png" alt=""></p><h2 id="03-1-下载WiX"><a href="#03-1-下载WiX" class="headerlink" title="03-1-下载WiX"></a>03-1-下载WiX</h2><p>打开浏览器，访问WiX的 GitHub 发布页：<a href="https://github.com/wixtoolset/wix/releases">Releases · wixtoolset/wix</a></p><p><img src="file-20250807104821555.png" alt=""></p><p>下载与你的系统对应的版本（如<a href="https://github.com/wixtoolset/wix/releases/download/v6.0.1/wix-cli-x64.msi">wix-cli-x64.msi</a>）</p><p><img src="file-20250807104958925.png" alt=""></p><h2 id="03-2-移动WiX"><a href="#03-2-移动WiX" class="headerlink" title="03-2-移动WiX"></a>03-2-移动WiX</h2><p>将下载好的文件放入以下路径：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\&lt;你的用户名&gt;\AppData\Local\BeeWare\briefcase\Cache\tools\<br></code></pre></td></tr></table></figure><p>如果该路径不存在，手动创建。</p><p><img src="file-20250807100802944.png" alt=""></p><p><img src="file-20250807105014951.png" alt=""></p><h2 id="03-3-重新运行"><a href="#03-3-重新运行" class="headerlink" title="03-3-重新运行"></a>03-3-重新运行</h2><p>重新运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">briefcase package<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="file-20250807114907753.png" alt=""> </p><p><img src="file-20250807121545983.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-Word修改默认模板</title>
    <link href="/2025/07/28/03-Word%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/07/28/03-Word%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>如何<strong>每次打开一个新的word文档，都直接生成想要的格式</strong>？</p><p><strong>修改word模板文件（Normal.dotm）</strong></p><blockquote><p>在我们每次新建word文档的时候，word都会根据其中设定的“用户模板”路径，搜寻路径下一个名为Normal.dotm的文件，也即word的默认模板文件——我们可以把它理解成文档的一个母体，任何一个子文档都是对这一母体的完全复制。而我们目前打开的这一新建的word文档，实际上也就是这一模板文件的副本罢了。^[<a href="https://blog.csdn.net/pi_kaqiu/article/details/123702998">https://blog.csdn.net/pi_kaqiu/article/details/123702998</a>]</p></blockquote><p>打开任一word文档，</p><p>文件 → 选项 → 高级 → 下滑下滑，直到找到图中位置</p><p><img src="file-20250609154750722.png" alt=""></p><p><img src="file-20250609154717300.png" alt=""></p><p><img src="file-20250609154840153.png" alt=""></p><p>点击文件位置 → 双击用户模板 → 复制模板路径</p><p><img src="file-20250609154917501.png" alt=""></p><p><img src="file-20250609154941850.png" alt=""></p><p><img src="file-20250609155041055.png" alt=""></p><p> 在文件夹中打开，会发现路径下有一Normal.dotm文件：</p><p><img src="Blog/source/_posts/03-Word修改默认模板/file-20250609155114139.png" alt=""></p><p>打开你所要使用的替换文件，删除其全部内容（否则之后的每个word都会保留这些内容）；</p><p>选择另存为，选择后缀为.dotm，并将文件名改为Normal，保存到桌面</p><p>删除原Normal.dotm文件，并将刚刚新建的Normal.dotm文件复制到模板路径中</p>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>word</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/28/hello-world/"/>
    <url>/2025/07/28/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h2><p>这是我的第一条博客</p><p>Hello World!<br>Hello Hexo！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>02-2-2-QT入门2</title>
    <link href="/2025/06/14/02-2-2-QT%E5%85%A5%E9%97%A82/"/>
    <url>/2025/06/14/02-2-2-QT%E5%85%A5%E9%97%A82/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN会飞的鱼-blog的文章《QT入门看这一篇就够了——超详细讲解（40000多字详细讲解，涵盖qt大量知识）》^[<a href="https://blog.csdn.net/m0_65635427/article/details/130780280">https://blog.csdn.net/m0_65635427/article/details/130780280</a>]</p><h1 id="一、Qt按钮小程序"><a href="#一、Qt按钮小程序" class="headerlink" title="一、Qt按钮小程序"></a>一、Qt按钮小程序</h1><p>重新创建一个QMainWindow</p><p><img src="file-20250614101419869.png" alt=""></p><p>打开<code>mainwindow.cpp</code><br>其中主要是界面的设置</p><p><img src="file-20250614105913712.png" alt=""></p><p>添加代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_mainwindow.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPushButton&gt;</span></span><br><br><br>MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-comment">//第一种创建</span><br>    QPushButton * btn = <span class="hljs-keyword">new</span> QPushButton;<br>    <span class="hljs-comment">//设置父亲</span><br>    btn-&gt;<span class="hljs-built_in">setParent</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//设置文字</span><br>    btn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;按钮1&quot;</span>);<br>    btn-&gt;<span class="hljs-built_in">resize</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>);<br>    <span class="hljs-comment">//移动位置</span><br>    btn-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><br><br>    <span class="hljs-comment">//第二种创建</span><br>    QPushButton * btn2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-string">&quot;按钮2&quot;</span>,<span class="hljs-keyword">this</span>);<br>    btn2-&gt;<span class="hljs-built_in">resize</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>);<br><br><br>&#125;<br><br>MainWindow::~<span class="hljs-built_in">MainWindow</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-创建按钮"><a href="#1-创建按钮" class="headerlink" title="1-创建按钮"></a>1-创建按钮</h2><p>代码中展示了两种创建按钮的方法</p><p>第一种</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//第一种创建</span><br>QPushButton * btn = <span class="hljs-keyword">new</span> QPushButton;<br><span class="hljs-comment">//设置父亲</span><br>btn-&gt;<span class="hljs-built_in">setParent</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-comment">//设置文字</span><br>btn-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;按钮1&quot;</span>);<br>btn-&gt;<span class="hljs-built_in">resize</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>);<br><span class="hljs-comment">//移动位置</span><br>btn-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>第二种</p><p>可以认为第二种创建就是在第一种创建的基础上，在刚刚创建出按钮实例的时候就指定了其中的部分属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//第二种创建</span><br>QPushButton * btn2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-string">&quot;按钮2&quot;</span>,<span class="hljs-keyword">this</span>);<br>btn2-&gt;<span class="hljs-built_in">resize</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><blockquote><p>一个按钮其实就是一个QPushButton类的对象，如果只是创建出对象，是无法显示到窗口中的，所以我们需要依赖一个父窗口，也就是指定一个父亲，利用setParent函数或者按钮创建的时候通过构造函数传参，此时我们称两个窗口建立了父子关系。在有父窗口的情况下，窗口调用show会显示在父窗口中，如果没有父窗口，那么窗口调用show显示的会是一个顶层的窗口（顶层窗口是能够在任务栏中找到的，不依赖于任何一个窗口而独立存在）（按钮也是继承于QWidget，也属于窗口）。<br>如果想设置按钮上显示的文字可以用setText，移动按钮位置用move。<br>对于窗口而言，我们可以修改左上角窗口的标题setWindowTitle，重新指定窗口大小：resize，或者设置固定的窗口大小setFixedSize。</p></blockquote><h2 id="2-Qt窗口坐标体系"><a href="#2-Qt窗口坐标体系" class="headerlink" title="2-Qt窗口坐标体系"></a>2-Qt窗口坐标体系</h2><p>以左上角为原点（0,0），以向右的方向为x轴的正方向，以向下方向为y轴的正方向</p><p><img src="file-20250614110639098.png" alt=""></p><h1 id="二、信号槽机制"><a href="#二、信号槽机制" class="headerlink" title="二、信号槽机制"></a>二、信号槽机制</h1><h2 id="简单介绍Signal、Slot和Connect"><a href="#简单介绍Signal、Slot和Connect" class="headerlink" title="简单介绍Signal、Slot和Connect"></a>简单介绍Signal、Slot和Connect</h2><ol><li><strong>signal</strong>-当某个事件发生后，如某个按钮被点击了一下，它就会发出一个被点击的信号（signal）。</li><li><strong>Slot</strong>-某个对象接收到这个信号之后，就会做一些相关的处理动作（称为槽slot）。</li><li><strong>Connect</strong>-但是Qt对象不会无故收到某个信号，要想让一个对象收到另一个对象发出的信号，这时候需要建立连接（connect）</li></ol><h2 id="添加信号槽的一个简单示例"><a href="#添加信号槽的一个简单示例" class="headerlink" title="添加信号槽的一个简单示例"></a>添加信号槽的一个简单示例</h2><p>添加信号槽时</p><p>在<code>mainwindow.h</code>文件中添加</p><p><img src="file-20250614123813904.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_pushButton_clicked</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><code>main.cpp</code>文件不变</p><p><code>mainwindows.cpp</code>文件添加<strong>信号槽的连接</strong></p><p><img src="file-20250614124004874.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 连接按钮的 clicked 信号到槽函数</span><br><span class="hljs-built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;MainWindow::on_pushButton_clicked);<br></code></pre></td></tr></table></figure><p>和定义的函数</p><p><img src="file-20250614124050388.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_pushButton_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;信息提示&quot;</span>, <span class="hljs-string">&quot;按钮被点击了！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后点击按钮跳出提示</p><p><img src="file-20250614124442631.png" alt=""></p><h2 id="信号与槽的Connect"><a href="#信号与槽的Connect" class="headerlink" title="信号与槽的Connect"></a>信号与槽的Connect</h2><p>示范代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QPushButton * quitBtn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-string">&quot;关闭窗口&quot;</span>,<span class="hljs-keyword">this</span>);<br><span class="hljs-built_in">connect</span>(quitBtn,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,&amp;MyWidget::close);<br></code></pre></td></tr></table></figure><p>第一句是创建按钮，第二句是关键</p><p><strong>connect函数是建立信号发送者(sender)、信号(signal)、信号接收者(receiver)、槽(slot)四者关系的函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">connect</span>(sender, signal, receiver, slot);<br></code></pre></td></tr></table></figure><ol><li>sender：信号发送者</li><li>signal：信号</li><li>receiver：信号接收者</li><li>slot：接收对象在接收到信号之后所需要调用的函数（槽函数）</li></ol><p>信号和槽可以使用自带的，也可以使用自定义的</p><p>在对应的头文件(此处为mainwindow.h文件)中，对<strong>自定义信号和槽</strong>进行<strong>声明</strong></p><p><img src="file-20250614125130820.png" alt=""></p><p>在逻辑文件(此处为mainwindow.cpp)中，添加<strong>自定义信号和槽</strong>的<strong>逻辑</strong></p><p><img src="file-20250614130035180.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-2-QT入门</title>
    <link href="/2025/06/10/02-2-QT%E5%85%A5%E9%97%A8/"/>
    <url>/2025/06/10/02-2-QT%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN会飞的鱼-blog的文章《QT入门看这一篇就够了——超详细讲解（40000多字详细讲解，涵盖qt大量知识）》^[<a href="https://blog.csdn.net/m0_65635427/article/details/130780280">https://blog.csdn.net/m0_65635427/article/details/130780280</a>]</p><h1 id="一、创建QT项目"><a href="#一、创建QT项目" class="headerlink" title="一、创建QT项目"></a>一、创建QT项目</h1><h2 id="1-1-使用向导创建"><a href="#1-1-使用向导创建" class="headerlink" title="1-1-使用向导创建"></a>1-1-使用向导创建</h2><p>打开Qt Creator界面</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610195544637.png" alt=""></p><p>点击<code>New Project</code>&gt;<code>New</code></p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610195638059.png" alt=""></p><p>或者选择菜单栏中的<code>文件</code>&gt;<code>新建文件或项目</code></p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610195829654.png" alt=""></p><p>或者按下快捷键<code>Ctrl</code>+<code>N</code></p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610195911066.png" alt=""></p><p>选择Qt Widgets Application</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610200210632.png" alt=""></p><h3 id="1-1-1-新建项目时名称和路径的注意点"><a href="#1-1-1-新建项目时名称和路径的注意点" class="headerlink" title="1-1-1-新建项目时名称和路径的注意点"></a>1-1-1-新建项目时名称和路径的注意点</h3><p>填写项目名称和保存路径</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610200324158.png" alt=""></p><p>有两个注意点^<a href="https://blog.csdn.net/maizousidemao/article/details/104152353">[[Qt 教程之开始的开始] —— 创建项目及注意事项_qt build system-CSDN博客</a>]</p><ol><li><p>项目名称不能有空格和中文</p><p> 01 Qt第一天</p><pre><code class="hljs"> [×] 有空格和中文</code></pre><p> 01_Qt_the First Day</p><pre><code class="hljs"> [×] 有空格</code></pre><p> 01_HelloWorld </p><pre><code class="hljs"> [√] </code></pre></li><li><p>路径不能有中文</p><p> /home/vistar/桌面/Qt</p><pre><code class="hljs"> [×]有中文</code></pre><p> /home/vistar/desktop/Qt </p><pre><code class="hljs"> [√]</code></pre></li></ol><h3 id="1-1-2-QT编译方式qmake、CMake和Qbs的区别"><a href="#1-1-2-QT编译方式qmake、CMake和Qbs的区别" class="headerlink" title="1-1-2-QT编译方式qmake、CMake和Qbs的区别"></a>1-1-2-QT编译方式qmake、CMake和Qbs的区别</h3><p>选择一种编译方式</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610201240558.png" alt=""></p><p>三种方式的区别如下：</p><p>可以参考官方文档<a href="https://doc.qt.io/qtcreator/creator-how-to-select-build-system.html">选择构建系统 |Qt Creator 文档</a></p><h4 id="Qbs"><a href="#Qbs" class="headerlink" title="Qbs"></a>Qbs</h4><p>先说Qbs，Qbs被官方废弃，Qbs与Qt Creator 4.9一起一直支持到2019年底，Qt6不支持Qbs</p><h4 id="qmake"><a href="#qmake" class="headerlink" title="qmake"></a>qmake</h4><ul><li>专注于使用Qt的项目</li><li>QtCreator可以轻松生成项目文件(适合初学者)</li><li>由QtCreator支持</li></ul><h4 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h4><ul><li>用于广泛的项目</li><li>支持多种平台和语言</li><li>受多个IDE支持：例如QtCreator，Visual Studio</li><li>生成多个IDE的项目描述</li><li>包含简化Qt使用的命令</li></ul><p>总计来说CMake 很常用，功能也很强大，许多知名的项目都是用它，比如 OpenCV 和 VTK，但它的语法繁杂；qmake 是针对辅助 Qt 开发的，但也可以在非 Qt 项目使用，特点是语法简单明了，但功能也相对简单。^<a href="https://blog.csdn.net/maizousidemao/article/details/104152353">[[Qt 教程之开始的开始] —— 创建项目及注意事项_qt build system-CSDN博客</a>]</p><p><strong>新手直接使用qmake即可</strong></p><h3 id="1-1-3-窗口继承类QWidget、QDialog、QMainWindow-的异同点"><a href="#1-1-3-窗口继承类QWidget、QDialog、QMainWindow-的异同点" class="headerlink" title="1-1-3-窗口继承类QWidget、QDialog、QMainWindow 的异同点"></a>1-1-3-窗口继承类QWidget、QDialog、QMainWindow 的异同点</h3><p>文章主要参考CSDN 一去丶二三里的文章《QWidget、QDialog、QMainWindow 的异同点》^[<a href="https://blog.csdn.net/liang19890820/article/details/50533262">QWidget、QDialog、QMainWindow 的异同点_qdialog qwidget的区别-CSDN博客</a>]</p><p>向导会默认添加一个继承自QMainWindow的类，可以在此修改类的名字和基类。默认的基类有QMainWindow、QWidget以及QDialog三个，我们可以选择QWidget（类似于空窗口），这里我们可以先创建一个不带UI的界面，继续下一步</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610202822575.png" alt=""></p><p>QWidget继承于QObject和QPaintDevice，QDialog和QMainWindow则继承于QWidget，QDialog、QMainWindow两者之间没有直接关系。</p><pre><code class=" mermaid">flowchart LRA[&quot;QWidget&quot;]B[&quot;QObject&quot;]C[&quot;QPaintDevice&quot;]D[&quot;QDialog&quot;]E[&quot;QMainWindow&quot;]B --继承--&gt; AC --继承--&gt; AA --继承--&gt; EA --继承--&gt; D</code></pre><h4 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget"></a>QWidget</h4><p>QWidget类是所有用户界面对象的基类。</p><p>窗口部件是用户界面的一个原子：它从窗口系统接收鼠标、键盘和其它事件，并且将自己的表现形式绘制在屏幕上。每一个窗口部件都是矩形，并且它们按Z轴顺序排列。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分。</p><p>QWidget有很多成员函数，但是它们中的一些有少量的直接功能：例如，QWidget有字体属性，但是自己从来不用。为很多继承它的子类提供了实际的功能，比如QLabel、QPushButton、QCheckBox等等。</p><p>没有父窗体的小部件始终是一个独立的窗口（顶级窗口部件）。非窗口的小部件为子部件，它们在父窗口中显示。Qt中大多数部件主要被用作子部件。例如：可以显示一个按钮作为顶层窗口，但大多数人更喜欢将按钮内置于其它部件，如QDialog。</p><h4 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h4><p>QDialog类是对话框窗口的基类。</p><p>对话框窗口是一个顶级窗体，主要用于短期任务以及和用户进行简要通讯。QDialog可以是模式的也可以是非模式的。QDialog支持扩展性并且可以提供返回值。它们可以有默认按钮。QDialog也可以有一个QSizeGrip在它的右下角，使用setSizeGripEnabled()。</p><p>注意：QDialog（以及其它使用Qt::Dialog类型的widget）使用父窗口部件的方法和Qt中其它类稍微不同。对话框总是顶级窗口部件，但是如果它有一个父对象，它的默认位置就是父对象的中间。它也将和父对象共享工具条条目。</p><h5 id="模式对话框"><a href="#模式对话框" class="headerlink" title="模式对话框"></a>模式对话框</h5><p>阻塞同一应用程序中其它可视窗口输入的对话框。模式对话框有自己的事件循环，用户必须完成这个对话框中的交互操作，并且关闭了它之后才能访问应用程序中的其它任何窗口。模式对话框仅阻止访问与对话相关联的窗口，允许用户继续使用其它窗口中的应用程序。</p><p>显示模态对话框最常见的方法是调用其exec()函数，当用户关闭对话框，exec()将提供一个有用的返回值，并且这时流程控制继续从调用exec()的地方进行。通常情况下，要获得对话框关闭并返回相应的值，我们连接默认按钮，例如：”确定”按钮连接到accept()槽，”取消”按钮连接到reject()槽。另外我们也可以连接done()槽，传递给它Accepted或Rejected。</p><h5 id="非模式对话框"><a href="#非模式对话框" class="headerlink" title="非模式对话框"></a>非模式对话框</h5><p>和同一个程序中其它窗口操作无关的对话框。在文字处理中的查找和替换对话框通常是非模式的，允许用户同时与应用程序的主窗口和对话框进行交互。调用show()来显示非模式对话框，并立即将控制返回给调用者。</p><p>如果隐藏对话框后调用show()函数，对话框将显示在其原始位置，这是因为窗口管理器决定的窗户位置没有明确由程序员指定，为了保持被用户移动的对话框位置，在closeEvent()中进行处理，然后在显示之前，将对话框移动到该位置。</p><h5 id="半模式对话框"><a href="#半模式对话框" class="headerlink" title="半模式对话框"></a>半模式对话框</h5><p>调用setModal(true)或者setWindowModality()，然后show()。有别于exec()，show() 立即返回给控制调用者。</p><p>对于进度对话框来说，调用setModal(true)是非常有用的，用户必须拥有与其交互的能力，例如：取消长时间运行的操作。如果使用show()和setModal(true)共同执行一个长时间操作，则必须定期在执行过程中调用QApplication::processEvents()，以使用户能够与对话框交互（可以参考QProgressDialog）。</p><h4 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h4><p>QMainWindow类提供一个有菜单条、工具栏、状态条的主应用程序窗口。</p><p>一个主窗口提供了构建应用程序的用户界面框架。Qt拥有QMainWindow及其相关类来管理主窗口。</p><p>QMainWindow拥有自己的布局，我们可以使用QMenuBar（菜单栏）、QToolBar（工具栏）、QStatusBar（状态栏）以及QDockWidget（悬浮窗体），布局有一个可由任何种类小窗口所占据的中心区域。</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610205233111.png" alt=""></p><p>语言可以先不选</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610205505684.png" alt=""></p><p>选择编译套件</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610205538437.png" alt=""></p><p>添加版本控制</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610205557801.png" alt=""></p><p>创建成功</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610205718903.png" alt=""></p><h2 id="1-2-一个最简单的Qt应用程序"><a href="#1-2-一个最简单的Qt应用程序" class="headerlink" title="1-2-一个最简单的Qt应用程序"></a>1-2-一个最简单的Qt应用程序</h2><p>生成项目后默认生成的代码</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250610205901149.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    Widget w;<br>    w.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对代码逐句解释"><a href="#对代码逐句解释" class="headerlink" title="对代码逐句解释"></a>对代码逐句解释</h4><h5 id="include-quot-widget-h-quot"><a href="#include-quot-widget-h-quot" class="headerlink" title="#include &quot;widget.h&quot;"></a><code>#include &quot;widget.h&quot;</code></h5><ul><li><p><strong>作用</strong> ：这是一个预处理指令，用于包含名为 <code>widget.h</code> 的头文件。这个头文件中通常定义了一个名为 <code>Widget</code> 的自定义类，该类继承自 <code>QWidget</code> 类（或者其他 Qt 的窗口类），它包含了应用程序主窗口的用户界面元素和相关功能的声明。</p></li><li><p><strong>示例说明</strong> ：在 <code>widget.h</code> 中定义了类 <code>Widget</code> 的成员变量、函数声明等，比如窗口中的按钮、标签等控件的声明以及相应的槽函数声明等，在 <code>main</code> 函数中通过包含这个头文件，就可以使用 <code>Widget</code> 类来创建窗口对象。</p></li></ul><h5 id="widge-h文件"><a href="#widge-h文件" class="headerlink" title="widge.h文件"></a>widge.h文件</h5><p><code>widget.h</code>是下面这个文件</p><p><img src="Blog/source/_posts/02-2-QT入门/file-20250611173250158.png" alt=""></p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIDGET_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br><br>QT_BEGIN_NAMESPACE<br><span class="hljs-keyword">namespace</span> Ui &#123; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>; &#125;<br>QT_END_NAMESPACE<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Widget</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~<span class="hljs-built_in">Widget</span>();<br><br><span class="hljs-keyword">private</span>:<br>    Ui::Widget *ui;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// WIDGET_H</span></span><br></code></pre></td></tr></table></figure><p>这段代码定义一个继承自 <code>QWidget</code> 的 <code>Widget</code> 类</p><h6 id="ifndef-WIDGET-H-和-define-WIDGET-H"><a href="#ifndef-WIDGET-H-和-define-WIDGET-H" class="headerlink" title="#ifndef WIDGET_H 和 #define WIDGET_H"></a><code>#ifndef WIDGET_H</code> 和 <code>#define WIDGET_H</code></h6><ul><li><p><strong>作用</strong> ：这两行代码是预处理器指令，用于防止该头文件被重复包含。当头文件被第一次包含时，<code>#ifndef WIDGET_H</code> 判断宏 <code>WIDGET_H</code> 是否未定义，如果是，则定义该宏（通过 <code>#define WIDGET_H</code>）并编译头文件中的代码。如果该头文件再次被包含，<code>#ifndef WIDGET_H</code> 判断宏 <code>WIDGET_H</code> 已经被定义，就会跳过头文件中后续的代码，避免重复定义类等编译错误。</p></li><li><p><strong>重要性</strong> ：这是 C++ 编程中常见的头文件保护机制，防止在复杂的项目中由于头文件的多次包含而导致的编译问题。</p></li></ul><h6 id="include-lt-QWidget-gt"><a href="#include-lt-QWidget-gt" class="headerlink" title="#include &lt;QWidget&gt;"></a><code>#include &lt;QWidget&gt;</code></h6><ul><li><p><strong>作用</strong> ：包含 Qt 的 <code>QWidget</code> 类的头文件。<code>QWidget</code> 是所有用户界面对象的基类，提供了基本的窗口系统、绘图和事件处理功能。<code>Widget</code> 类继承自 <code>QWidget</code>，因此需要包含这个头文件来使用 <code>QWidget</code> 的功能和属性。</p></li><li><p><strong>关联性</strong> ：<code>Widget</code> 类依赖于 <code>QWidget</code> 类来实现其窗口功能，通过继承可以获得 <code>QWidget</code> 的所有公有成员函数和信号槽机制等特性。</p></li></ul><h6 id="QT-BEGIN-NAMESPACE-和-QT-END-NAMESPACE"><a href="#QT-BEGIN-NAMESPACE-和-QT-END-NAMESPACE" class="headerlink" title="QT_BEGIN_NAMESPACE 和 QT_END_NAMESPACE"></a><code>QT_BEGIN_NAMESPACE</code> 和 <code>QT_END_NAMESPACE</code></h6><ul><li><p><strong>作用</strong> ：这两个宏是 Qt 提供的，用于处理 Qt 的命名空间问题。在不同的编译器和环境下，Qt 的类和函数可能被放置在不同的命名空间中。<code>QT_BEGIN_NAMESPACE</code> 和 <code>QT_END_NAMESPACE</code> 用于包围 Qt 的代码，使得这些代码在不同的命名空间配置下能够正确地被编译和使用。</p></li><li><p><strong>背景</strong> ：Qt 支持将类和函数放在一个命名空间中以避免命名冲突，但默认情况下是不使用命名空间的。这两个宏主要用于在生成文档和处理一些特殊编译器配置时发挥作用，对于普通的应用程序开发来说，通常不需要特别关注它们的具体实现。</p></li></ul><h6 id="namespace-Ui-class-Widget"><a href="#namespace-Ui-class-Widget" class="headerlink" title="namespace Ui { class Widget; }"></a><code>namespace Ui &#123; class Widget; &#125;</code></h6><ul><li><p><strong>作用</strong> ：声明了一个命名空间 <code>Ui</code>，并在该命名空间中声明了一个名为 <code>Widget</code> 的类。这个 <code>Widget</code> 类通常是通过 Qt 的用户界面设计器（Qt Designer）生成的 UI 文件（.ui 文件）对应的类，它包含了窗口的用户界面元素（如按钮、标签、布局等）的声明。</p></li><li><p><strong>关联性</strong> ：在使用 Qt Designer 设计用户界面时，Qt 会自动生成一个与 UI 文件对应的 C++ 头文件（通常在编译过程中生成），其中定义了 <code>Ui::Widget</code> 类，该类包含了一系列的成员变量，用于表示界面中的各个控件。<code>Widget</code> 类通过包含这个自动生成的头文件，并在其实现中使用 <code>Ui::Widget</code> 类来初始化和管理界面元素。</p></li></ul><h6 id="class-Widget-public-QWidget"><a href="#class-Widget-public-QWidget" class="headerlink" title="class Widget : public QWidget"></a><code>class Widget : public QWidget</code></h6><ul><li><p><strong>作用</strong> ：声明了一个名为 <code>Widget</code> 的类，它继承自 <code>QWidget</code> 类。通过继承，<code>Widget</code> 类可以获得 <code>QWidget</code> 的基本功能，并且可以添加自定义的成员变量、成员函数、信号和槽等，以实现特定的应用程序功能。</p></li><li><p><strong>继承的意义</strong> ：继承是面向对象编程的重要特性之一，它允许 <code>Widget</code> 类重用 <code>QWidget</code> 的代码，并且可以根据需要覆盖或扩展基类的行为。例如，<code>Widget</code> 类可以重写 <code>paintEvent</code> 函数来自定义窗口的绘制行为，或者添加新的槽函数来处理自定义的信号。</p></li></ul><h6 id="Q-OBJECT"><a href="#Q-OBJECT" class="headerlink" title="Q_OBJECT"></a><code>Q_OBJECT</code></h6><ul><li><p><strong>作用</strong> ：这是一个非常重要的宏，必须出现在使用 Qt 的信号和槽机制以及元对象系统的类的定义中。<code>Q_OBJECT</code> 宏会指示 Qt 的元对象编译器（moc，Meta - Object Compiler）为该类生成额外的代码，这些代码提供了信号和槽的实现、运行时类型信息、对象名等元数据。</p></li><li><p><strong>关键功能</strong> ：</p><ul><li><p><strong>信号和槽支持</strong> ：使得类可以定义信号（signals）和槽（slots），这是 Qt 的核心组件之间通信机制。例如，当用户点击按钮时，按钮可以发出一个信号，而 <code>Widget</code> 类中的一个槽函数可以连接到这个信号，从而在按钮点击时执行相应的操作。</p></li><li><p><strong>翻译支持</strong> ：支持多语言翻译，可以方便地将应用程序本地化为不同的语言。</p></li><li><p><strong>其他特性</strong> ：还支持定时器事件、自定义事件处理等特性，增强了类的功能和灵活性。</p></li></ul></li></ul><h6 id="公共部分"><a href="#公共部分" class="headerlink" title="公共部分"></a>公共部分</h6><ul><li><p><strong><code>Widget(QWidget *parent = nullptr);</code></strong> ：</p><ul><li><p><strong>作用</strong> ：这是 <code>Widget</code> 类的构造函数声明。它接受一个指向 <code>QWidget</code> 的指针作为参数，该参数表示父窗口部件。在 Qt 中，窗口部件可以有父子关系，父窗口部件负责管理子窗口部件的生命周期和布局等。</p></li><li><p><strong>默认参数</strong> ：<code>nullptr</code> 是 C++ 11 中的 nullptr_t 类型，表示空指针。构造函数的参数 <code>parent</code> 有一个默认值 <code>nullptr</code>，这意味着当创建 <code>Widget</code> 对象时，可以不指定父窗口部件，此时该对象没有父窗口部件。</p></li><li><p><strong>用途</strong> ：构造函数用于初始化 <code>Widget</code> 对象，在创建对象时会调用该函数，并且可以将父窗口部件传递给它，以便建立父子关系。例如，在主函数中创建 <code>Widget</code> 对象时，如果没有指定父窗口部件，那么它可以作为一个独立的窗口存在。</p></li></ul></li><li><p><strong><code>~Widget();</code></strong> ：</p><ul><li><p><strong>作用</strong> ：这是 <code>Widget</code> 类的析构函数声明。析构函数在对象生命周期结束时被调用，用于清理和释放对象所占用的资源，如关闭文件、释放内存等。</p></li><li><p><strong>重要性</strong> ：在 C++ 中，正确地实现析构函数是确保资源管理安全的重要部分。对于 <code>Widget</code> 类来说，析构函数可能会负责清理其内部的子窗口部件、断开信号和槽的连接等操作，以确保程序的稳定运行。</p></li></ul></li></ul><h6 id="私有部分"><a href="#私有部分" class="headerlink" title="私有部分"></a>私有部分</h6><ul><li><p><strong><code>Ui::Widget *ui;</code></strong> ：</p><ul><li><p><strong>作用</strong> ：这是一个指向 <code>Ui::Widget</code> 类型的指针，用于存储通过 Qt Designer 设计的用户界面元素。<code>Ui::Widget</code> 类是在 UI 文件编译时自动生成的，它包含了一系列的成员变量，每个变量对应界面中的一个控件。</p></li><li><p><strong>用途</strong> ：在 <code>Widget</code> 类的实现中，通常会在构造函数中调用 <code>ui - &gt; setupUi(this)</code> 方法来初始化界面元素，将设计好的界面加载到当前窗口中。然后可以通过 <code>ui</code> 指针来访问和操作界面中的各个控件，例如设置控件的文本、连接信号和槽等。</p></li><li><p><strong>生命周期</strong> ：<code>ui</code> 指针在 <code>Widget</code> 对象的构造过程中被分配内存，并在析构过程中释放内存，以确保资源的正确管理。</p></li></ul></li></ul><p>这个头文件定义了一个基本的 <code>Widget</code> 类，用于创建一个继承自 <code>QWidget</code> 的窗口部件，结合了 Qt 的信号和槽机制、元对象系统以及通过 Qt Designer 设计的用户界面，是构建 Qt 应用程序中自定义窗口的基础。</p><h5 id="include-lt-QApplication-gt"><a href="#include-lt-QApplication-gt" class="headerlink" title="#include &lt;QApplication&gt;"></a><code>#include &lt;QApplication&gt;</code></h5><ul><li><p><strong>作用</strong> ：包含 Qt 的 <code>QApplication</code> 类的头文件。<code>QApplication</code> 是 Qt 应用程序的控制中心，它管理着应用程序的控制流和主要设置，每一个基于 Qt 的 GUI 应用程序都必须包含一个 <code>QApplication</code> 对象。</p></li><li><p><strong>关键功能</strong> ：</p><ul><li><p><strong>事件循环管理</strong> ：负责启动和管理事件循环，事件循环是应用程序运行时的核心机制，它不断监听和分发各种事件（如鼠标点击、键盘输入、窗口缩放等）到相应的窗口部件进行处理。</p></li><li><p><strong>资源管理</strong> ：管理应用程序的资源，如字体、图标、翻译文件等，还负责处理应用程序的命令行参数等。</p></li></ul></li></ul><h5 id="int-main-int-argc-char-argv"><a href="#int-main-int-argc-char-argv" class="headerlink" title="int main(int argc, char *argv[])"></a><code>int main(int argc, char *argv[])</code></h5><ul><li><p><strong>作用</strong> ：这是 C++ 程序的入口点函数，每个程序的执行都从 <code>main</code> 函数开始。<code>argc</code> 是命令行参数的个数，<code>argv</code> 是指向命令行参数字符串的指针数组，用于向程序传递启动参数。</p></li><li><p><strong>示例说明</strong> ：比如在命令行中运行程序时，可以通过 <code>argv</code> 传递一些参数来指定程序的初始状态或行为等，程序可以通过解析 <code>argc</code> 和 <code>argv</code> 来获取这些参数并进行相应的处理。</p></li></ul><h5 id="QApplication-a-argc-argv"><a href="#QApplication-a-argc-argv" class="headerlink" title="QApplication a(argc, argv);"></a><code>QApplication a(argc, argv);</code></h5><ul><li><p><strong>作用</strong> ：创建一个 <code>QApplication</code> 对象 <code>a</code>，并将其初始化为命令行参数 <code>argc</code> 和 <code>argv</code>。这个对象是应用程序的核心，它负责初始化应用程序的环境，包括设置应用程序的名称、组织名称等信息，并且为后续的事件循环做好准备。</p></li><li><p><strong>重要性</strong> ：在 Qt 应用程序中，必须且只能有一个 <code>QApplication</code> 对象，它是整个应用程序的基础，所有与应用程序相关的操作（如窗口显示、事件处理等）都离不开这个对象。</p></li></ul><h5 id="Widget-w"><a href="#Widget-w" class="headerlink" title="Widget w;"></a><code>Widget w;</code></h5><ul><li><p><strong>作用</strong> ：创建一个 <code>Widget</code> 类的对象 <code>w</code>，这个对象就是应用程序的主窗口。<code>Widget</code> 类是在 <code>widget.h</code> 中定义的，它继承自 <code>QWidget</code> 类，具有 <code>QWidget</code> 的基本属性和方法，并且可以添加自定义的控件、布局和功能等。</p></li><li><p><strong>示例说明</strong> ：如果在 <code>Widget</code> 类中定义了一个按钮和一个标签，并且为按钮连接了相应的槽函数，那么创建 <code>Widget</code> 对象后，这些控件和功能就会被实例化并准备显示在窗口中。</p></li></ul><h5 id="w-show"><a href="#w-show" class="headerlink" title="w.show();"></a><code>w.show();</code></h5><ul><li><p><strong>作用</strong> ：调用 <code>Widget</code> 对象 <code>w</code> 的 <code>show()</code> 函数，使该窗口在屏幕上显示出来。在 Qt 中，窗口部件（如窗口、控件等）默认是隐藏的，只有通过调用 <code>show()</code> 函数或者类似的显示函数（如 <code>showMaximized()</code> 等），它们才会在屏幕上可见。</p></li><li><p><strong>显示过程</strong> ：<code>show()</code> 函数会触发一系列的绘制和显示操作，包括窗口的创建、布局调整、控件的渲染等，最终将窗口呈现给用户。</p></li></ul><h5 id="return-a-exec"><a href="#return-a-exec" class="headerlink" title="return a.exec();"></a><code>return a.exec();</code></h5><ul><li><p><strong>作用</strong> ：调用 <code>QApplication</code> 对象 <code>a</code> 的 <code>exec()</code> 函数，进入事件循环。事件循环是应用程序运行的关键部分，它会使应用程序处于等待状态，不断地监听和处理各种事件，如用户的输入事件、系统事件等，直到应用程序关闭。</p></li><li><p><strong>返回值</strong> ：<code>exec()</code> 函数会返回一个整数值，通常情况下，当应用程序正常退出时返回 0。这个返回值可以被操作系统的 shell 或其他调用该程序的实体捕获，用于判断程序的执行状态。</p></li></ul><p>这段代码整体上就是一个简单的 Qt Widgets 应用程序的启动流程，它创建了一个应用程序对象和一个主窗口对象，显示主窗口并进入事件循环，等待用户的操作和事件的发生，从而实现应用程序的运行。</p><p><strong>注意点</strong></p><pre><code class="hljs">1.Qt系统提供的类头文件没有.h后缀2.Qt一个类对应一个头文件，类名和头文件名一致3.QApplication应用程序类</code></pre><p>管理图形用户界面应用程序的控制流和主要设置。</p><p>是Qt生命，一个程序要确保一直运行，就肯定至少得有一个循环，这就是Qt主消息循环，在其中完成来自窗口系统和其它资源的所有事件消息处理和调度。它也处理应用程序的初始化和结束，并且提供对话管理。</p><p>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，不论这个应用程序在同一时刻有多少个窗口。</p><ol><li>a.exec()</li></ol><p>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</p>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-Gazebo启动失败无虚拟无人机的解决</title>
    <link href="/2025/05/22/05-Gazebo%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E6%97%A0%E8%99%9A%E6%8B%9F%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/05/22/05-Gazebo%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E6%97%A0%E8%99%9A%E6%8B%9F%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>在虚拟机中启动Gazebo后报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[vehicle_spawn_fang_15423_8266973064116550980-<span class="hljs-number">5</span>] process has died [pid <span class="hljs-number">15501</span>, <span class="hljs-keyword">exit</span> code <span class="hljs-number">1</span>, cmd <span class="hljs-regexp">/opt/</span>ros<span class="hljs-regexp">/noetic/</span>lib<span class="hljs-regexp">/gazebo_ros/</span>spawn_model -sdf -file <span class="hljs-regexp">/home/</span>jetson<span class="hljs-regexp">/catkin_ws/</span>src<span class="hljs-regexp">/tutorials/</span>tutorial_gazebo<span class="hljs-regexp">/models/m</span>agpie360<span class="hljs-regexp">/magpie360.sdf -model iris -x 0 -y 0 -z 0 -R 0 -P 0 -Y 0 __name:=vehicle_spawn_fang_15423_8266973064116550980 __log:=/</span>home<span class="hljs-regexp">/jetson/</span>.ros<span class="hljs-regexp">/log/</span><span class="hljs-number">33</span>e82792-<span class="hljs-number">3706</span>-<span class="hljs-number">11</span>f0-<span class="hljs-number">9</span>d90-e59abc5778f4/vehicle_spawn_fang_15423_8266973064116550980-<span class="hljs-number">5</span>.log].<br>log file: <span class="hljs-regexp">/home/</span>jetson<span class="hljs-regexp">/.ros/</span>log<span class="hljs-regexp">/33e82792-3706-11f0-9d90-e59abc5778f4/</span>vehicle_spawn_fang_15423_8266973064116550980-<span class="hljs-number">5</span>*.log<br><br></code></pre></td></tr></table></figure><p><img src="file-20250522204729650.png" alt=""></p><p>而且在Gazebo中不显示无人机</p><p><img src="file-20250522204804790.png" alt=""></p><p><img src="file-20250522205012465.png" alt=""></p><p><strong>关键在于缺少了模块</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">ModuleNotFoundError:</span> No <span class="hljs-keyword">module</span> named <span class="hljs-comment">&#x27;rospkg&#x27;</span><br></code></pre></td></tr></table></figure><p>最简单的方法是使用 _pip_ 安装 _rospkg_ 模块。尝试使用 pip 安装 rospkg</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> rospkg<br></code></pre></td></tr></table></figure><p><img src="file-20250522205037124.png" alt=""></p><p>但是仍无法启动</p><p>最终发现是因为安装完ROS和Gazebo后安装了Anaconda导致环境和配置出现问题，解决方法有两种</p><h3 id="一、退出BASE环境"><a href="#一、退出BASE环境" class="headerlink" title="一、退出BASE环境"></a>一、退出BASE环境</h3><p>每次运行前先退出conda</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">conda deactivate</span><br></code></pre></td></tr></table></figure><p><img src="file-20250526204828861.png" alt=""></p><h3 id="二、删除Anaconda"><a href="#二、删除Anaconda" class="headerlink" title="二、删除Anaconda"></a>二、删除Anaconda</h3><p>可以参考<a href="06-删除Anaconda.md">06-删除Anaconda</a></p>]]></content>
    
    
    <categories>
      
      <category>无人机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无人机</tag>
      
      <tag>Gazebo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-Cursor帮助部署Github软件</title>
    <link href="/2025/05/12/02-Cursor%E5%B8%AE%E5%8A%A9%E9%83%A8%E7%BD%B2Github%E8%BD%AF%E4%BB%B6/"/>
    <url>/2025/05/12/02-Cursor%E5%B8%AE%E5%8A%A9%E9%83%A8%E7%BD%B2Github%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Cursor安装"><a href="#一、Cursor安装" class="headerlink" title="一、Cursor安装"></a>一、Cursor安装</h1><p>进入Cursor官网下载软件<a href="https://www.cursor.com/cn">Cursor - The AI Code Editor</a></p><p><img src="file-20250512221109173.png" alt=""></p><p>打开exe文件</p><p><img src="file-20250512221145352.png" alt=""></p><p>选择同意协议</p><p><img src="file-20250512221238119.png" alt=""></p><p>选择安装位置</p><p><img src="file-20250512221313152.png" alt=""></p><p>点击下一步</p><p><img src="file-20250512221349670.png" alt=""></p><p>按照需求选择</p><p><img src="file-20250512221413165.png" alt=""></p><p>点击安装</p><p><img src="file-20250512221425691.png" alt=""></p><p><img src="file-20250512221436336.png" alt=""></p><p>安装完成</p><p><img src="file-20250512221522975.png" alt=""></p><h1 id="二、设置Cursor"><a href="#二、设置Cursor" class="headerlink" title="二、设置Cursor"></a>二、设置Cursor</h1><p>打开软件</p><p><img src="file-20250512221552895.png" alt=""></p><p>注册账号后自由选择</p><p><img src="file-20250512221903879.png" alt=""></p><p>内部各项选择按照自己喜好选择即可</p><p><img src="file-20250512222254400.png" alt=""></p><h1 id="三、部署项目"><a href="#三、部署项目" class="headerlink" title="三、部署项目"></a>三、部署项目</h1><p>创建并打开文件夹</p><p><img src="file-20250512222411306.png" alt=""></p><p>找到想要的Github项目</p><p><img src="file-20250512222544670.png" alt=""></p><p>复制web URL</p><p><img src="file-20250512222618114.png" alt=""></p><p>输入提示语</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">为我部署<span class="hljs-variable">@https:</span><span class="hljs-comment">//github.com/NangInShell/VSET.git 的项目</span><br></code></pre></td></tr></table></figure><p><img src="file-20250512222704826.png" alt=""></p><p>最后效果</p><p><img src="file-20250512223349571.png" alt=""></p><h1 id="四、使用VScode尝试"><a href="#四、使用VScode尝试" class="headerlink" title="四、使用VScode尝试"></a>四、使用VScode尝试</h1><p><img src="file-20250512223508336.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cursor</tag>
      
      <tag>GitHub</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-虚拟机的安装</title>
    <link href="/2025/05/12/04-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2025/05/12/04-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一、VMware-Workstation下载和安装"><a href="#一、VMware-Workstation下载和安装" class="headerlink" title="一、VMware Workstation下载和安装"></a>一、VMware Workstation下载和安装</h1><p>进入官网下载安装包<a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion">Fusion and Workstation | VMware</a></p><p><img src="file-20250512155649388.png" alt=""></p><p>安装完成后打开</p><p><img src="file-20250512155849176.png" alt=""></p><h1 id="二、配置仿真环境镜像"><a href="#二、配置仿真环境镜像" class="headerlink" title="二、配置仿真环境镜像"></a>二、配置仿真环境镜像</h1><p><strong>镜像下载：</strong> 仿真环境镜像下载链接：<a href="https://static.simuro.liuyaorobot.com/archive/tutorial2025/">https://static.simuro.liuyaorobot.com/archive/tutorial2025/</a></p><p>PS：这是2025年发布的镜像文件</p><p><strong>在虚拟机中打开镜像文件：</strong></p><p>1）打开VMware Workstation，点击左上角文件，选择新建虚拟机。</p><p><img src="file-20250512160112192.png" alt=""></p><p>2）弹出新建虚拟机向导后，选择自定义（高级），点击下一步。</p><p><img src="file-20250512160206640.png" alt=""></p><p>3）根据需求选择硬件兼容性，一般情况下和 VMWare 的版本相同即可，点击下一步。</p><p><img src="file-20250512160236639.png" alt=""></p><p>4）安装客户机操作系统选择稍后安装操作系统，点击下一步。</p><p><img src="file-20250512160303596.png" alt=""></p><p>5）客户机操作系统选择 Linux，版本选择 Ubuntu 64位，点击下一步。</p><p><img src="file-20250512160320836.png" alt=""></p><p>6）虚拟机命名和位置自定义即可，点击下一步</p><p><img src="file-20250512160429592.png" alt=""></p><p>7）处理器配置数量选择 1，内核数量建议 8 以上（一般为物理机内核数量的一半），点击下一步。</p><p><img src="file-20250512163636362.png" alt=""></p><p>8）虚拟机内存建议 8G 以上（一般为物理机内存的一半），点击下一步。</p><p><img src="file-20250512163810537.png" alt=""></p><p>9）网络类型选择使用网络地址转换（NAT），点击下一步。</p><p><img src="file-20250512163841178.png" alt=""></p><p>10）I/O 控制类型选择 LSI Logic，点击下一步。</p><p><img src="file-20250512163850571.png" alt=""></p><p>11）磁盘类型选择 SCSI，点击下一步。</p><p><img src="file-20250512163905980.png" alt=""></p><p>12）磁盘选择创建新虚拟磁盘，点击下一步。</p><p><img src="file-20250512163922356.png" alt=""></p><p>13）磁盘大小建议 80G 以上，选择将虚拟硬盘存储为单个文件，点击下一步。</p><p><img src="file-20250512164007427.png" alt=""></p><p>14）磁盘文件自定义命名，点击下一步。</p><p><img src="file-20250512164033282.png" alt=""></p><p>15）点击自定义硬件弹出硬件选项，选择新 CD/DVD(SATA)，连接选项改为使用 ISO 映像文件，选择之前下载好的镜像文件，点击关闭。</p><p><img src="file-20250512164107215.png" alt=""></p><p><img src="file-20250512164119896.png" alt=""></p><p><img src="file-20250512164140883.png" alt=""></p><p>16）配置完毕点击完成，之后正常启动虚拟机即可。</p><p><img src="file-20250512164202269.png" alt=""></p><h1 id="三、安装系统"><a href="#三、安装系统" class="headerlink" title="三、安装系统"></a>三、安装系统</h1><p>运行虚拟机</p><p><img src="file-20250512171841019.png" alt=""></p><p><img src="file-20250512182128851.png" alt=""></p><p>进入安装界面</p><p><img src="file-20250512182532975.png" alt=""></p><p>选择语言</p><p><img src="file-20250512182651455.png" alt=""></p><p><strong>注意：如果显示像这样缺少下面的一部分，无法选择确定，可以使用Tab键</strong></p><p><img src="file-20250512182903953.png" alt=""></p><p>选择布局</p><p><img src="file-20250512183055867.png" alt=""></p><p>选择安装的方式</p><p><img src="file-20250512182952709.png" alt=""></p><p>选择清除整个磁盘</p><p><img src="file-20250512183201823.png" alt=""></p><p>选择地区</p><p><img src="file-20250512183236685.png" alt=""></p><blockquote><ol><li>该镜像内置用户<code>jetson</code>，密码为<code>jetson</code>，在安装镜像时请设置任意与<code>jetson</code>不同的用户名，以确保安装的成功进行。 安装成功后，系统内将会有<code>jetson</code>用户，您在安装引导中设置的用户将不生效。</li></ol></blockquote><p><strong>所以此处设置可以随意设置，只要不将用户名设置为jetson即可</strong></p><p><img src="file-20250512183319407.png" alt=""></p><p>开始安装（这个过程相对较慢）</p><p><img src="file-20250512183457097.png" alt=""></p><p>安装完毕，点击重启</p><p><img src="file-20250512185358089.png" alt=""></p><p><img src="file-20250512185419101.png" alt=""></p><p>提示移除ISO文件</p><p><img src="file-20250512185452829.png" alt=""></p><p>右击，点击设置</p><p><img src="file-20250512185517529.png" alt=""></p><p>将CD/DVD连接重新选择到使用物理驱动器</p><p><img src="file-20250512185626753.png" alt=""></p><p>选择否</p><p><img src="file-20250512185724121.png" alt=""></p><p>按下Enter</p><p><img src="file-20250512185745226.png" alt=""></p><p>选择账户<code>jetson</code></p><p><img src="file-20250512185844494.png" alt=""></p><p>输入密码<code>jetson</code>后回车</p><p><img src="file-20250512185914882.png" alt=""></p><p>成功进入</p><p><img src="file-20250512190049038.png" alt=""></p><h1 id="四、配置系统"><a href="#四、配置系统" class="headerlink" title="四、配置系统"></a>四、配置系统</h1><p>文章主要参考CSDN汝嫣兮的文章《Ubuntu 22.04 LTS 入门安装配置&amp;优化、开发软件安装一条龙》^[<a href="https://blog.csdn.net/m0_46700215/article/details/126983849">https://blog.csdn.net/m0_46700215/article/details/126983849</a>]</p><p>首先是登陆Ubuntu的单点登陆账号，这将用于后面的更新和应用商店等操作，没有的话建议注册一个Ubuntu的单点账户进行登陆。</p><p><img src="file-20250512190217302.png" alt=""></p><p>然后是设置Livepatch，这个程序的意义在于可以免重启安装更新，十分建议开启：</p><p><img src="file-20250512191123465.png" alt=""></p><p>决定是否帮助改进：</p><p><img src="file-20250512191306161.png" alt=""></p><p>位置服务</p><p><img src="file-20250512191321390.png" alt=""></p><p>进入桌面</p><p><img src="file-20250512191425531.png" alt=""></p><h2 id="安装vm-tools"><a href="#安装vm-tools" class="headerlink" title="安装vm-tools"></a>安装vm-tools</h2><p>打开一个终端，运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt <span class="hljs-keyword">update</span><br>sudo apt install <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools-desktop<br></code></pre></td></tr></table></figure><p><img src="file-20250512191810503.png" alt=""></p><p><img src="file-20250512192244353.png" alt=""></p><p><img src="file-20250512192301002.png" alt=""></p><p><img src="file-20250512192347856.png" alt=""></p><p>按下y确定</p><p><img src="file-20250512192406181.png" alt=""></p><p><img src="file-20250512192419161.png" alt=""></p><p>安装完成</p><p><img src="file-20250512192452523.png" alt=""></p><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>文章主要参考CSDN Mark_md的文章《linux命令：软件更新 sudo apt-get update 和 sudo apt-get upgrade》^[<a href="https://blog.csdn.net/Mark_md/article/details/107089815">https://blog.csdn.net/Mark_md/article/details/107089815</a>] 和CSDN anjoel的文章《Ubuntu 如何更新软件源(阿里源、华为源、清华源等)》^[<a href="https://blog.csdn.net/anjoel/article/details/124805571">https://blog.csdn.net/anjoel/article/details/124805571</a>]</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update  # 从服务器获取软件列表，并在本地保存为文件。<br>sudo apt-<span class="hljs-built_in">get</span><span class="hljs-built_in"> upgrade </span> # 本地安装软件与本地软件列表对比，如本地安装版本低，会提示更新。<br></code></pre></td></tr></table></figure><p>使用快捷键<code>Ctrl</code>+<code>Alt</code>+<code>t</code>打开终端</p><p><img src="file-20250512193035271.png" alt=""></p><p>输入以下命令备份原有软件源文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> /etc/apt/sources<span class="hljs-meta">.list</span> /etc/apt/sources<span class="hljs-meta">.list</span>.bak_yyyymmdd<br></code></pre></td></tr></table></figure><p><img src="file-20250512193510642.png" alt=""></p><p>如果显示权限不够在前面加上<code>sudo</code></p><p><img src="file-20250512193535780.png" alt=""></p><p>输入以下命令打开sources.list文件并添加新的软件源地址</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">gedit /etc/apt/sources<span class="hljs-meta">.list</span> <span class="hljs-meta">#打开sources.list文件</span><br></code></pre></td></tr></table></figure><p><img src="file-20250512193657742.png" alt=""></p><p><img src="file-20250512193707746.png" alt=""></p><p>如果有Vim，使用Vim也可以</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">vim /etc/apt/sources<span class="hljs-meta">.list</span> <span class="hljs-meta">#打开sources.list文件</span><br></code></pre></td></tr></table></figure><p>如果没有Vim，先安装Vim</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install vim-gtk<br></code></pre></td></tr></table></figure><p>在文件末尾添加新的软件源地址，常用国内源地址如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#阿里源地址</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br><br><span class="hljs-comment">#华为源地址</span><br><br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal main restricted<br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal-updates main restricted<br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal universe<br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal-updates universe<br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal-backports main restricted universe<br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal-security main restricted<br>deb https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/ubuntu/</span> focal-security universe<br><br><span class="hljs-comment">#中科大源地址</span><br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br><br><span class="hljs-comment">#163源地址</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br><br><span class="hljs-comment">#清华源地址</span><br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe ultiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-proposed main restricted universe ultiverse<br></code></pre></td></tr></table></figure><p><img src="file-20250512193830942.png" alt=""></p><p><strong>如果无法修改在命令前面加上sudo</strong></p><p><img src="file-20250512194559825.png" alt=""></p><p>保存后输入命令更新系统软件源地址并更新软件:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> upgrade<br></code></pre></td></tr></table></figure><p><img src="file-20250512194734816.png" alt=""></p><p><img src="file-20250512194931538.png" alt=""></p><p><img src="file-20250512194951121.png" alt=""></p><p><img src="file-20250512195452963.png" alt="安装完毕"></p><h2 id="修改Dock（个人爱好）"><a href="#修改Dock（个人爱好）" class="headerlink" title="修改Dock（个人爱好）"></a>修改Dock（个人爱好）</h2><p>打开设置</p><p><img src="file-20250512202052561.png" alt=""></p><p>在设置里直接设置即可</p><p><img src="file-20250512202212790.png" alt=""></p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>打开官网下载安装包<a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a></p><p><img src="file-20250512203206819.png" alt=""></p><p>在安装目录中打开终端</p><p><img src="file-20250512203143224.png" alt=""></p><p>输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">bash <span class="hljs-string">./</span>文件名<br></code></pre></td></tr></table></figure><p><img src="file-20250512203326205.png" alt=""></p><p>长按<code>Enter</code></p><p><img src="file-20250512203417434.png" alt=""></p><p>输入yes</p><p><img src="file-20250512203439672.png" alt=""></p><p><img src="file-20250512203500419.png" alt=""></p><p>输入yes</p><p><img src="file-20250512203653732.png" alt=""></p><p>测试，发现无conda命令</p><p><img src="file-20250512203808092.png" alt=""></p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="file-20250512203944311.png" alt=""></p><p>将<code>export PATH=$PATH:/home/USERNAME/anaconda3/bin</code>添加到末尾</p><p>注意这里的<code>USERNAME</code>需要切换成自己的用户名</p><p>点击保存</p><p><img src="file-20250512204057509.png" alt=""></p><p>最后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="file-20250512204133664.png" alt=""></p><p>再次测试，成功</p><p><img src="file-20250512205521081.png" alt=""></p><h2 id="Anaconda换源"><a href="#Anaconda换源" class="headerlink" title="Anaconda换源"></a>Anaconda换源</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud/conda-forge<br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/msys2/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/pytorch/</span><br></code></pre></td></tr></table></figure><p><img src="file-20250512205703785.png" alt=""></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>打开终端，依次输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<br><span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><br></code></pre></td></tr></table></figure><p><img src="file-20250512205925889.png" alt=""></p><p>输入<code>ls -A</code>检查home目录下有没有<code>.condarc</code>文件</p><p><img src="file-20250512210111799.png" alt=""></p><p>如果没有文件，那么，执行如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">conda<span class="hljs-built_in"> config </span>--<span class="hljs-built_in">set</span> show_channel_urls <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gedit ~/.condarc<br></code></pre></td></tr></table></figure><p>可以换为阿里源</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - http://mirrors.aliyun.com/anaconda/pkgs/main<br>  - http://mirrors.aliyun.com/anaconda/pkgs/<span class="hljs-attribute">r</span><br><span class="hljs-attribute">  - http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/pkgs/msys2</span><br><span class="hljs-attribute">custom_channels</span>:<br>  <span class="hljs-attribute">conda-forge</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/cloud</span><br>  <span class="hljs-attribute">msys2</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/cloud</span><br>  <span class="hljs-attribute">bioconda</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/cloud</span><br>  <span class="hljs-attribute">menpo</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/cloud</span><br>  <span class="hljs-attribute">pytorch</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/cloud</span><br>  <span class="hljs-attribute">simpleitk</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//mirrors.aliyun.com/anaconda/cloud</span><br></code></pre></td></tr></table></figure><p>或者是清华源</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/<span class="hljs-attribute">r</span><br><span class="hljs-attribute">  - https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="hljs-attribute">custom_channels</span>:<br>  <span class="hljs-attribute">conda-forge</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">msys2</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">bioconda</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">menpo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">pytorch</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">simpleitk</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></code></pre></td></tr></table></figure><p>输入后保存</p><p><img src="file-20250512212446817.png" alt=""></p><p>配置完后如果不生效可清空conda缓存再试试：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">conda clean -<span class="hljs-selector-tag">i</span><br></code></pre></td></tr></table></figure><p><img src="file-20250512212525213.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>无人机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>无人机</tag>
      
      <tag>VMware</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-R语言入门-R和Rstudio安装与使用</title>
    <link href="/2025/05/11/01-R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8-R%E5%92%8CRstudio%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/05/11/01-R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8-R%E5%92%8CRstudio%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、R和Rstudio的下载与安装"><a href="#一、R和Rstudio的下载与安装" class="headerlink" title="一、R和Rstudio的下载与安装"></a>一、R和Rstudio的下载与安装</h1><h2 id="1-R的下载"><a href="#1-R的下载" class="headerlink" title="1-R的下载"></a>1-R的下载</h2><p>点击链接进入官网，选与自己电脑匹配的版本下载<a href="https://cloud.r-project.org/">The Comprehensive R Archive Network</a></p><p><img src="file-20250511231415121.png" alt=""></p><p>点击第一次安装R语言</p><p><img src="file-20250511231448282.png" alt=""></p><p>点击下载安装包</p><p><img src="file-20250511231532412.png" alt=""></p><p>安装完成</p><p><img src="file-20250511231642904.png" alt=""></p><h2 id="2-Rstudio的下载"><a href="#2-Rstudio的下载" class="headerlink" title="2-Rstudio的下载"></a>2-Rstudio的下载</h2><p>点击链接下载<a href="https://posit.co/download/rstudio-desktop/">RStudio Desktop - Posit</a></p><p><img src="file-20250511232126088.png" alt=""></p><p>下载完成</p><p><img src="file-20250511232709763.png" alt=""></p><h1 id="二、安装R和Rstudio"><a href="#二、安装R和Rstudio" class="headerlink" title="二、安装R和Rstudio"></a>二、安装R和Rstudio</h1><p>必须先安装R之后，再安装Rstudio，R是Rstudio的基础，两者都安装在C盘（windows电脑）。在安装过程中，弹出选项为默认，即安装过程中不要做任何更改，鼠标傻瓜式地点点就可以。</p><h2 id="1-安装R"><a href="#1-安装R" class="headerlink" title="1-安装R"></a>1-安装R</h2><p>打开安装包</p><p><img src="file-20250511232907708.png" alt=""></p><p>点击确定</p><p><img src="file-20250511232849197.png" alt=""></p><p>点击下一步</p><p><img src="file-20250511232928495.png" alt=""></p><p>安装到默认位置</p><p><img src="file-20250511232949978.png" alt=""></p><p>点击下一步</p><p><img src="file-20250511233012764.png" alt=""></p><p>下一步</p><p><img src="file-20250511233029918.png" alt=""></p><p>下一步</p><p><img src="file-20250511233136252.png" alt=""></p><p>下一步</p><p><img src="file-20250511233147223.png" alt=""></p><p><img src="file-20250511233156557.png" alt=""></p><p>安装完成</p><p><img src="file-20250511233321095.png" alt=""></p><h2 id="2-安装Rstudio"><a href="#2-安装Rstudio" class="headerlink" title="2-安装Rstudio"></a>2-安装Rstudio</h2><p>打开安装包</p><p><img src="file-20250511234908405.png" alt=""></p><p>下一步</p><p><img src="file-20250511234923594.png" alt=""></p><p>默认位置</p><p><img src="file-20250511234937480.png" alt=""></p><p>安装</p><p><img src="file-20250511235811854.png" alt=""></p><p>安装完成</p><p><img src="file-20250511235953714.png" alt=""></p><p>一般使用Rtudio，很少用R，因为Rtudio为图形界面，比R的功能多。两者的界面如下：</p><p><img src="file-20250512000621526.png" alt="R语言"></p><p><img src="file-20250512000644134.png" alt="RStudio"></p><h1 id="三、Rstudio和R脚本的简单使用"><a href="#三、Rstudio和R脚本的简单使用" class="headerlink" title="三、Rstudio和R脚本的简单使用"></a>三、Rstudio和R脚本的简单使用</h1><h2 id="1-在Rstudio中新建项目Rproject"><a href="#1-在Rstudio中新建项目Rproject" class="headerlink" title="1-在Rstudio中新建项目Rproject"></a>1-在Rstudio中新建项目Rproject</h2><p>依次点击<code>File</code>—-<code>New Project</code>—-<code>NewDirectory</code>—-<code>New Project</code>—-<code>Directory name</code>—- <code>Create Project</code></p><p><img src="file-20250512000816891.png" alt=""></p><p><img src="file-20250512000835523.png" alt=""></p><p><img src="file-20250512000844204.png" alt=""></p><p><img src="file-20250512000937806.png" alt=""></p><p><img src="file-20250512000950799.png" alt=""></p><h2 id="2-创建脚本"><a href="#2-创建脚本" class="headerlink" title="2-创建脚本"></a>2-创建脚本</h2><p>脚本：存放代码的文件，代码是和R语言交流且符合一定的规则。</p><p>依次点击<code>File</code>&gt;<code>New File</code>&gt;<code>R Script</code>或者使用快捷键<code>Ctrl</code>+<code>Shift</code>+<code>N</code></p><p><img src="file-20250512001327450.png" alt=""></p><p>创建完成</p><p><img src="file-20250512001529981.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>R语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R语言</tag>
      
      <tag>R</tag>
      
      <tag>Rstudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20250510博客更新</title>
    <link href="/2025/05/10/20250510%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/"/>
    <url>/2025/05/10/20250510%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="文章在首页的封面图"><a href="#文章在首页的封面图" class="headerlink" title="文章在首页的封面图"></a>文章在首页的封面图</h3><p>对于单篇文章，在文章开头 front-matter 中配置<code>index_img</code>属性能够单独设置文章在首页的显示图片</p><p>效果如图</p><p><img src="file-20250510141930284.png" alt=""></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>/img/example.jpg 对应的是存放在 /source/img/example.jpg 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>![[20250510-1-Cover.jpg]]</p><h3 id="文章页顶部大图"><a href="#文章页顶部大图" class="headerlink" title="文章页顶部大图"></a>文章页顶部大图</h3><p>对于单篇文章，在文章开头 front-matter 中配置<code>banner_img</code>属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>![[20250510-2-Cover.jpg]]</p><p>效果如图</p><p><img src="file-20250510143045149.png" alt=""></p><h1 id="B站视频嵌入"><a href="#B站视频嵌入" class="headerlink" title="B站视频嵌入"></a>B站视频嵌入</h1><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=114482537828033&bvid=BV1EFVZz1Ekr&cid=29886842614&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>01-C Sharp应用程序界面开发</title>
    <link href="/2025/05/10/01-C%20Sharp%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <url>/2025/05/10/01-C%20Sharp%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN DXB2021的文章《C#应用程序界面开发基础——窗体控制（1）——Form窗体（删除事件部分，没看懂）》^[<a href="https://blog.csdn.net/DXB2021/article/details/125558570">https://blog.csdn.net/DXB2021/article/details/125558570</a>]</p><h1 id="项目的创建"><a href="#项目的创建" class="headerlink" title="项目的创建"></a>项目的创建</h1><p>打开Visual Studio（以Visual Studio 2022为例）</p><p><img src="file-20250510104246043.png" alt=""></p><p>依次点击<code>文件</code>&gt;<code>新建</code>&gt;<code>项目</code></p><p>使用快捷键<code>Ctrl</code>+<code>Shift</code>+<code>N</code>可以快速地打开“新建项目”对话框</p><p><img src="file-20250510104346189.png" alt=""></p><p><img src="file-20250510104548248.png" alt=""></p><p>在拉下菜单中选择<code>C#</code>、<code>Windows</code>、<code>桌面</code>中，在列表框选择<code>Windows窗体应用（.NET Framework）</code>，点击<code>下一步</code>。</p><p><img src="file-20250510105214683.png" alt=""></p><p>PS：VS下的<code>Windows 窗体应用(.NET Framework)</code>与<code>Windows 窗体应用</code>之间的区别可以参考下面的网站</p><ol><li><a href="https://blog.csdn.net/qq_45040187/article/details/137717793">VS下的 Windows 窗体应用(.NET Framework) 与 Windows 窗体应用之间的区别_vs 窗体应用和窗体应用库选哪个-CSDN博客</a></li><li><a href="https://www.zhihu.com/question/451320245">(求教windows窗体应用和windows窗体应用(.net framework)的区别? - 知乎</a></li></ol><p>设置完毕后点击<code>创建</code>。</p><p><img src="file-20250510105340463.png" alt=""></p><p>进入界面</p><p><img src="file-20250510105458898.png" alt=""></p><h1 id="窗体初始代码"><a href="#窗体初始代码" class="headerlink" title="窗体初始代码"></a>窗体初始代码</h1><p>在解决方案资源管理器，双击Program.cs文件，会跳转到Windows控制台应用界面，在“编辑”窗口中是一段自动生成的WinForm程序。</p><p><img src="file-20250510105547505.png" alt=""></p><p>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">WindowsFormsApp1</span><br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 应用程序的主入口点。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        [<span class="hljs-meta">STAThread</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>        &#123;<br>            Application.EnableVisualStyles();<br>            Application.SetCompatibleTextRenderingDefault(<span class="hljs-literal">false</span>);<br>            Application.Run(<span class="hljs-keyword">new</span> Form1());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再单击“启动”按键，会弹出一个空白的窗体。</p><p><img src="file-20250510105656278.png" alt=""></p><p>右击“窗体”后，选择“查看代码”命令，就会跳转到Form1.cs文件</p><p><img src="file-20250510105811703.png" alt=""></p><p><img src="file-20250510105842834.png" alt=""></p><p>代码如下： </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.ComponentModel;<br><span class="hljs-keyword">using</span> System.Data;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">WindowsFormsApp1</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Form1</span> : <span class="hljs-title">Form</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Form1</span>()</span><br>        &#123;<br>            InitializeComponent();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="窗体的添加与删除"><a href="#窗体的添加与删除" class="headerlink" title="窗体的添加与删除"></a>窗体的添加与删除</h1><h2 id="添加窗体"><a href="#添加窗体" class="headerlink" title="添加窗体"></a>添加窗体</h2><p>右击项目名称WindowsFormsApp1，在弹出的快捷菜单中选择“添加”-“Windows窗体”或者“添加”-“新建项”命令</p><p><img src="file-20250510110048814.png" alt=""></p><p><img src="file-20250510110104317.png" alt=""></p><p>最后在“添加新项”框中选择“窗体（Windows窗体）”</p><p><img src="file-20250510110138688.png" alt=""></p><p>添加窗体成功</p><p><img src="file-20250510110214969.png" alt=""></p><h2 id="删除窗体"><a href="#删除窗体" class="headerlink" title="删除窗体"></a>删除窗体</h2><p>删除窗体，只需要在解决方案管理器中，选中要删除的窗体名称，右击，在弹出的快捷菜单选择“删除”命令即可</p><p><img src="file-20250510110309636.png" alt=""></p><h1 id="窗体的属性"><a href="#窗体的属性" class="headerlink" title="窗体的属性"></a>窗体的属性</h1><h2 id="1-“属性”面板"><a href="#1-“属性”面板" class="headerlink" title="1-“属性”面板"></a>1-“属性”面板</h2><p>打开“属性”面板有三种方法：</p><h3 id="01-右键命令"><a href="#01-右键命令" class="headerlink" title="01-右键命令"></a>01-右键命令</h3><p><img src="file-20250510110537190.png" alt=""></p><h3 id="02-“视图”命令"><a href="#02-“视图”命令" class="headerlink" title="02-“视图”命令"></a>02-“视图”命令</h3><p>依次点击<code>视图</code>&gt;<code>属性窗口</code></p><p><img src="file-20250510110623693.png" alt=""></p><h3 id="03-快捷键"><a href="#03-快捷键" class="headerlink" title="03-快捷键"></a>03-快捷键</h3><p>同时按下<code>Alt</code>+<code>Enter</code></p><p><img src="file-20250510110743416.png" alt=""></p><h2 id="2-C-WinForm窗体基础属性"><a href="#2-C-WinForm窗体基础属性" class="headerlink" title="2-C# WinForm窗体基础属性"></a>2-C# WinForm窗体基础属性</h2><h3 id="01-窗口样式中的属性值"><a href="#01-窗口样式中的属性值" class="headerlink" title="01-窗口样式中的属性值"></a>01-窗口样式中的属性值</h3><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Icon</td><td style="text-align:center">更改图标样式（左上角图标）</td></tr><tr><td style="text-align:center">MaximizeBox:true;</td><td style="text-align:center">显示右上角最大化按钮</td></tr><tr><td style="text-align:center">MinimizeBox:true;</td><td style="text-align:center">显示右上角最小化按钮</td></tr><tr><td style="text-align:center">ShowInco:true;</td><td style="text-align:center">显示左上角小图标</td></tr><tr><td style="text-align:center">ShowInTaskbar:ture;</td><td style="text-align:center">窗体显示在任务栏</td></tr><tr><td style="text-align:center">TopMost:ture;</td><td style="text-align:center">窗口置顶显示</td></tr><tr><td style="text-align:center">Opacity:100%</td><td style="text-align:center">整个窗口透明度</td></tr></tbody></table></div><h3 id="02-布局中的属性值"><a href="#02-布局中的属性值" class="headerlink" title="02-布局中的属性值"></a>02-布局中的属性值</h3><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">AutoScroll:true/false;</td><td style="text-align:center">如果控件超出窗口是否自动显示滚动条</td></tr><tr><td style="text-align:center">AutoSize:true/false;</td><td style="text-align:center">窗口的范围是否会超出控件的大小</td></tr><tr><td style="text-align:center">MaximumSize:0,0;</td><td style="text-align:center">窗口可以拖曳的最大的大小</td></tr><tr><td style="text-align:center">MinimumSize:0,0;</td><td style="text-align:center">窗口可以拖曳的最小的大小</td></tr><tr><td style="text-align:center">Size:300,300;</td><td style="text-align:center">窗口打开时默认的大小</td></tr><tr><td style="text-align:center">StartPosition:centerScreen;</td><td style="text-align:center">窗口打开时默认桌面位置，居中</td></tr><tr><td style="text-align:center">WindowState:Maximized;</td><td style="text-align:center">默认打开窗口最大化</td></tr></tbody></table></div><h3 id="03-外观的属性值"><a href="#03-外观的属性值" class="headerlink" title="03-外观的属性值"></a>03-外观的属性值</h3><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Font:宋体,9pt；</td><td style="text-align:center">可以修改字体大小，字体越大控件越大</td></tr><tr><td style="text-align:center">Text；</td><td style="text-align:center">输入文本</td></tr><tr><td style="text-align:center">TextAlign；</td><td style="text-align:center">文字位置</td></tr><tr><td style="text-align:center">FormBorderStyle:FixedSingle；</td><td style="text-align:center">窗口不可拖曳大小</td></tr><tr><td style="text-align:center">FormBorderStyle:None;</td><td style="text-align:center">隐藏窗口的边框</td></tr><tr><td style="text-align:center">DropDownStyle:DropDownList；</td><td style="text-align:center">窗让下拉框无法输入文本</td></tr></tbody></table></div><h2 id="3-设置窗体属性"><a href="#3-设置窗体属性" class="headerlink" title="3-设置窗体属性"></a>3-设置窗体属性</h2><p>窗体的图标是系统默认的图标</p><p><img src="file-20250510111641284.png" alt=""></p><p>更改图标，在“属性”面板中，选择Icon性格</p><p><img src="file-20250510111711089.png" alt=""></p><p>窗体的颜色和背景，通过BackgroundImage属性进行设置。选择“属性”面板中的BackgroundImage属性。</p><p><img src="file-20250510111748897.png" alt=""></p><h1 id="窗体的常用事件"><a href="#窗体的常用事件" class="headerlink" title="窗体的常用事件"></a>窗体的常用事件</h1><p>所谓事件，就是指要发生的事情，可以简单地理解为用户的操作，它是由对象引发的。窗体的所有事件，都可以在“属性”面板中进行查看。</p><h2 id="01-添加事件"><a href="#01-添加事件" class="headerlink" title="01-添加事件"></a>01-添加事件</h2><p>为窗体添加一件事件，只要在事件面板里选择要添加的事件</p><p><img src="file-20250510111920303.png" alt=""></p><p>以Load为例，在Load后面的空格里双击，相应的事件将会自动生成。</p><p><img src="file-20250510112038593.png" alt=""></p><p><img src="file-20250510111939732.png" alt=""></p><p>运行</p><p><img src="file-20250510112128383.png" alt=""></p><h2 id="02-删除事件"><a href="#02-删除事件" class="headerlink" title="02-删除事件"></a>02-删除事件</h2><p>直接删除对应的代码即可</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Form1_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>MessageBox.Show(<span class="hljs-string">&quot;窗体加载完成&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="file-20250510112323826.png" alt=""></p><h2 id="03-窗体的显示与隐藏"><a href="#03-窗体的显示与隐藏" class="headerlink" title="03-窗体的显示与隐藏"></a>03-窗体的显示与隐藏</h2><p>窗体标识符<code>.Show()</code></p><p>窗体标识符<code>.Hide()</code></p>]]></content>
    
    
    <categories>
      
      <category>C Sharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>UI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-VSCode使用Ctrl+滚轮实现代码编辑的放大和缩小</title>
    <link href="/2025/05/05/01-VSCode%E4%BD%BF%E7%94%A8Ctrl+%E6%BB%9A%E8%BD%AE%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E7%9A%84%E6%94%BE%E5%A4%A7%E5%92%8C%E7%BC%A9%E5%B0%8F/"/>
    <url>/2025/05/05/01-VSCode%E4%BD%BF%E7%94%A8Ctrl+%E6%BB%9A%E8%BD%AE%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E7%9A%84%E6%94%BE%E5%A4%A7%E5%92%8C%E7%BC%A9%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN从入门到躺下的文章《VScode使用Ctrl+滚轮实现代码编辑的放大和缩小》^[<a href="https://blog.csdn.net/qq_45078197">https://blog.csdn.net/qq_45078197</a>]</p><p>打开VSCode，点击左下角的设置。</p><p><img src="file-20250505092053081.png" alt=""></p><p>点击设置</p><p><img src="file-20250505092131571.png" alt=""></p><p>在搜素框输入“zoom”</p><p><img src="file-20250505092519695.png" alt=""></p><p>勾上文本编辑选项</p><p><img src="file-20250505092552477.png" alt=""></p><p>即可实现代码编辑的放大和缩小</p>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>技巧</tag>
      
      <tag>设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-自动控制方法</title>
    <link href="/2025/05/05/05-%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/"/>
    <url>/2025/05/05/05-%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、自动控制原理"><a href="#一、自动控制原理" class="headerlink" title="一、自动控制原理"></a>一、自动控制原理</h1><h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1-基础概念"></a>1-基础概念</h2><h3 id="开环控制"><a href="#开环控制" class="headerlink" title="开环控制"></a>开环控制</h3><p>开环控制是一种不依赖反馈的控制策略。</p><p>在开环控制中，控制系统根据预设的输入指令(如设定的飞行模式、航点等)执行动作，而不考虑实际飞行状态的变化。也就是说，控制系统不会实时监测飞行器的响应来调整控制输入。简单来说，开环控制就是单纯按照事先编程好的指令运行而不做实时调整。</p><pre><code class=" mermaid">flowchart LRA[&quot;控制器&quot;]B[&quot;执行机构&quot;]C[&quot;被控对象&quot;]D[&quot; &quot;]E[&quot; &quot;]E--给定值--&gt; A --&gt; B  --&gt; C --被控量--&gt; D</code></pre><ul><li>优点：实现简单、成本低，适用于稳定环境中。</li><li><p>缺点：无法适应环境变化，外部扰动(如风速变化)或控制器参数不准确时，会导致飞行不稳定或任务失败。</p></li><li><p>应用:</p><ol><li>简单任务：如短距离飞行、飞行模式切换等，在环境变化较小且预定条件较为稳定的情况下可以使用开环控制。</li><li>飞行器的起飞或定点悬停：在某些简单情况下，飞行器的飞行控制可以通过开环控制来实现，比如飞行器从地面起飞、进行短暂的定点悬停。</li></ol></li></ul><h3 id="开环控制实例（vel-control-node）"><a href="#开环控制实例（vel-control-node）" class="headerlink" title="开环控制实例（vel_control_node）"></a>开环控制实例（vel_control_node）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">if</span> (ros::Time::<span class="hljs-built_in">now</span>() - last srv request &gt; ros::<span class="hljs-built_in">Duration</span>(<span class="hljs-number">1.0</span>))&#123;<br>mavros_msgs::SetMode offb_set_mode;<br>offb_set_mode.request.custom_mode = <span class="hljs-string">&quot;OFFBOARD&quot;</span>;<br><span class="hljs-keyword">if</span> (set mode client,<span class="hljs-built_in">call</span>(offb set mode) &amp;&amp; offb_set_mode.response.mode_sent) &#123;<br><span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;offboard enabled&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">ROS_WARN</span>(<span class="hljs-string">&quot;Failed to enable offboard&quot;</span>);<br>&#125;<br>last_srv_request = ros::Time::<span class="hljs-built_in">now</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p> 这段代码在状态机的<code>case 0</code>状态下，发送了一个命令将飞行模式切换到<code>OFFBOARD</code>。此时并没有任何反馈来调整模式，只是按照时间间隔固定发送命令。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">if</span> (ros::Time::<span class="hljs-built_in">now</span>() - last_srv_request &gt; ros::<span class="hljs-built_in">Duration</span>(<span class="hljs-number">1.0</span>))&#123;<br>mavros_msgs::CommandBool arm_cmd;<br>arm_cmd.request.value = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (arming_client.<span class="hljs-built_in">call</span>(arm_cmd) &amp;&amp; arm_cmd.response.success)&#123;<br><span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;Vehicle armed&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">ROS_WARN</span>(<span class="hljs-string">&quot;Failed to arm vehicle&quot;</span>);<br>last_srv_request = ros::Time::<span class="hljs-built_in">now</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码在<code>case1</code>状态下，用于控制飞行器的<code>arming</code>操作。这也是基于时间的控制，直接发送命令启用<code>arming</code>，没有依赖于飞行器的状态来调整控制策略。</p><h3 id="闭环控制"><a href="#闭环控制" class="headerlink" title="闭环控制"></a>闭环控制</h3><p>闭环控制是一种依赖反馈的控制策略。它通过实时监测飞行器的状态(如姿态、位置、速度等)与设定目标进行比较，根据偏差(误差)来调整控制输入，从而实现对飞行器的精确控制。闭环控制系统在飞行中持续进行实时反馈与修正，以确保飞行器能够按照预期轨迹飞行，尽可能减少外部干扰带来的影响。</p><pre><code class=" mermaid">flowchart LRA[&quot;电位器（比较器）&quot;]B[&quot;放大器&quot;]C[&quot;电动机&quot;]D[&quot;减速器&quot;]E[&quot; &quot;]F[&quot; &quot;]E --&gt; A --&gt; B  --&gt; C --&gt; D --&gt; F --&gt; A</code></pre><ul><li>优点：能够自动调整和修正飞行中的误差，确保飞行稳定，适应复杂和动态的飞行环境。</li><li><p>缺点：实现较为复杂，需要更多的计算资源和传感器输入，系统成本较高。</p></li><li><p>应用:</p><ol><li>航点飞行：无人机按照设定的航点飞行，闭环控制帮助无人机根据实际飞行偏差（如位置误差）进行修正，确保飞行路线准确。</li><li>姿态控制：闭环控制能够根据姿态传感器（如陀螺仪、加速度计）的数据来实时调整飞行器的俯仰、滚转和偏航角度。</li><li>自动避障：利用激光雷达、视觉传感器等反馈信息进行避障，确保无人机避免撞击障碍物。</li></ol></li></ul><h3 id="闭环控制实例（vel-control-node）"><a href="#闭环控制实例（vel-control-node）" class="headerlink" title="闭环控制实例（vel_control_node）"></a>闭环控制实例（vel_control_node）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">if</span> (current_pose.pose.position.z &gt; <span class="hljs-number">1.0</span>) &#123;<br>fsm_state = <span class="hljs-number">3</span>;  <span class="hljs-comment">// goto move state</span><br>last_srv_request = ros::Time::<span class="hljs-built_in">now</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>twist.twist.linear.z = <span class="hljs-number">0.4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一部分代码监控无人机的高度<code>currentpose.pose.position.z</code>，并根据反馈的高度决定是否进入下一个状态。虽然此处只是一个简单的判断逻辑，但它仍然依赖于飞行器的反馈数据（高度）来决定是否继续加速升高或者切换状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">getLengthBetweenPoints</span>(hover_target, current_pose.pose.position) &gt; <span class="hljs-number">0.3</span>) &#123;<br>last_srv_request = ros::Time::<span class="hljs-built_in">now</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (ros::Time::<span class="hljs-built_in">now</span>() - last_srv_request &gt; ros::<span class="hljs-built_in">Duration</span>(<span class="hljs-number">3.0</span>)) &#123;<br>fsm_state = <span class="hljs-number">4</span>;  <span class="hljs-comment">// goto land state</span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// PID control</span><br>twist.twist = <span class="hljs-built_in">get_pid_vel</span>(hover_target);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>case 3</code>中，无人机通过计算当前位置与目标位置<code>hover target</code>之间的距离，并根据该反馈信息决定是否继续进行PID控制。这是典型的闭环控制，因为控制输入<code>twist.twist</code>是根据当前位置和目标位置之间的误差来动态调整的。<code>get_pid_vel(hover target)</code>是一个利用 PID 控制算法调整无人机速度的函数。</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-Git进行代码托管</title>
    <link href="/2025/05/04/04-Git%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/"/>
    <url>/2025/05/04/04-Git%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>对于无人机代码的同步和多人协作，可以考虑通过分布式版本控制系统Git。</p><h1 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h1><h2 id="1-Git的安装"><a href="#1-Git的安装" class="headerlink" title="1-Git的安装"></a>1-Git的安装</h2><p>在Ubuntu的桌面打开一个终端，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install git<br></code></pre></td></tr></table></figure><p>安装完成后，你可以验证 Git 是否安装成功，并查看其版本。运行以下命令：</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504184327092.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504184413808.png" alt=""></p><p>安装完成后，你可以验证 Git 是否安装成功，并查看其版本。运行以下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504184504791.png" alt=""></p><p>显示版本时，表示已成功安装</p><h2 id="2-Gitee的注册与配置"><a href="#2-Gitee的注册与配置" class="headerlink" title="2-Gitee的注册与配置"></a>2-Gitee的注册与配置</h2><h3 id="Gitee的注册"><a href="#Gitee的注册" class="headerlink" title="Gitee的注册"></a>Gitee的注册</h3><p>登录Gitee官网<a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></p><blockquote><p><a href="https://gitee.com/">https://gitee.com/</a></p></blockquote><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504184827414.png" alt=""></p><p>注册登录Gitee账号，进入账号设置</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185345442.png" alt=""></p><p>点击邮箱管理，并设置邮箱</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185454997.png" alt=""></p><p>新建一个Git仓库</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185608556.png" alt=""></p><p>为保护代码安全，建议保持仓库状态为<strong>私有</strong>。</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185639862.png" alt=""></p><p>创建完成</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185736031.png" alt=""></p><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>我们可以在本机一次性配置 SSH 以后免密登录，SSH 密钥组成和作用如下： <strong>作用：</strong> 实现本地仓库和 gitee 平台之间免登录的加密数据传输 <strong>组成：</strong> id_rsa (私钥文件，存放于客户端的电脑中即可)、id_rsa.pub (公钥文件，需要配置到 gitee 平台中)</p><blockquote><p>私钥加密的信息，只能通过公钥解密。公钥加密的信息，只能通过私钥解密。安全性高！</p></blockquote><p>SSH 密钥创建与使用步骤：</p><ol><li>在本机生成一个密钥 ，打开一个终端，输入以下命令：</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh-keygen -t rsa -C <span class="hljs-string">&quot;example<span class="hljs-variable">@example</span>.com&quot;</span> <span class="hljs-comment">#你的邮箱 </span><br></code></pre></td></tr></table></figure><ol><li>连续敲击三次回车，即可在根目录 .ssh 文件夹下生成 id_rsa 和 id_rsa.pub 两个文件。</li></ol><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504190608174.png" alt=""></p><ol><li>使用记事本打开 id_rsa.pub 文件，如果是 Ubuntu 则进入.ssh目录下输入以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504191336098.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504191401533.png" alt=""></p><ol><li>复制输出的公钥，打开 Gitee → 个人设置 → 安全设置 → SSH 公钥，将公钥粘贴到这里，点击确定即配置完成。</li></ol><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504191510918.png" alt=""></p><h3 id="Git的配置"><a href="#Git的配置" class="headerlink" title="Git的配置"></a>Git的配置</h3><p>安装 Git 后，你还需要配置你的用户名和电子邮件地址。执行以下命令来配置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504191814771.png" alt=""></p><p>你可以通过以下命令查看 Git 的配置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>配置完成如下图：</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504191844652.png" alt=""></p><h2 id="3-将本地代码推送至远程git仓库"><a href="#3-将本地代码推送至远程git仓库" class="headerlink" title="3-将本地代码推送至远程git仓库"></a>3-将本地代码推送至远程git仓库</h2><h3 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h3><p>可以参考gitee给出的参考方法</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192431002.png" alt=""></p><p>你可以利用以下命令创建一个本地仓库（相当于开发环境），并将其推送至远程仓库中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建本地example目录</span><br><span class="hljs-built_in">mkdir</span> example  <br><br><span class="hljs-comment">#进入到example目录中</span><br><span class="hljs-built_in">cd</span> example  <br><br><span class="hljs-comment">#将当前目录初始化为一个Git仓库</span><br>git init  <br><br><span class="hljs-comment">#创建README.md</span><br><span class="hljs-built_in">touch</span> README.md  <br><br><span class="hljs-comment">#将README.md添加到Git的暂存区</span><br>git add README.md  <br><br><span class="hljs-comment">#将暂存区的更改提交到本地仓库，并附上&quot;first commit&quot;的提交信息</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span>  <br><br><span class="hljs-comment">#将远程仓库添加到本地Git仓库中，并指定该远程仓库的名称为origin</span><br>git remote add origin git@gitee.com:patfang/tutorial-demonstration.git <br><br><span class="hljs-comment">#将本地master分支的内容推送到远程仓库origin上的master分支</span><br>git push -u origin <span class="hljs-string">&quot;master&quot;</span><br></code></pre></td></tr></table></figure><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192108493.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192136144.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192152413.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192333666.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192540799.png" alt=""></p><p><strong>-u 选项会将本地分支与远程分支关联起来，以后你可以直接使用 git push和 git pull，无需每次指定远程仓库和分支名称。</strong></p><h3 id="克隆远程仓库代码"><a href="#克隆远程仓库代码" class="headerlink" title="克隆远程仓库代码"></a>克隆远程仓库代码</h3><p>在板载计算机（相当于生产环境）的合适目录下打开一个终端，输入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitee.com:patfang/tutorial-demonstration.git<br></code></pre></td></tr></table></figure><p>即可将远程仓库中的代码下载到板载计算机中，随后完成相应部署编译即可。</p><h1 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h1><h2 id="1-Git的安装-1"><a href="#1-Git的安装-1" class="headerlink" title="1-Git的安装"></a>1-Git的安装</h2><p>进入Git官网<a href="https://git-scm.com/">Git</a></p><blockquote><p><a href="https://git-scm.com/">https://git-scm.com/</a></p></blockquote><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504193031483.png" alt=""></p><p>下载Git后安装，一直下一步即可</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194423671.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194447359.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194530890.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194546903.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194607368.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194621703.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194638874.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194652628.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194702332.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194713187.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194725707.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194734687.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194745525.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194755498.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194832156.png" alt=""></p><p>安装完成</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504194944388.png" alt=""></p><p>通过鼠标右键或者桌面图标进入git命令行</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504195026541.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504195130206.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504195113708.png" alt=""></p><h2 id="2-Gitee的注册与配置-1"><a href="#2-Gitee的注册与配置-1" class="headerlink" title="2-Gitee的注册与配置"></a>2-Gitee的注册与配置</h2><p><strong>步骤与Linux系统相同</strong>，已经看过Linux部分的可以跳过。</p><h3 id="Gitee的注册-1"><a href="#Gitee的注册-1" class="headerlink" title="Gitee的注册"></a>Gitee的注册</h3><p>登录Gitee官网<a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></p><blockquote><p><a href="https://gitee.com/">https://gitee.com/</a></p></blockquote><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504184827414.png" alt=""></p><p>注册登录Gitee账号，进入账号设置</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185345442.png" alt=""></p><p>点击邮箱管理，并设置邮箱</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185454997.png" alt=""></p><p>新建一个Git仓库</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185608556.png" alt=""></p><p>为保护代码安全，建议保持仓库状态为<strong>私有</strong>。</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185639862.png" alt=""></p><p>创建完成</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504185736031.png" alt=""></p><h3 id="SSH配置-1"><a href="#SSH配置-1" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>我们可以在本机一次性配置 SSH 以后免密登录，SSH 密钥组成和作用如下： <strong>作用：</strong> 实现本地仓库和 gitee 平台之间免登录的加密数据传输 <strong>组成：</strong> id_rsa (私钥文件，存放于客户端的电脑中即可)、id_rsa.pub (公钥文件，需要配置到 gitee 平台中)</p><blockquote><p>私钥加密的信息，只能通过公钥解密。公钥加密的信息，只能通过私钥解密。安全性高！</p></blockquote><p>SSH 密钥创建与使用步骤：</p><ol><li>在本机生成一个密钥 ，打开一个终端，输入以下命令，三次回车可在目录下生成 id_rsa 文件。</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh-keygen -t rsa -C <span class="hljs-string">&quot;example<span class="hljs-variable">@example</span>.com&quot;</span> <span class="hljs-comment">#你的邮箱 </span><br></code></pre></td></tr></table></figure><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504195541992.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200128622.png" alt=""></p><ol><li>打开C盘用户文件夹下用户名文件夹，使用记事本打开 id_rsa.pub 文件</li></ol><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504195906049.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504195924245.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200207695.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200232896.png" alt=""></p><ol><li>复制输出的公钥，打开 Gitee → 个人设置 → 安全设置 → SSH 公钥，将公钥粘贴到这里，点击确定即配置完成。</li></ol><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504191510918.png" alt=""></p><h3 id="Git的配置-1"><a href="#Git的配置-1" class="headerlink" title="Git的配置"></a>Git的配置</h3><p>安装 Git 后，你还需要配置你的用户名和电子邮件地址。执行以下命令来配置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200458108.png" alt=""></p><p>你可以通过以下命令查看 Git 的配置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>配置完成如下图：</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200518066.png" alt=""></p><h2 id="3-将本地代码推送至远程git仓库-1"><a href="#3-将本地代码推送至远程git仓库-1" class="headerlink" title="3-将本地代码推送至远程git仓库"></a>3-将本地代码推送至远程git仓库</h2><h3 id="推送代码-1"><a href="#推送代码-1" class="headerlink" title="推送代码"></a>推送代码</h3><p>可以参考gitee给出的参考方法</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504192431002.png" alt=""></p><p>你可以利用以下命令创建一个本地仓库（相当于开发环境），并将其推送至远程仓库中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建本地example目录</span><br><span class="hljs-built_in">mkdir</span> example  <br><br><span class="hljs-comment">#进入到example目录中</span><br><span class="hljs-built_in">cd</span> example  <br><br><span class="hljs-comment">#将当前目录初始化为一个Git仓库</span><br>git init  <br><br><span class="hljs-comment">#创建README.md</span><br><span class="hljs-built_in">touch</span> README.md  <br><br><span class="hljs-comment">#将README.md添加到Git的暂存区</span><br>git add README.md  <br><br><span class="hljs-comment">#将暂存区的更改提交到本地仓库，并附上&quot;first commit&quot;的提交信息</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span>  <br><br><span class="hljs-comment">#将远程仓库添加到本地Git仓库中，并指定该远程仓库的名称为origin</span><br>git remote add origin git@gitee.com:patfang/tutorial-demonstration.git <br><br><span class="hljs-comment">#将本地master分支的内容推送到远程仓库origin上的master分支</span><br>git push -u origin <span class="hljs-string">&quot;master&quot;</span><br></code></pre></td></tr></table></figure><p><strong>-u 选项会将本地分支与远程分支关联起来，以后你可以直接使用 git push和 git pull，无需每次指定远程仓库和分支名称。</strong></p><h3 id="克隆远程仓库代码-1"><a href="#克隆远程仓库代码-1" class="headerlink" title="克隆远程仓库代码"></a>克隆远程仓库代码</h3><p>在板载计算机（相当于生产环境）的合适目录下打开一个终端，输入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitee.com:patfang/tutorial-demonstration.git<br></code></pre></td></tr></table></figure><p>即可将远程仓库中的代码下载到板载计算机中，随后完成相应部署编译即可。</p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200748626.png" alt=""></p><p><img src="Blog/source/_posts/04-Git进行代码托管/file-20250504200814339.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
      <tag>GitHub</tag>
      
      <tag>Git</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-Ubuntu和ROS基础</title>
    <link href="/2025/05/04/03-Ubuntu%E5%92%8CROS%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/04/03-Ubuntu%E5%92%8CROS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Linux文件系统"><a href="#一、Linux文件系统" class="headerlink" title="一、Linux文件系统"></a>一、Linux文件系统</h1><h2 id="1-文件系统框图"><a href="#1-文件系统框图" class="headerlink" title="1-文件系统框图"></a>1-文件系统框图</h2><p>Linux文件系统采用级层式的倒树状目录结构，最上层为根目录<code>/</code></p>  <pre><code class=" mermaid">graph TB  A[&quot;/&quot;]  B[&quot;bin&quot;]  C[&quot;boot&quot;]  D[&quot;grub&quot;]  E[&quot;lost+found&quot;]  F[&quot;dev&quot;]  G[&quot;etc&quot;]  H[&quot;home&quot;]  I[&quot;lib&quot;]  G[&quot;proc&quot;]  K[&quot;usr&quot;]  L[&quot;bin&quot;]  M[&quot;local&quot;]  N[&quot;bin&quot;]  O[&quot;man&quot;]  P[&quot;src&quot;]  Q[&quot;...&quot;]  R[&quot;man1&quot;]  S[&quot;php.1&quot;]  T[&quot;share&quot;]  U[&quot;...&quot;]  V[&quot;var&quot;]  W[&quot;...&quot;]  A --&gt; B   A --&gt; C   C --&gt; D  C --&gt; E  A --&gt; F  A --&gt; G  A --&gt; H  A --&gt; I  A --&gt; G  A --&gt; K  K --&gt; L  K --&gt; M  M --&gt; N  M --&gt; O  M --&gt; P  M --&gt; Q  O --&gt; R  R --&gt; S  K --&gt; T  K --&gt; U  A --&gt; V  A --&gt; W  </code></pre><h2 id="2-目录列表"><a href="#2-目录列表" class="headerlink" title="2-目录列表"></a>2-目录列表</h2><div class="table-container"><table><thead><tr><th style="text-align:center">地址</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">/</td><td style="text-align:center">根目录</td></tr><tr><td style="text-align:center">/bin</td><td style="text-align:center">重要的二进制（binary）应用程序，主要放置一些系统的必备执行档，如cp、cat、ls等</td></tr><tr><td style="text-align:center">/boot</td><td style="text-align:center">启动（boot）配置文件</td></tr><tr><td style="text-align:center">/etc</td><td style="text-align:center">配置文件、启动脚本等（etc）</td></tr><tr><td style="text-align:center">/home</td><td style="text-align:center">本地用户主目录</td></tr><tr><td style="text-align:center">/root</td><td style="text-align:center">root用户主文件夹，读作“slash-root“</td></tr><tr><td style="text-align:center">/usr</td><td style="text-align:center">包含绝大部分所有用户都能访问的应用程序和文件</td></tr><tr><td style="text-align:center">/sbin</td><td style="text-align:center">重要的系统二进制（system binary）文件</td></tr><tr><td style="text-align:center">/proc</td><td style="text-align:center">特殊的动态目录，用于维护系统信息和状态</td></tr><tr><td style="text-align:center">/var</td><td style="text-align:center">经常变化的（variable）文件，诸多日志或数据库等</td></tr><tr><td style="text-align:center">/lib</td><td style="text-align:center">存放库文件，例如系统使用的函数库的目录或者程序运行中需要用到的库</td></tr></tbody></table></div><p>Windows的绝对路径中，目录使用<code>\</code>分隔符，Linux的绝对路径中，目录使用<code>/</code>分隔符。</p><h2 id="3-Ubuntu操作"><a href="#3-Ubuntu操作" class="headerlink" title="3-Ubuntu操作"></a>3-Ubuntu操作</h2><p>主要可以参考教程<a href="Note/无人机/ROS入门/01-基础概述.md">01-基础概述</a></p><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><p>在Linux系统中，可以通过终端程序输入指令来进行各项操作。</p><p>可以从开始菜单启动终端程序</p><p><img src="file-20250508192830309.png" alt=""></p><p>也可以按下<code>Ctrl</code>+<code>Alt</code>+<code>T</code>打开</p><p><img src="file-20250508192902787.png" alt=""></p><p>同时按下<code>Ctrl</code>和<code>D</code>可以快速关闭终端</p><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p>将想要的内容覆盖到对应的文件中去，文件当中之前的内容将去除，修改了原文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;自定义内容&quot;</span> &gt; 文件名<br></code></pre></td></tr></table></figure><p>将想要的内容追加到文件后，对文件之前的内容不修改，只进行增添，也叫追加重定向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;自定义内容&quot;</span> &gt;&gt; 文件名<br></code></pre></td></tr></table></figure><h1 id="二、远程方案及代码同步"><a href="#二、远程方案及代码同步" class="headerlink" title="二、远程方案及代码同步"></a>二、远程方案及代码同步</h1><h2 id="1-无人机远程——SSH"><a href="#1-无人机远程——SSH" class="headerlink" title="1-无人机远程——SSH"></a>1-无人机远程——SSH</h2><p><strong>局域网链接</strong></p><ol><li>让机载电脑(NX)和自己的计算机连接同一个网络(wifi或热点均可)，在NX上打开一个终端,输入ifconfig，在wlan0中找到NX的ip地址。</li><li>在自己的计算机使用快捷键win+R打开运行窗口，输入cmd打开终端，输入ssh username@ip回车即可建立远程连接，其中nx为NX的用户名，192.168.1.3为NX的ip地址。</li></ol><h2 id="2-无人机代码同步"><a href="#2-无人机代码同步" class="headerlink" title="2-无人机代码同步"></a>2-无人机代码同步</h2><p><strong>编译</strong><br>代码同步最简单的办法就是使用U盘移植或直接在板载计算机中修改，不管是U盘移植还是直接修改，修改后都要进行重新编译，否则可能导致修改的内容不生效。<br>代码移植后，在工作空间catkin_ws下，删除build和devel文件夹，然后打开一个终端，输入catkin_make,等待编译结束即可。</p><p><strong>代码托管</strong><br>若使用代码托管，优先考虑git，在Gitee/GitHub创建一个仓库，然后在自己的电脑和nano上都配置ssh key 填入gitee账号中。</p><p>具体方法可以参考文章<a href="Note/无人机/ROS入门/04-Git进行代码托管.md">04-Git进行代码托管</a></p><h1 id="三、ROS基础"><a href="#三、ROS基础" class="headerlink" title="三、ROS基础"></a>三、ROS基础</h1><p>ROS 使用分布式通信模型，允许多个节点(Node)通过特定的协议进行数据传输。节点可以运行在不同的计算机上，也可以在同一台计算机上。ROS 的通信机制提供了高效、灵活的消息传递方式，可以支持异步和同步操作。满足实时性要求。</p><p>节点(Node):一个 ROS 系统中的最小工作单元，通常代表一个功能模块（如控制器、传感器处理器、路径规划器等）或者说子系统。</p><p>ROS 的通信机制包括以下几种主要方式：</p><ul><li>话题(Topic)</li><li>服务(Service)</li><li>动作(Action)</li><li>参数(Parameter)</li></ul><h2 id="1-话题（Topic）"><a href="#1-话题（Topic）" class="headerlink" title="1-话题（Topic）"></a>1-话题（Topic）</h2><p>话题（Topic）是ROS中最常用的通信机制，它采用发布/订阅（Publisher/Subscriber）模型。节点通过话题来传递数据，这种方式非常适合进行实时的数据流传输。一个节点可以发布数据到一个话题，其他节点可以订阅该话题接收数据。</p><p><strong>工作原理：</strong></p><ul><li>发布者（Publisher）：发布者向话题发送消息，其他节点通过订阅相同的主题来接收消息。</li><li>订阅者（Subscriber）：订阅者从话题中接收消息，进行处理。</li></ul><p><strong>特点：</strong></p><ul><li>解耦：发布者和订阅者并不直接通信，它们通过中介（ROS Master）来实现数据交换。发布者不需要知道有多少订阅者，订阅者也不需要知道有多少订阅者，订阅者也不需要知道消息的来源。</li><li>异步传输：消息通常是异步传输的，发布者发布消息后并不会等待订阅者的回应。</li><li>广播机制：一个话题可以被多个节点订阅，允许数据广播。</li></ul><p><strong>话题实例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-comment">//创建了多个订阅者，监听不同主题的消息</span><br>ros::Subscriber state_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;mavros_msgs::State&gt;(<span class="hljs-string">&quot;mavros/state&quot;</span>, <span class="hljs-number">1</span>, state_cb);<br>ros::Subscriber local_pose_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;geometry_msgs::PoseStamped&gt;(<span class="hljs-string">&quot;mavros/local_position/pose&quot;</span>, <span class="hljs-number">1</span>, pose_cb);<br>ros::Subscriber move_base_cmd_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;geometry_msgs::Twist&gt;(<span class="hljs-string">&quot;cmd_vel&quot;</span>, <span class="hljs-number">1</span>, move_base_cmd_vel_cb);<br>ros::Subscriber parking_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;tutorial_vision::CircleDetectResult&gt;(<span class="hljs-string">&quot;parking_detect_result&quot;</span>, <span class="hljs-number">1</span>, parking_cb);<br>ros::Subscriber deliver_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;tutorial_vision::CircleDetectResult&gt;(<span class="hljs-string">&quot;deliver_detect_result&quot;</span>, <span class="hljs-number">1</span>, deliver_cb);<br>ros::Subscriber qr_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;tutorial_vision::Stringstamped&gt;(<span class="hljs-string">&quot;qr_detect _result&quot;</span>, <span class="hljs-number">1</span>, qr_cb);<br>ros::Subscriber yolo_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;tutorial_vision::Stringstamped&gt;(<span class="hljs-string">&quot;yolo_detect&quot;</span>, <span class="hljs-number">1</span>, yolo_cb);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20250503测试</title>
    <link href="/2025/05/03/20250503%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/05/03/20250503%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>今天更新了博客文章中的图片的连接方式，增加了对$Latex$公式的支持，特别进行测试</p><h3 id="下面是图片测试"><a href="#下面是图片测试" class="headerlink" title="下面是图片测试"></a>下面是图片测试</h3><p><img src="file-20250503131140597.png" alt="图片测试"></p><h2 id="下面是行内LaTex公式测试"><a href="#下面是行内LaTex公式测试" class="headerlink" title="下面是行内LaTex公式测试"></a>下面是行内LaTex公式测试</h2><p>对嵌入公式进行测试$Latex$</p><p>有空格$ evidence_{i}=\sum_{j}W_{ij}x_{j}+b_{i} $</p><p>无空格$evidence_{i}=\sum_{j}W_{ij}x_{j}+b_{i}$</p><p><strong>注意在$符号中间不能有空格</strong></p><h2 id="下面是LaTex公式测试"><a href="#下面是LaTex公式测试" class="headerlink" title="下面是LaTex公式测试"></a>下面是LaTex公式测试</h2>$$Latex$$<p><strong>在网页上，为了Hexo正常显示独立的LeTex公式需要在前后加上代码</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">raw</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endraw</span> %&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>02-利用MathType在Markdown插入数学公式</title>
    <link href="/2025/05/02/02-%E5%88%A9%E7%94%A8MathType%E5%9C%A8Markdown%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2025/05/02/02-%E5%88%A9%E7%94%A8MathType%E5%9C%A8Markdown%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>主要思路就是，在MythType中进行相对应的设置后，直接复制对应公式可以复制出对应的LaTex形式的公式，复制进Markdown即可解析。</p><p>打开MythType</p><p><img src="Pasted%20image%2020250502155956.png" alt=""></p><p>依次选择<strong>预置</strong>&gt;<strong>剪切和复制预置</strong></p><p><img src="Pasted%20image%2020250502160026.png" alt=""></p><p><img src="Pasted%20image%2020250502160204.png" alt=""></p><p>勾选第二项，下拉框选择<strong>MathML或TeX</strong>，<strong>不要勾选在转换中包括MathType数据</strong>点击确定。  </p><p><img src="Pasted%20image%2020250502160125.png" alt=""></p><p><img src="Pasted%20image%2020250502161048.png" alt=""></p><p>输入想要的公式</p><p><img src="Pasted%20image%2020250502160416.png" alt=""></p><p>复制</p><p><img src="Pasted%20image%2020250502160446.png" alt=""></p><p>直接粘贴即可得到LaTex公式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LaTex"><span class="hljs-keyword">\[</span>f = <span class="hljs-keyword">\frac</span>&#123;&#123;<span class="hljs-keyword">\sum</span><span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>i<span class="hljs-built_in">^</span>n &#123;<span class="hljs-keyword">\sqrt</span> &#123;&#123;b<span class="hljs-built_in">^</span>2&#125; - 4ac&#125; &#125; &#125;&#125;&#123;&#123;<span class="hljs-keyword">\frac</span>&#123;&#123;n!&#125;&#125;&#123;&#123;r!<span class="hljs-keyword">\left</span>( &#123;n - r&#125; <span class="hljs-keyword">\right</span>)!&#125;&#125;&#125;&#125;<span class="hljs-keyword">\]</span><br></code></pre></td></tr></table></figure><p>将开头和结尾的<code>\[</code>修改为$$$$即可</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LaTex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>f = <span class="hljs-keyword">\frac</span>&#123;&#123;<span class="hljs-keyword">\sum</span><span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>i<span class="hljs-built_in">^</span>n &#123;<span class="hljs-keyword">\sqrt</span> &#123;&#123;b<span class="hljs-built_in">^</span>2&#125; - 4ac&#125; &#125; &#125;&#125;&#123;&#123;<span class="hljs-keyword">\frac</span>&#123;&#123;n!&#125;&#125;&#123;&#123;r!<span class="hljs-keyword">\left</span>( &#123;n - r&#125; <span class="hljs-keyword">\right</span>)!&#125;&#125;&#125;&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure>$$f = \frac{{\sum\limits_i^n {\sqrt {{b^2} - 4ac} } }}{{\frac{{n!}}{{r!\left( {n - r} \right)!}}}}$$<p>如果不想修改直接粘贴为LaTex公式可以使用下面的方法</p><p>方法主要参考CSDN隆里卡那唔的文章《插入mathtype公式如何使公式为$ $形式，而不是<code>/[/]</code>》^[<a href="https://blog.csdn.net/weixin_44090680/article/details/130547953">https://blog.csdn.net/weixin_44090680/article/details/130547953</a>]</p><p>选择<strong>格式</strong>&gt;<strong>内联公式</strong></p><p><img src="Pasted%20image%2020250502162118.png" alt=""></p><p>复制粘贴后为</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LaTex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\sqrt</span> &#123;&#123;b<span class="hljs-built_in">^</span>2&#125; - 4ac&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>在两边加上<code>$</code>即可</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LaTex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\sqrt</span> &#123;&#123;b<span class="hljs-built_in">^</span>2&#125; - 4ac&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure> $$\sqrt {{b^2} - 4ac} $$<h1 id="MathType-LaTex"><a href="#MathType-LaTex" class="headerlink" title="MathType #LaTex"></a>MathType #LaTex</h1>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MathType</tag>
      
      <tag>Markdown</tag>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-LaTex的下载与安装</title>
    <link href="/2025/05/02/01-LaTex%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2025/05/02/01-LaTex%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN Nicolecocol的文章《【LaTex】LaTex的下载与安装（2024新手小白超详细、超简洁 Windows系统）》^[<a href="https://blog.csdn.net/Nicolecocol/article/details/136968456">https://blog.csdn.net/Nicolecocol/article/details/136968456</a>]</p><h3 id="下载Texlive和TexStudio"><a href="#下载Texlive和TexStudio" class="headerlink" title="下载Texlive和TexStudio"></a>下载Texlive和TexStudio</h3><p>可以从镜像站下载，速度较快</p><p>Texlive<br><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">Index of /CTAN/systems/texlive/Images/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br><img src="Pasted%20image%2020250502155417.png" alt=""></p><p>TexStudio<br><a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/texstudio-org/texstudio/LatestRelease/">Index of /github-release/texstudio-org/texstudio/LatestRelease/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><img src="Pasted%20image%2020250502162529.png" alt=""></p><p><strong>先安装texlive再安装TexStudio</strong></p><h2 id="安装Texlive"><a href="#安装Texlive" class="headerlink" title="安装Texlive"></a>安装Texlive</h2><p>下载完成后打开</p><p><img src="Pasted%20image%2020250502162347.png" alt=""></p><p>使用管理员身份打开其中的<code>install-tl-windows.bat</code>文件</p><p><img src="Pasted%20image%2020250502162736.png" alt=""></p><p>短暂出现下面界面后进入安装界面</p><p><img src="Pasted%20image%2020250502163007.png" alt=""></p><p><img src="Pasted%20image%2020250502163354.png" alt=""></p><p><strong>如果不使用管理员身份会卡在第一个界面</strong></p><p>根据个人需要修改安装路径，可以点击<code>Advanced</code>进一步设置</p><p>设置完成后点击安装</p><p><img src="Pasted%20image%2020250502163655.png" alt=""></p><p><strong>不要按Abort否则会退出</strong></p><p>有事会卡在<code>running package-specific postactions</code>这一步</p><p><img src="Pasted%20image%2020250502184355.png" alt=""></p><p>打开对应文件夹下的<code>install-tl.log</code>文件</p><p><img src="Pasted%20image%2020250502184456.png" alt=""></p><p>发现实际已经输出安装成功的提示</p><p><img src="Pasted%20image%2020250502184543.png" alt=""></p><p>此时点击关闭即可</p><p><img src="Pasted%20image%2020250502184705.png" alt=""></p><p>此时打开CMD，输入<code>latex -v</code></p><p><img src="Pasted%20image%2020250502184843.png" alt=""></p><p>如图显示如上图，则安装成功。</p><h2 id="安装TexStudio"><a href="#安装TexStudio" class="headerlink" title="安装TexStudio"></a>安装TexStudio</h2><p>双击打开安装包</p><p><img src="Pasted%20image%2020250502185012.png" alt=""></p><p>下一步</p><p><img src="Pasted%20image%2020250502185050.png" alt=""></p><p>设置安装目录</p><p><img src="Pasted%20image%2020250502185132.png" alt=""></p><p>安装完成，点击关闭</p><p><img src="Pasted%20image%2020250502185149.png" alt=""></p><p><img src="Pasted%20image%2020250502185219.png" alt=""></p><h2 id="测试LaTex是否正常安装"><a href="#测试LaTex是否正常安装" class="headerlink" title="测试LaTex是否正常安装"></a>测试LaTex是否正常安装</h2><p>打开TeXstudio</p><p><img src="Pasted%20image%2020250502185323.png" alt=""></p><p><img src="Pasted%20image%2020250502185426.png" alt=""></p><p>点击<strong>文件</strong>&gt;<strong>新建</strong></p><p><img src="Pasted%20image%2020250502185516.png" alt=""></p><p><strong>输入以下测试代码</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs LaTex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125;<br> <br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br> <br>Hello, world!<br> <br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250502185630.png" alt=""></p><p>点击运行，如果右侧出现Hello, world!说明正常安装完成</p><p><img src="Pasted%20image%2020250502185705.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-1-VSCode中Jupyter Notebook的使用1</title>
    <link href="/2025/05/01/02-1-VSCode%E4%B8%ADJupyter%20Notebook%E7%9A%84%E4%BD%BF%E7%94%A81/"/>
    <url>/2025/05/01/02-1-VSCode%E4%B8%ADJupyter%20Notebook%E7%9A%84%E4%BD%BF%E7%94%A81/</url>
    
    <content type="html"><![CDATA[<p>可以参考VS Code官方给出的文档<a href="https://vscode.github.net.cn/docs/datascience/jupyter-notebooks">在 Visual Studio Code 中使用 Jupyter Notebook_Vscode中文网</a></p><h1 id="一、切换模式"><a href="#一、切换模式" class="headerlink" title="一、切换模式"></a>一、切换模式</h1><p>存在两种模式，分别为<strong>命令模式</strong>和<strong>编辑模式</strong></p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>当处于命令模式时，单元格左侧将出现一个实心垂直条，表示当前选中的单元格。该单元可以进行操作并接受键盘命令。</p><p><img src="Pasted%20image%2020250502085848.png" alt=""></p><p><img src="Pasted%20image%2020250502085740.png" alt=""></p><p><img src="Pasted%20image%2020250502085812.png" alt=""></p><p>在键盘上，按<code>Esc</code>键可进入命令模式</p><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>在编辑模式下，单元格编辑器周围有一个实心垂直条由边框连接起来。单元格的内容（代码或 Markdown）可以修改。</p><p><img src="Pasted%20image%2020250502090507.png" alt=""></p><p><img src="Pasted%20image%2020250502090521.png" alt=""></p><p>在键盘上，按<code>Enter</code>键可进入编辑模式</p><h2 id="模式的切换"><a href="#模式的切换" class="headerlink" title="模式的切换"></a>模式的切换</h2><p>要切换模式，可以使用键盘或鼠标。</p><ul><li>使用键盘时，按<code>Enter</code>键可进入编辑模式，按<code>Esc</code>键可进入命令模式。</li><li>使用鼠标时，单击单元格红框以外的区域进入命令模式，单元格红框以内的区域进入编辑模式。</li></ul><p><img src="Pasted%20image%2020250502090843.png" alt=""></p><p><img src="Pasted%20image%2020250502090853.png" alt=""></p><h1 id="二、运行代码"><a href="#二、运行代码" class="headerlink" title="二、运行代码"></a>二、运行代码</h1><h2 id="运行当前单元格"><a href="#运行当前单元格" class="headerlink" title="运行当前单元格"></a>运行当前单元格</h2><p>可以点击单元左侧的<strong>“运行”图标运行代码单元，输出将直接显示在代码单元下方。</strong></p><p><img src="Pasted%20image%2020250502091406.png" alt=""></p><p>有输出和无输出的对比</p><p><img src="Pasted%20image%2020250502091456.png" alt=""></p><p>使用键盘运行当前单元格时，</p><ul><li>使用<code>Ctrl</code>+<code>Enter</code>运行当前单元格。</li><li>使用<code>Shift</code>+<code>Enter</code>运行当前单元格并前进到下一个单元格。</li></ul><p><code>Ctrl</code>+<code>Enter</code></p><p><img src="Pasted%20image%2020250502092138.png" alt=""></p><p><code>Shift</code>+<code>Enter</code></p><p><img src="Pasted%20image%2020250502092154.png" alt=""></p><h2 id="按行运行"><a href="#按行运行" class="headerlink" title="按行运行"></a>按行运行</h2><p>按行运行能够按照一行一行的顺序对单元格内的代码进行运行和输出</p><p>运行前</p><p><img src="Pasted%20image%2020250502092316.png" alt=""></p><p>运行后</p><p><img src="Pasted%20image%2020250502092345.png" alt=""></p><p><img src="Pasted%20image%2020250502092435.png" alt=""></p><p><img src="Pasted%20image%2020250502092505.png" alt=""></p><h2 id="运行多个单元格"><a href="#运行多个单元格" class="headerlink" title="运行多个单元格"></a>运行多个单元格</h2><p>可以通过选择<strong>运行全部</strong>、<strong>运行上方全部</strong>或<strong>运行下方全部</strong>来运行多个单元格</p><p><img src="Pasted%20image%2020250502152733.png" alt=""></p><h1 id="三、基础操作"><a href="#三、基础操作" class="headerlink" title="三、基础操作"></a>三、基础操作</h1><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><p>在键盘按下<code>Ctrl</code>+<code>S</code>或点击文件&gt;保存</p><p><img src="Pasted%20image%2020250502153156.png" alt=""></p><p><img src="Pasted%20image%2020250502153135.png" alt=""></p><h2 id="导出Jupyter笔记本"><a href="#导出Jupyter笔记本" class="headerlink" title="导出Jupyter笔记本"></a>导出Jupyter笔记本</h2><p>选择界面上方的导出可以导出文件</p><p><img src="Pasted%20image%2020250502154545.png" alt=""></p><p>选择要导出的格式即可</p><p><img src="Pasted%20image%2020250502154637.png" alt=""></p><p><strong>当存在LaTeX公式时，导出 PDF必须安装 TeX</strong></p><p><img src="Pasted%20image%2020250502154817.png" alt=""></p><p>可以进入<a href="https://www.latex-project.org/get/">Get LaTeX - Mac OS, Windows, Linux</a>下载</p><p>LaTex的安装可以参考<a href="Note/语言语法/LaTeX/01-LaTex的下载与安装.md">01-LaTex的下载与安装</a></p><p>安装完成后能够正常导出</p><p><img src="file-20250503082109530.png" alt=""></p><p><img src="file-20250503082216209.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>JupyterNotebook</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-VSCode配置Jupyter Notebook</title>
    <link href="/2025/05/01/01-VSCode%E9%85%8D%E7%BD%AEJupyter%20Notebook/"/>
    <url>/2025/05/01/01-VSCode%E9%85%8D%E7%BD%AEJupyter%20Notebook/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。——<a href="https://jupyter-notebook.readthedocs.io/en/stable/notebook.html">Jupyter Notebook官方介绍</a></p></blockquote><p>Jupyter Notebook文档是保存为后缀名为<code>.ipynb</code>的<code>JSON</code>格式文件，不仅便于版本控制，也方便与他人共享，文档可以导出为：HTML、LaTeX、PDF等格式。</p><h1 id="一、VS-Code-配置Jupyter"><a href="#一、VS-Code-配置Jupyter" class="headerlink" title="一、VS Code 配置Jupyter"></a>一、VS Code 配置Jupyter</h1><h2 id="1-安装扩展"><a href="#1-安装扩展" class="headerlink" title="1-安装扩展"></a>1-安装扩展</h2><p>打开VS Code</p><p>安装jupyter扩展</p><p>在使用前你需要确保你的python环境以及安装了Jupyter内核</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">conda install jupyter<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">pip install jupyter<br></code></pre></td></tr></table></figure><h2 id="2-创建Jupyter笔记本"><a href="#2-创建Jupyter笔记本" class="headerlink" title="2-创建Jupyter笔记本"></a>2-创建Jupyter笔记本</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>按下 <code>Ctrl + Shift + P</code> 打开命令面板，输入 <code>Jupyter: Create New Blank Notebook</code>来创建一个新的 Jupyter 笔记本</p><p><img src="Pasted%20image%2020250501161102%201.png" alt=""></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>点击VS Code上方的搜索框</p><p><img src="Pasted%20image%2020250501161556%201.png" alt=""></p><p>点击<code>显示并运行命令</code></p><p><img src="Pasted%20image%2020250501161650%201.png" alt=""></p><p>输入 <code>Jupyter: Create New Blank Notebook</code>来创建一个新的 Jupyter 笔记本</p><p><img src="Pasted%20image%2020250501162904%201.png" alt=""></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>直接新建文件</p><p><img src="Pasted%20image%2020250501163546%201.png" alt=""></p><p>将文件后缀名设置为<code>ipynb</code></p><p><img src="Pasted%20image%2020250501163647%201.png" alt=""></p><h3 id="创建完成"><a href="#创建完成" class="headerlink" title="创建完成"></a>创建完成</h3><p>创建或者打开现有的 <code>.ipynb</code> 文件后显示</p><p><img src="Pasted%20image%2020250501163127%201.png" alt=""></p><h2 id="3-选择和配置内核"><a href="#3-选择和配置内核" class="headerlink" title="3-选择和配置内核"></a>3-选择和配置内核</h2><p>点击右上角的内核选择器选择内核</p><p><img src="Pasted%20image%2020250501165055%201.png" alt=""></p><p>选择想要使用的Python环境</p><p><img src="Pasted%20image%2020250501165305%201.png" alt=""></p><p><strong>注意：对应环境中要安装Jupyter，否则会报错</strong></p><p><img src="Pasted%20image%2020250501165529%201.png" alt=""></p><h3 id="Python环境没有Jupyter的解决方法"><a href="#Python环境没有Jupyter的解决方法" class="headerlink" title="Python环境没有Jupyter的解决方法"></a>Python环境没有Jupyter的解决方法</h3><p>这时可以使用conda进入到对应的环境，安装Jupyter</p><p>使用命令激活对应环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda activate UI<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250501165819%201.png" alt=""></p><p>运行以下命令来安装 Jupyter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">pip install jupyter<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250501165915%201.png" alt=""></p><p>安装完毕</p><p><img src="Pasted%20image%2020250501170040%201.png" alt=""></p><p>再次运行代码，发现能够正常运行</p><p><img src="Pasted%20image%2020250501170120%201.png" alt=""></p><h4 id="只安装ipykernel内核（更快）"><a href="#只安装ipykernel内核（更快）" class="headerlink" title="只安装ipykernel内核（更快）"></a>只安装ipykernel内核（更快）</h4><p><img src="Pasted%20image%2020250501170542%201.png" alt=""></p><p>也可以在激活环境后直接输入只安装内核</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> ipykernel<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250501170434%201.png" alt=""></p><p><img src="Pasted%20image%2020250501170504%201.png" alt=""></p><p>代码正常输出</p><p><img src="Pasted%20image%2020250501170610%201.png" alt=""></p><hr><h1 id="VSCode-JupyterNotebook-AI"><a href="#VSCode-JupyterNotebook-AI" class="headerlink" title="VSCode #JupyterNotebook  #AI"></a>VSCode #JupyterNotebook  #AI</h1>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>JupyterNotebook</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-2-2-javax.net.ssl.SSLHandshakeException：PKIX path building failed问题的解决</title>
    <link href="/2025/04/13/03-2-2-javax.net.ssl.SSLHandshakeException%EF%BC%9APKIX%20path%20building%20failed%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/04/13/03-2-2-javax.net.ssl.SSLHandshakeException%EF%BC%9APKIX%20path%20building%20failed%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>本小结与<a href="../../../Note/QT/03-2-1-手动安装Gradle.md">03-2-1-手动安装Gradle</a>相同</p><h2 id="出现错误"><a href="#出现错误" class="headerlink" title="出现错误"></a>出现错误</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> javax<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.SSLHandshakeException</span>: PKIX <span class="hljs-selector-tag">path</span> building failed: sun<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.provider</span><span class="hljs-selector-class">.certpath</span><span class="hljs-selector-class">.SunCertPathBuilderException</span>: unable to find valid certification <span class="hljs-selector-tag">path</span> to requested target<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250413131605.png" alt=""></p><p><img src="Pasted%20image%2020250413131614.png" alt=""></p><p>找到需要的gradle版本</p><p><img src="Pasted%20image%2020250413131626.png" alt=""></p><h2 id="下载Gradle"><a href="#下载Gradle" class="headerlink" title="下载Gradle"></a>下载Gradle</h2><p>访问 Gradle 官方下载页面：<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><p><img src="Pasted%20image%2020250413132618.png" alt=""></p><p>或者国内的镜像网站：<a href="https://mirrors.cloud.tencent.com/gradle/">https://mirrors.cloud.tencent.com/gradle/</a></p><p><img src="Pasted%20image%2020250413132602.png" alt=""></p><p>选择适合你需求的 Gradle 版本，下载</p><p><img src="Pasted%20image%2020250413132655.png" alt=""></p><p><img src="Pasted%20image%2020250413132729.png" alt=""></p><h2 id="手动添加Gradle"><a href="#手动添加Gradle" class="headerlink" title="手动添加Gradle"></a>手动添加Gradle</h2><p>进入到自己工程目录下的wrapper文件夹</p><p><img src="Pasted%20image%2020250413132837.png" alt=""></p><p><img src="Pasted%20image%2020250413132848.png" alt=""></p><p><img src="Pasted%20image%2020250413132930.png" alt=""></p><p><img src="Pasted%20image%2020250413132945.png" alt=""></p><p><img src="Pasted%20image%2020250413132959.png" alt=""></p><p><img src="Pasted%20image%2020250413133012.png" alt=""></p><p>将刚刚下载的压缩包移动到该文件夹中</p><p><img src="Pasted%20image%2020250413133059.png" alt=""></p><p>编辑gradle-wrapper文件</p><p><img src="Pasted%20image%2020250413133155.png" alt=""></p><p>修改为下载文件名称（缺少的文件）</p><p><img src="Pasted%20image%2020250413133351.png" alt=""></p><p>然后再次运行</p><p><img src="Pasted%20image%2020250413133411.png" alt=""></p><p>正常编译</p><p><img src="Pasted%20image%2020250413133454.png" alt=""></p><p>输出的APK文件在之前文件夹中build目录下的output文件夹中</p><p><img src="Pasted%20image%2020250413133817.png" alt=""></p><p><img src="Pasted%20image%2020250413133858.png" alt=""></p><p><img src="Pasted%20image%2020250413133914.png" alt=""></p><hr><h1 id="QT-Android-Gradle"><a href="#QT-Android-Gradle" class="headerlink" title="QT #Android #Gradle"></a>QT #Android #Gradle</h1>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>Android</tag>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-2-1-手动安装Gradle</title>
    <link href="/2025/04/13/03-2-1-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85Gradle/"/>
    <url>/2025/04/13/03-2-1-%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85Gradle/</url>
    
    <content type="html"><![CDATA[<p>本小结与<a href="../../../Note/QT/03-2-2-javax.net.ssl.SSLHandshakeException：PKIX%20path%20building%20failed问题的解决.md">03-2-2-javax.net.ssl.SSLHandshakeException：PKIX path building failed问题的解决</a>相同</p><h2 id="下载Gradle"><a href="#下载Gradle" class="headerlink" title="下载Gradle"></a>下载Gradle</h2><p>访问 Gradle 官方下载页面：<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><p><img src="Pasted%20image%2020250413132618.png" alt=""></p><p>或者国内的镜像网站：<a href="https://mirrors.cloud.tencent.com/gradle/">https://mirrors.cloud.tencent.com/gradle/</a></p><p><img src="Pasted%20image%2020250413132602.png" alt=""></p><p>选择适合你需求的 Gradle 版本，下载</p><p><img src="Pasted%20image%2020250413132655.png" alt=""></p><p><img src="Pasted%20image%2020250413132729.png" alt=""></p><h2 id="手动添加Gradle"><a href="#手动添加Gradle" class="headerlink" title="手动添加Gradle"></a>手动添加Gradle</h2><p>进入到自己工程目录下的wrapper文件夹</p><p><img src="Pasted%20image%2020250413132837.png" alt=""></p><p><img src="Pasted%20image%2020250413132848.png" alt=""></p><p><img src="Pasted%20image%2020250413132930.png" alt=""></p><p><img src="Pasted%20image%2020250413132945.png" alt=""></p><p><img src="Pasted%20image%2020250413132959.png" alt=""></p><p><img src="Pasted%20image%2020250413133012.png" alt=""></p><p>将刚刚下载的压缩包移动到该文件夹中</p><p><img src="Pasted%20image%2020250413133059.png" alt=""></p><p>编辑gradle-wrapper文件</p><p><img src="Pasted%20image%2020250413133155.png" alt=""></p><p>修改为下载文件名称（缺少的文件）</p><p><img src="Pasted%20image%2020250413133351.png" alt=""></p><p>然后再次运行</p><p><img src="Pasted%20image%2020250413133411.png" alt=""></p><p>正常编译</p><p><img src="Pasted%20image%2020250413133454.png" alt=""></p><p>输出的APK文件在之前文件夹中build目录下的output文件夹中</p><p><img src="Pasted%20image%2020250413133817.png" alt=""></p><p><img src="Pasted%20image%2020250413133858.png" alt=""></p><p><img src="Pasted%20image%2020250413133914.png" alt=""></p><hr><h1 id="QT-Android-Gradle"><a href="#QT-Android-Gradle" class="headerlink" title="QT #Android #Gradle"></a>QT #Android #Gradle</h1>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>Android</tag>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-2-QT打包为APK</title>
    <link href="/2025/04/13/03-2-QT%E6%89%93%E5%8C%85%E4%B8%BAAPK/"/>
    <url>/2025/04/13/03-2-QT%E6%89%93%E5%8C%85%E4%B8%BAAPK/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN雪豹不会梦到瑞克5的文章《QT——写完的程序打包为APK在自己的手机上运行》^[<a href="https://blog.csdn.net/szn1316159505/article/details/136458920">https://blog.csdn.net/szn1316159505/article/details/136458920</a>]</p><h1 id="一、qt安装android组件"><a href="#一、qt安装android组件" class="headerlink" title="一、qt安装android组件"></a>一、qt安装android组件</h1><p>qtcreater–工具-QTMaintenaceTool-startMaintenaceTool—登陆—添加或修改组件—找到android，安装<br>若是没有android这个包，就吧右边全勾上，筛选一下就会出现了</p><p><img src="Pasted%20image%2020250413093859.png" alt=""></p><p><img src="Pasted%20image%2020250413093922.png" alt=""></p><p><img src="Pasted%20image%2020250413093951.png" alt=""></p><h1 id="二、打开qt配置Android-环境"><a href="#二、打开qt配置Android-环境" class="headerlink" title="二、打开qt配置Android 环境"></a>二、打开qt配置Android 环境</h1><p>打开qtcreater–工具-外部-配置，配置android的sdk、ndk，选择路径下载等，让下边全绿</p><p><img src="Pasted%20image%2020250413094421.png" alt=""></p><p><img src="Pasted%20image%2020250413101502.png" alt=""></p><p>此时配置项目中会出现Android选项</p><p><img src="Pasted%20image%2020250413101605.png" alt=""></p><p>点击<code>SDK管理器</code></p><p><img src="Pasted%20image%2020250413104600.png" alt=""></p><p>将ARM架构的包选上安装</p><p><img src="Pasted%20image%2020250413103342.png" alt=""></p><p>在设备中添加</p><p><img src="Pasted%20image%2020250413102158.png" alt=""></p><p><img src="Pasted%20image%2020250413104748.png" alt=""></p><p>设置</p><p><img src="Pasted%20image%2020250413131439.png" alt=""></p><p><strong>出现错误</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> javax<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.SSLHandshakeException</span>: PKIX <span class="hljs-selector-tag">path</span> building failed: sun<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.provider</span><span class="hljs-selector-class">.certpath</span><span class="hljs-selector-class">.SunCertPathBuilderException</span>: unable to find valid certification <span class="hljs-selector-tag">path</span> to requested target<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250413131605.png" alt=""></p><p><img src="Pasted%20image%2020250413131614.png" alt=""></p><p>找到需要的gradle版本</p><p><img src="Pasted%20image%2020250413131626.png" alt=""></p><p>使用<br><a href="../../../Note/QT/03-2-1-手动安装Gradle.md">03-2-1-手动安装Gradle</a><br><a href="../../../Note/QT/03-2-2-javax.net.ssl.SSLHandshakeException：PKIX%20path%20building%20failed问题的解决.md">03-2-2-javax.net.ssl.SSLHandshakeException：PKIX path building failed问题的解决</a><br>中的方法问题得到解决</p><p>软件正常安装</p><p><img src="f8423f9da5afc9dc235cf47971e1950.jpg" alt=""></p><p><img src="c9fc7a8762685c5a17c93f6fa35d618.jpg" alt=""></p><hr><h1 id="QT-打包-apk"><a href="#QT-打包-apk" class="headerlink" title="QT #打包 #apk"></a>QT #打包 #apk</h1>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>打包</tag>
      
      <tag>apk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-QT简单界面的制作</title>
    <link href="/2025/04/13/02-1-QT%E7%AE%80%E5%8D%95%E7%95%8C%E9%9D%A2%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <url>/2025/04/13/02-1-QT%E7%AE%80%E5%8D%95%E7%95%8C%E9%9D%A2%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-打开软件"><a href="#1-打开软件" class="headerlink" title="1-打开软件"></a>1-打开软件</h2><p>打开QT</p><p><img src="Pasted%20image%2020250413015005.png" alt=""></p><h2 id="2-创建空白应用"><a href="#2-创建空白应用" class="headerlink" title="2-创建空白应用"></a>2-创建空白应用</h2><p>通过<code>Qt Creator</code>新建<code>Qt Widgets</code>应用</p><p><img src="Pasted%20image%2020250413015052.png" alt=""></p><p><img src="Pasted%20image%2020250413015159.png" alt=""></p><p>创建完成</p><p><img src="Pasted%20image%2020250413015223.png" alt=""></p><h2 id="设计UI"><a href="#设计UI" class="headerlink" title="设计UI"></a>设计UI</h2><p>打开UI设计器</p><p><img src="Pasted%20image%2020250413015504.png" alt=""></p><p><img src="Pasted%20image%2020250413075525.png" alt=""></p><h3 id="1-添加布局"><a href="#1-添加布局" class="headerlink" title="1-添加布局"></a>1-添加布局</h3><p><img src="Pasted%20image%2020250413080426.png" alt=""></p><p>将<code>Layouts</code>中的<code>Vertical Layout</code>拖动到窗口中</p><p><img src="Pasted%20image%2020250413080529.png" alt=""></p><p><img src="Pasted%20image%2020250413080541.png" alt=""></p><h3 id="2-添加控件"><a href="#2-添加控件" class="headerlink" title="2-添加控件"></a>2-添加控件</h3><p>将需要的控件拖动到布局中</p><p><img src="Pasted%20image%2020250413080957.png" alt=""></p><p>修改控件的对应属性</p><p><img src="Pasted%20image%2020250413081108.png" alt=""></p><p><img src="Pasted%20image%2020250413081321.png" alt=""></p><p><img src="Pasted%20image%2020250413081411.png" alt=""></p><p><img src="Pasted%20image%2020250413081439.png" alt=""></p><p><img src="Pasted%20image%2020250413081522.png" alt=""></p><h3 id="3-交互逻辑实现——在-UI-文件里连接信号与槽"><a href="#3-交互逻辑实现——在-UI-文件里连接信号与槽" class="headerlink" title="3-交互逻辑实现——在 UI 文件里连接信号与槽"></a>3-交互逻辑实现——在 UI 文件里连接信号与槽</h3><p>Qt的信号与槽机制是Qt框架中实现对象之间通信的一种方式。在这个机制中，信号（signal）是由对象在发生了某种状态改变时发出的消息，槽（slot）是用来被信号触发的函数。</p><p>右键按钮，选择转到槽</p><p><img src="Pasted%20image%2020250413090501.png" alt=""></p><p>选择<code>clicked()</code></p><p><img src="Pasted%20image%2020250413090531.png" alt=""></p><p>自动生成对应函数</p><p><img src="Pasted%20image%2020250413090603.png" alt=""></p><p>输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">QString txt = ui-&gt;inputText-&gt;<span class="hljs-built_in">text</span>();<br>ui-&gt;resultLabel-&gt;<span class="hljs-built_in">setText</span>(txt);<br>ui-&gt;inputText-&gt;<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250413090617.png" alt=""></p><p>运行</p><p><img src="Pasted%20image%2020250413090653.png" alt=""></p><p>功能正常实现</p><p><img src="Pasted%20image%2020250413090736.png" alt=""></p><p><img src="Pasted%20image%2020250413090752.png" alt=""></p><p><img src="Pasted%20image%2020250413090759.png" alt=""></p><hr><h1 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h1>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-2-QT 5.14.2下载使用</title>
    <link href="/2025/04/12/01-2-QT%205.14.2%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/04/12/01-2-QT%205.14.2%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN河西石头的文章《纪念QT可直接安装的离线版最后版本5.14.2》^[<a href="https://blog.csdn.net/haigear/article/details/128696201">https://blog.csdn.net/haigear/article/details/128696201</a>]</p><p>打开安装程序</p><p><img src="Pasted%20image%2020250412230253.png" alt=""></p><p>登录账号</p><p><img src="Pasted%20image%2020250412230323.png" alt=""></p><p><img src="Pasted%20image%2020250412230411.png" alt=""></p><p><img src="Pasted%20image%2020250412230531.png" alt=""></p><p>选择路径</p><p><img src="Pasted%20image%2020250412230652.png" alt=""></p><p>选择需要的组件</p><p><img src="Pasted%20image%2020250412230747.png" alt=""></p><p>同意许可</p><p><img src="Pasted%20image%2020250412230803.png" alt=""></p><p>创建快捷方式</p><p><img src="Pasted%20image%2020250412230822.png" alt=""></p><p>安装</p><p><img src="Pasted%20image%2020250412230833.png" alt=""></p><p><img src="Pasted%20image%2020250412231140.png" alt=""></p><p>完成安装</p><p><img src="Pasted%20image%2020250412233839.png" alt=""></p><p><img src="Pasted%20image%2020250412233851.png" alt=""></p><p>进入Qt Creator</p><p><img src="Pasted%20image%2020250412233953.png" alt=""></p><p>点击<code>Projects</code>-<code>New</code></p><p><img src="Pasted%20image%2020250412234031.png" alt=""></p><p><img src="Pasted%20image%2020250412234146.png" alt=""></p><p>新建一个工程，然后一路“下一步”，不要企图选择其他选项，一路向后都是下一步即可。</p><p><img src="Pasted%20image%2020250412234226.png" alt=""></p><p><img src="Pasted%20image%2020250412234245.png" alt=""></p><p><img src="Pasted%20image%2020250412234254.png" alt=""></p><p><img src="Pasted%20image%2020250412234304.png" alt=""></p><p><img src="Pasted%20image%2020250412234325.png" alt=""></p><p><img src="Pasted%20image%2020250412234346.png" alt=""></p><p>运行</p><p><img src="Pasted%20image%2020250412234642.png" alt=""></p><p>确认版本</p><p><img src="Pasted%20image%2020250412234841.png" alt=""></p><p><img src="Pasted%20image%2020250412234920.png" alt=""></p><hr><h1 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h1>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-1-QT安装</title>
    <link href="/2025/04/12/01-1-QT%E5%AE%89%E8%A3%85/"/>
    <url>/2025/04/12/01-1-QT%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一、QT下载、安装、入门、配置"><a href="#一、QT下载、安装、入门、配置" class="headerlink" title="一、QT下载、安装、入门、配置"></a>一、QT下载、安装、入门、配置</h1><p>文章主要参考CSDN_清豆°的文章《【保姆级图文教程】最新Windows系统QT下载、安装、入门、配置VS Qt环境，图文详细、内容充实》^[<a href="https://blog.csdn.net/qq_62888264/article/details/132645054">https://blog.csdn.net/qq_62888264/article/details/132645054</a>]</p><h2 id="1-下载安装QT"><a href="#1-下载安装QT" class="headerlink" title="1-下载安装QT"></a>1-下载安装QT</h2><p>Qt的安装方式有两种：</p><ol><li>在线<pre><code class="hljs"> 在线安装稍麻烦，能安装5.15及之后的版本，便于安装多个版本在根目录下进行后期管理</code></pre></li><li>离线<pre><code class="hljs"> 离线安装更简单，能安装5.14及之前的版本，安装速度不依赖于网速，但不便于多个版本的统一管理</code></pre></li></ol><p>进入官网<a href="https://www.qt.io/zh-cn/">Qt | 软件开发全周期的各阶段工具</a>或直接进入下载页<a href="https://www.qt.io/download-qt-installer-oss">Download Qt OSS: Get Qt Online Installer</a></p><p><img src="Pasted%20image%2020250412203706.png" alt=""></p><p>选择对应版本下载</p><p><img src="Pasted%20image%2020250412203733.png" alt=""></p><p>打开安装包所在的文件夹</p><p><img src="Pasted%20image%2020250412203918.png" alt=""></p><p>点击鼠标右键，点击<code>在终端中打开</code></p><p><img src="Pasted%20image%2020250412203951.png" alt=""></p><p>输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\name --mirror https://mirrors.ustc.edu.cn/qtproject/  <br></code></pre></td></tr></table></figure><p><code>name</code>为刚刚下载的安装包的名称，如此处为</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\qt-online-installer-windows-x64-<span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>_2.exe --mirror https://mirrors.ustc.edu.cn/qtproject/  <br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250412204321.png" alt=""></p><p>进入安装界面</p><p><img src="Pasted%20image%2020250412204415.png" alt=""></p><p>登录QT账号</p><p><img src="Pasted%20image%2020250412204442.png" alt=""></p><p>勾选后下一步</p><p><img src="Pasted%20image%2020250412204600.png" alt=""></p><p><img src="Pasted%20image%2020250412204612.png" alt=""></p><p>选择<strong>合法的</strong>安装文件夹，点击<code>自定义安装</code>，勾选后点击<code>下一步</code><br><strong>合法的路径：整个路径一定不能包含中文字符、空格、特殊字符等</strong></p><p><img src="Pasted%20image%2020250412204740.png" alt=""></p><p>显示所有版本</p><p><img src="Pasted%20image%2020250412204911.png" alt=""></p><p>下一步</p><p><img src="Pasted%20image%2020250412210533.png" alt=""></p><p>关联文件</p><p><img src="Pasted%20image%2020250412210554.png" alt=""></p><p>安装完毕</p><p><img src="Pasted%20image%2020250412220547.png" alt=""></p><p>完成</p><p><img src="Pasted%20image%2020250412221154.png" alt=""></p><h2 id="2-在Qt-Creator创建并编写第一个Qt程序"><a href="#2-在Qt-Creator创建并编写第一个Qt程序" class="headerlink" title="2-在Qt Creator创建并编写第一个Qt程序"></a>2-在Qt Creator创建并编写第一个Qt程序</h2><p>点击<code>创建项目</code></p><p><img src="Pasted%20image%2020250412222703.png" alt=""></p><p>选择项目模板后点击<code>选择</code>，一般选择<code>Application（Qt）</code>下的<code>Qt Widgets Application</code>即可：</p><p><img src="Pasted%20image%2020250412222833.png" alt=""></p><p>输入<code>项目名称</code>、选择<code>项目路径</code>、点击<code>下一步</code><br><strong>注意：项目名称和项目路径不能包含中文符号、空格、特殊字符等</strong></p><p><img src="Pasted%20image%2020250412223339.png" alt=""></p><p>选择构建工具：<br>qmake是Qt提供的构建工具，用于简化 Qt 项目的构建过程。<br>CMake是一个跨平台的开源构建工具，用于管理和构建 C++ 程序的软件项目。<br>Qbs，全称：Qt Build Suite，是由Qt官方提供的一个跨平台构建工具，用于构建和管理Qt和非Qt项目。它是Qt Creator集成开发环境（IDE）的一部分，但也可以独立使用。<br>一般选择默认的qmake即可，你会cmake选择cmake也可以。</p><p><img src="Pasted%20image%2020250412223817.png" alt=""></p><p>选择基础类和主类的名字：</p><p>基础类提供了QMainWindow、QWidget、QDialog，选择默认的QMainWindow即可，QWidget要轻量简单一点，也可以，QDialog用的少。<strong>主类Class Name可以自定义，不过要符合C++的语言规范</strong>。</p><p><img src="Pasted%20image%2020250412223944.png" alt=""></p><p>点击<code>下一步</code></p><p><img src="Pasted%20image%2020250412224016.png" alt=""></p><p>选择构建套件</p><p>我们这里是使用QtCreator编写时，必须选择MinGW编译套件<br>如果使用Microsoft Visual Studio编写Qt程序则必须选择MSVC编译套件，这个后文有说明</p><p><img src="Pasted%20image%2020250412224252.png" alt=""></p><p>点击<code>完成</code></p><p><img src="Pasted%20image%2020250412224318.png" alt=""></p><p>等待项目构建<br>1、此时Qt Creator会开始构建项目，右下角有进度条可以看见，如果<strong>全部是绿色则说明构建成功</strong><br>2、好像也可能出现一两个红杠，不管他，以下一步能否正确运行出现小窗口为准</p><p>运行项目<br>此时我们点击<code>左下角运行按钮</code>，可以看见弹出一个窗口，说明项目成功运行，我们的环境安装没有问题。</p><p><img src="Pasted%20image%2020250412224538.png" alt=""></p><p><img src="Pasted%20image%2020250412224552.png" alt=""></p><p><img src="Pasted%20image%2020250412224633.png" alt=""></p><h2 id="3-配置Visual-Studio编写Qt程序的环境"><a href="#3-配置Visual-Studio编写Qt程序的环境" class="headerlink" title="3-配置Visual Studio编写Qt程序的环境"></a>3-配置Visual Studio编写Qt程序的环境</h2><p>打开VS，在上方菜单栏找到并点击<code>扩展</code>-&gt;<code>管理扩展</code></p><p><img src="Pasted%20image%2020250412225401.png" alt=""></p><p>如图，在浏览中搜索Qt，点击<code>安装</code>开始下载<code>Qt Visual Studio Tools</code>插件</p><p><img src="Pasted%20image%2020250412225457.png" alt=""></p><p>再次打开Visual Studio，进入<code>Qt Versions</code></p><p><img src="Pasted%20image%2020250412232718.png" alt=""></p><p>点击<code>Add</code>开始添加Qt版本</p><p><img src="Pasted%20image%2020250412232903.png" alt=""></p><p>选中条目之后点击<code>...</code>去找到qmake.exe文件的位置<br><strong>注意：在VS环境中只能添加MSVC版本的套件，不能MinGW套件（添加了也无法使用）</strong></p><p><img src="Pasted%20image%2020250412232847.png" alt=""></p><p>随后使用同样的方法添加你下载的所有（<strong>MSVC</strong>）版本即可，添加完之后点击<code>确定</code>完成插件的设置</p><p><img src="Pasted%20image%2020250412235034.png" alt=""></p><p>接下来开始新建VS Qt项目运行：<br>点击<code>文件</code>-&gt;<code>新建</code>-&gt;<code>项目</code></p><p><img src="Pasted%20image%2020250412235108.png" alt=""></p><p>在搜索框输入Qt可以查看插件为我们提供的所有VS Qt项目模板，一般我们选择<code>Qt Widgets Application</code>模板即可，选择后点击<code>下一步</code></p><p><img src="Pasted%20image%2020250412235158.png" alt=""></p><p>输入项目的<code>名称</code>、<code>位置</code>、<code>解决方案名称</code>等信息后点击创建<br><strong>上述信息一定不要包含中文、空格、特殊字符等，否则后续会报错</strong></p><p><img src="Pasted%20image%2020250412235332.png" alt=""></p><p>点击<code>Next</code></p><p><img src="Pasted%20image%2020250412235403.png" alt=""></p><ol><li>选择构建系统，默认的方便适用，选择默认的即可；</li><li>选择Debug版本和Release版本的各自使用的Qt版本（一般我们编写程序时运行Debug版本，Release则是发行的版本），建议两个要选择一致；</li><li>然后选择对应用到的Qt模块（默认已经选择上Core、Gui、Widgets三个模块，这是三个基础模块，对付一般的简单应用已经足够，后续需要用到其他模块时还可以再添加）；</li><li>不建议勾选Enable PCH Support；</li><li>随后点击Next</li></ol><p><img src="Pasted%20image%2020250412235627.png" alt=""></p><ol><li>选择主要类的类名，符合C++规范即可；</li><li>选择基础类，这是主要类会继承的类，有三个可以选择，一般选择默认的QMainWindow即可，QWidget更轻量，QDialog用的少；</li><li>填写其他文件的名字，建议和主类的名字保持一致；</li><li>勾选是否使用小写文件名（大小写无所谓）、是否添加默认的应用图标（勾选上运行出来的程序会带上Qt的默认图标，否则是一个终端的图标不那么美观），根据自己的喜好选择，我比较懒，就默认不勾选了；</li><li>填写选择完毕之后点击Finish完成项目创建：</li></ol><p><img src="Pasted%20image%2020250412235725.png" alt=""></p><p><img src="Pasted%20image%2020250412235737.png" alt=""></p><p>随后运行项目，出现小窗口即说明VS中的Qt开发环境配置成功</p><p><img src="Pasted%20image%2020250412235902.png" alt=""></p><h1 id="二、资源下载"><a href="#二、资源下载" class="headerlink" title="二、资源下载"></a>二、资源下载</h1><p>主要参考CSDNersaijun的文章《全网最全的Qt下载途径（多种下载通道+所有版本）》^[<a href="https://blog.csdn.net/kaspar1992/article/details/107588850">https://blog.csdn.net/kaspar1992/article/details/107588850</a>]</p><p>QT可以从官网下载，也可以使用国内的镜像网站进行下载</p><h2 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1-官网下载"></a>1-官网下载</h2><p>Qt 官网有一个专门的资源下载网站，所有的开发环境和相关工具都可以从这里下载，具体地址是：<a href="https://download.qt.io/">https://download.qt.io/</a></p><p>官网界面如下</p><p><img src="Pasted%20image%2020250412200339.png" alt=""></p><h3 id="对目录结构的说明"><a href="#对目录结构的说明" class="headerlink" title="对目录结构的说明"></a>对目录结构的说明</h3><div class="table-container"><table><thead><tr><th><strong>目录</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>snapshots</td><td>预览版，最新的开发测试中的 Qt 库和开发工具</td></tr><tr><td>online Qt</td><td>在线安装源</td></tr><tr><td>official_releases</td><td>正式发布版，是与开发版相对的稳定版 Qt 库和开发工具（可以下载Qt开发环境和源代码）</td></tr><tr><td>new_archive</td><td></td></tr><tr><td>ministro</td><td>迷你版，目前是针对 Android 的版本</td></tr><tr><td>linguist_releases</td><td></td></tr><tr><td>learning</td><td>有学习 Qt 的文档教程和示范视频</td></tr><tr><td>development_releases</td><td>开发版，有新的和旧的不稳定版本，在 Qt 开发过程中的非正式版本</td></tr><tr><td>community_releases</td><td>社区定制的 Qt 库，Tizen 版 Qt 以及 Qt 附加源码包</td></tr><tr><td>archive</td><td>各种 Qt 开发工具安装包，新旧都有（可以下载 Qt 开发环境和源代码）</td></tr></tbody></table></div><p>archive 和 official_releases 两个目录都有最新的 Qt 开发环境安装包，我们以official_releases目录里的内容为例来说明。</p><p><img src="Pasted%20image%2020250412202228.png" alt=""></p><p>进入 qt 子目录</p><p><img src="Pasted%20image%2020250412202338.png" alt=""></p><p>有各种子版本</p><h2 id="2-镜像源下载"><a href="#2-镜像源下载" class="headerlink" title="2-镜像源下载"></a>2-镜像源下载</h2><p>这里给大家推荐几个国内著名的 Qt 镜像网站，主要是各个高校的：</p><p>中国科学技术大学：<a href="http://mirrors.ustc.edu.cn/qtproject/">http://mirrors.ustc.edu.cn/qtproject/</a><br>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/">https://mirrors.tuna.tsinghua.edu.cn/qt/</a><br>北京理工大学：<a href="http://mirror.bit.edu.cn/qtproject/">http://mirror.bit.edu.cn/qtproject/</a><br>中国互联网络信息中心：<a href="https://mirrors.cnnic.cn/qt/">https://mirrors.cnnic.cn/qt/</a></p><hr><h1 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h1>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-C++、Python极简基础</title>
    <link href="/2025/04/12/02-C++%E3%80%81Python%E6%9E%81%E7%AE%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/12/02-C++%E3%80%81Python%E6%9E%81%E7%AE%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<ul><li>基础概述<ul><li>课程介绍</li><li>Linux系统介绍及安装</li><li>Linux系统基础操作</li><li>C++/Python极简基础</li><li>安装ROS系统</li></ul></li></ul><h1 id="C-Python极简基础"><a href="#C-Python极简基础" class="headerlink" title="C++/Python极简基础"></a>C++/Python极简基础</h1><h2 id="安装编译器和解析器"><a href="#安装编译器和解析器" class="headerlink" title="安装编译器和解析器"></a>安装编译器和解析器</h2><p>通过命令行形式对代码进行编译</p><p>先将编译器作为软件进行安装</p><p>在终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo apt-get install g++<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo apt-get install python<br></code></pre></td></tr></table></figure><p>在桌面创建名为<code>c++_for.cpp</code>的文件</p><p>![[Pasted image 20250329192837.png]]</p><p>编译格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">g++ 编译的代码的文件名 -o 输出的可执行文件的名字<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">g++ c++_for.cpp -o c++_for<br></code></pre></td></tr></table></figure><p>将<code>c++_for.cpp</code>文件进行编译</p><p>![[Pasted image 20250329193328.png]]</p><p>按照运行文件的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">./编译完的文件名<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">./c++_for<br></code></pre></td></tr></table></figure><p>![[Pasted image 20250329195535.png]]</p><p>在桌面创建名为<code>python_for.python</code>的文件</p><p>![[Pasted image 20250329194744.png]]</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">python python_for.py<br></code></pre></td></tr></table></figure><p>![[Pasted image 20250329195852.png]]</p><p>#</p><h1 id="Linux-ROS-rm-指令"><a href="#Linux-ROS-rm-指令" class="headerlink" title="Linux #ROS #rm #指令"></a>Linux #ROS #rm #指令</h1>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-Copilot配合PyQt制作UI</title>
    <link href="/2025/04/11/01-Copilot%E9%85%8D%E5%90%88PyQt%E5%88%B6%E4%BD%9CUI/"/>
    <url>/2025/04/11/01-Copilot%E9%85%8D%E5%90%88PyQt%E5%88%B6%E4%BD%9CUI/</url>
    
    <content type="html"><![CDATA[<p>主要思路是使用<code>Python</code>写逻辑，<code>PyQt</code>写界面UI，最后通过<code>Copilot</code>对UI进行美化。</p><p>关键的提示词是<strong>WindowsFluent</strong>设计风格</p><p>先使用<code>conda</code>创建虚拟环境<code>UI</code></p><p><img src="Pasted%20image%2020250411191725.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda create -n UI python=3.11<br></code></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda activate UI<br></code></pre></td></tr></table></figure><p>然后下载第三方库<code>PyQt</code></p><p><img src="Pasted%20image%2020250411191858.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pip">pip install PyQt5<br></code></pre></td></tr></table></figure><p>在<code>Copilot</code>中输入你想要的关键词，比如<br><code>使用Pyqt5和WindowsFluent设计风格制作一个2048游戏</code></p><p><img src="Pasted%20image%2020250411193328.png" alt=""></p><p><img src="Pasted%20image%2020250411194314.png" alt=""></p><hr><h1 id="DeepSeek-Python-UI-WindowsFluent"><a href="#DeepSeek-Python-UI-WindowsFluent" class="headerlink" title="DeepSeek #Python #UI #WindowsFluent"></a>DeepSeek #Python #UI #WindowsFluent</h1>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI</tag>
      
      <tag>Copilot</tag>
      
      <tag>python</tag>
      
      <tag>WindowsFluent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-基础概述</title>
    <link href="/2025/04/11/01-%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/"/>
    <url>/2025/04/11/01-%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<ul><li>基础概述<ul><li>课程介绍</li><li>Linux系统介绍及安装</li><li>Linux系统基础操作</li><li>C++/Python极简基础</li><li>安装ROS系统</li></ul></li></ul><h1 id="Linux系统基础操作"><a href="#Linux系统基础操作" class="headerlink" title="Linux系统基础操作"></a>Linux系统基础操作</h1><h3 id="输入法中英文切换"><a href="#输入法中英文切换" class="headerlink" title="输入法中英文切换"></a>输入法中英文切换</h3><p>启动后，处于英文输入状态</p><p><img src="Pasted%20image%2020250328173855.png" alt=""></p><p>同时按下<code>WIN</code>+<code>空格</code>可以切换输入法</p><p><img src="Pasted%20image%2020250328174346.png" alt=""></p><p>在中文（智能拼音）输入法下，按下<code>Shift</code>键能够在输入中文和英文中转换</p><p><img src="Pasted%20image%2020250328173758.png" alt=""></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p><img src="Ubuntu%2064%20位%20无人机-2025-03-28-17-47-30.png" alt=""></p><p><img src="Ubuntu%2064%20位%20无人机-2025-03-28-17-47-302222.png" alt=""></p><p>打开文件图标</p><p> <img src="Ubuntu%2064%20位%20无人机-2025-03-28-17-49-04.png" alt=""></p><p>这个是主文件夹（home）的位置，根目录处<code>+其他位置</code>内的<code>计算机</code>内</p><p><img src="Ubuntu%2064%20位%20无人机-2025-03-28-17-50-25.png" alt=""></p><p>如图，才是根目录的位置</p><p><img src="Pasted%20image%2020250328175205.png" alt=""></p><p><strong>一般操作在主文件夹中进行即可</strong></p><h3 id="终端程序和常用指令"><a href="#终端程序和常用指令" class="headerlink" title="终端程序和常用指令"></a>终端程序和常用指令</h3><h4 id="打开终端"><a href="#打开终端" class="headerlink" title="打开终端"></a>打开终端</h4><p>在Linux系统中，可以通过终端程序输入指令来进行各项操作。</p><p>可以从开始菜单启动终端程序</p><p><img src="Pasted%20image%2020250329073721.png" alt=""></p><p>也可以按下<code>Ctrl</code>+<code>Alt</code>+<code>T</code>打开</p><p><img src="Pasted%20image%2020250329082307.png" alt=""></p><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><h5 id="Tab键补全"><a href="#Tab键补全" class="headerlink" title="Tab键补全"></a>Tab键补全</h5><p>按下<code>Tab</code>键可以快速补全代码（当唯一时）</p><h5 id="pwd查看当前路径"><a href="#pwd查看当前路径" class="headerlink" title="pwd查看当前路径"></a>pwd查看当前路径</h5><p><img src="Pasted%20image%2020250329172458.png" alt=""></p><h5 id="ls列出当前文件夹下的内容"><a href="#ls列出当前文件夹下的内容" class="headerlink" title="ls列出当前文件夹下的内容"></a>ls列出当前文件夹下的内容</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">ls<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329082629.png" alt=""></p><blockquote><p>ls = list 列出清单</p></blockquote><p>终端程序启动后，默认位置是当前用户的“主文件夹”</p><h5 id="mkdir创建新的目录"><a href="#mkdir创建新的目录" class="headerlink" title="mkdir创建新的目录"></a>mkdir创建新的目录</h5><blockquote><p>mkdir = make directory 创建新的目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">mkdir name<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329151949.png" alt=""></p><h5 id="cd改变当前目录"><a href="#cd改变当前目录" class="headerlink" title="cd改变当前目录"></a>cd改变当前目录</h5><blockquote><p>cd = change directory 改变当前目录</p></blockquote><p>使用<code>cd</code>+<code>目录名</code>可以进入指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">cd directory_name<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329152315.png" alt=""></p><p><strong>可以跨级进入目录</strong></p><p><img src="Pasted%20image%2020250329153014.png" alt=""></p><p>使用<code>cd</code>+<code>..</code>可以回到上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">cd ..<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329152809.png" alt=""></p><p>使用<code>cd</code>+<code>~</code>可以从任意位置回到主文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">cd ~<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329153115.png" alt=""></p><p><img src="Pasted%20image%2020250329153133.png" alt=""></p><blockquote><p>~ = /home/用户名/<br>~ = 当前用户中的主文件夹</p></blockquote><p>cd后面可以跟绝对地址，也可以跟相对目前地址的地址</p><p><img src="Pasted%20image%2020250329153704.png" alt=""></p><h5 id="clear清除输出"><a href="#clear清除输出" class="headerlink" title="clear清除输出"></a>clear清除输出</h5><p><img src="Pasted%20image%2020250329152507.png" alt=""></p><p><img src="Pasted%20image%2020250329152517.png" alt=""></p><h5 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h5><p><img src="Pasted%20image%2020250329172910.png" alt=""></p><h5 id="对文件的常用操作（复制、粘贴、剪切）"><a href="#对文件的常用操作（复制、粘贴、剪切）" class="headerlink" title="对文件的常用操作（复制、粘贴、剪切）"></a>对文件的常用操作（复制、粘贴、剪切）</h5><blockquote><p>剪切 mv</p></blockquote><p><img src="Pasted%20image%2020250329173251.png" alt=""></p><blockquote><p>cp 复制粘贴</p></blockquote><p><img src="Pasted%20image%2020250329173515.png" alt=""></p><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p><strong>gedit</strong> = 文本编辑器</p><p>输入<code>gedit</code>可以打开文本编辑器</p><p><img src="Pasted%20image%2020250329155137.png" alt=""></p><p>输入<code>gedit</code>+<code>文件名</code>可以在当前位置</p><p>打开对应文件名的文本</p><p><img src="Pasted%20image%2020250329155302.png" alt=""></p><p>输入内容后保存</p><p><img src="Pasted%20image%2020250329155357.png" alt=""></p><p><img src="Pasted%20image%2020250329155431.png" alt=""></p><h3 id="Source指令"><a href="#Source指令" class="headerlink" title="Source指令"></a>Source指令</h3><blockquote><p>source = 执行文件中的指令序列</p></blockquote><p>Source指令<strong>用于执行一个文本文件里的一连串指令</strong></p><p>编辑内容</p><p><img src="Pasted%20image%2020250329160033.png" alt=""></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">source command.sh<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329160140.png" alt=""></p><p>在Linux中，我们通常会把一连串的指令写到.sh文件里，然后通过source去加载运行</p><h3 id="终端启动脚本"><a href="#终端启动脚本" class="headerlink" title="终端启动脚本"></a>终端启动脚本</h3><blockquote><p>~/.bashrc = 终端程序启动脚本</p></blockquote><p>这个文件在<strong>主文件夹</strong>里，但是是一个<strong>隐藏文件</strong>，在文件管理器里是看不到的</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">ls -a<br></code></pre></td></tr></table></figure><p>能够显示所有文件，包括隐藏文件</p><p><img src="Pasted%20image%2020250329160824.png" alt=""></p><p><strong>.bashrc</strong>可以理解为终端程序的初始化脚本，每次执行终端程序时，都会首先执行一下这个脚本，完成一些环境变量的赋值工作</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329161759.png" alt=""></p><p>在最后输入<code>echo 正在使用.bashrc</code>，后保存</p><p><img src="Pasted%20image%2020250329162022.png" alt=""></p><p>关闭终端，然后按下<code>Ctrl</code>+<code>Alt</code>+<code>T</code>重新打开终端</p><p><img src="Pasted%20image%2020250329162209.png" alt=""></p><h3 id="执行管理员权限"><a href="#执行管理员权限" class="headerlink" title="执行管理员权限"></a>执行管理员权限</h3><blockquote><p>sudo = 以管理员权限执行本条指令</p></blockquote><p>每个用户通常只能操作自己主文件夹里的数据，在主文件夹之外的区域，新建目录或者删除文件会提示权限不足</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>删除文件rm指令的介绍主要参考CSDN深码青年的文章《Linux 删除文件命令（超详细）》^[<a href="https://blog.csdn.net/lcmaijia/article/details/134319542">https://blog.csdn.net/lcmaijia/article/details/134319542</a>]</p><blockquote><p>删除单个文件</p></blockquote><p>要删除单个文件，只需使用 rm 命令后跟要删除的文件名：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm 文件名<br></code></pre></td></tr></table></figure></p><p>例如，要删除名为 “example.txt” 的文件，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm example.txt<br></code></pre></td></tr></table></figure><p><strong>这种方式删除的是文件，不能删除目录（文件夹）</strong></p><p><img src="Pasted%20image%2020250329163024.png" alt=""></p><blockquote><p>删除多个文件</p></blockquote><p>如果要删除多个文件，可以将文件名放在 rm 命令后并用空格分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm 文件1 文件2 文件3<br></code></pre></td></tr></table></figure><p>例如，要删除 “file1.txt”、“file2.txt” 和 “file3.txt” 这三个文件，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm file1.txt file2.txt file3.txt<br></code></pre></td></tr></table></figure><blockquote><p>删除文件夹及其内容</p></blockquote><p>如果要删除整个文件夹及其所有内容，可以使用 <code>-r</code>参数（递归删除）来确保连同子文件夹一起删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm -r 文件夹名<br></code></pre></td></tr></table></figure><p>请注意，递归删除非常危险，因为它会将文件夹及其所有内容完全删除，无法恢复。确保在执行此操作前三思。</p><p>例如，要删除名为 “my_folder” 的文件夹及其所有内容，执行以下命令：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm -r my_folder<br></code></pre></td></tr></table></figure></p><p><img src="Pasted%20image%2020250329163709.png" alt=""></p><blockquote><p>确认删除</p></blockquote><p>在默认情况下，rm 命令会直接删除文件，不会询问确认。如果你希望在删除文件时得到确认提示，请使用<code>-i</code>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm -i 文件名<br></code></pre></td></tr></table></figure><p>例如，要删除 “important.txt” 文件，并在删除前确认，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm -i important.txt<br></code></pre></td></tr></table></figure><p>rm 命令会提示类似以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm: 是否删除 &quot;important.txt&quot;? <br></code></pre></td></tr></table></figure><p>输入 “y” 表示确认删除，输入 “n” 表示取消删除。</p><p><img src="Pasted%20image%2020250329163824.png" alt=""></p><blockquote><p>强制删除</p></blockquote><p>如果你希望在删除文件时不接收任何确认提示，并强制删除文件，可以使用 -f 参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm -f 文件名<br></code></pre></td></tr></table></figure><p>例如，要强制删除名为 “temp.txt” 的文件，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">rm -f temp.txt<br></code></pre></td></tr></table></figure><p>请小心使用 -f 参数，因为它会立即删除文件，无法恢复。</p><h3 id="软件安装和配置软件源"><a href="#软件安装和配置软件源" class="headerlink" title="软件安装和配置软件源"></a>软件安装和配置软件源</h3><h4 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h4><p>软件安装和配置软件源的介绍主要参考CSDN Raywit的文章《Linux换国内镜像源(Ubuntu、Debian等)》^[<a href="https://blog.csdn.net/qq_40520596/article/details/110194439">https://blog.csdn.net/qq_40520596/article/details/110194439</a>]</p><p>先备份源列表/etc/apt/sources.list<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup<br></code></pre></td></tr></table></figure></p><p><img src="Pasted%20image%2020250329165656.png" alt=""></p><p>再打开sources.list文件修改 (可以用gedit、vim等来修改)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo gedit /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329165925.png" alt=""></p><p>往里面添加目标源的配置文件，最后保存即可。</p><p><img src="Pasted%20image%2020250329170159.png" alt=""></p><p>不同版本的系统的换源格式不太一样，可以参考<a href="https://blog.csdn.net/qq_40520596/article/details/110194439">Linux换国内镜像源(Ubuntu、Debian等)_linux jingxiangyuan-CSDN博客</a>这篇文章</p><p>报错，但好像不影响使用</p><p><img src="Pasted%20image%2020250329170514.png" alt=""></p><p><strong>更换源后更新</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo apt-get update<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250329170620.png" alt=""></p><p>也可以使用可视化界面进行换源</p><p><img src="Pasted%20image%2020250329171546.png" alt=""></p><p><img src="Pasted%20image%2020250329171603.png" alt=""></p><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>安装软件，只需要简单使用命令来进行安装: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo apt-get install &lt;package-name&gt;<br></code></pre></td></tr></table></figure><p>软件库里没有的话就会提示错误</p><p>删除软件则是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Linux">sudo apt-get remove &lt;package-name&gt;<br></code></pre></td></tr></table></figure><p>在Ubuntu系统上安装软件和Windows上不一样 (后者是exe文件，前者一般是apt、deb、run等格式)。</p><p>#</p><h1 id="Linux-ROS-rm-指令"><a href="#Linux-ROS-rm-指令" class="headerlink" title="Linux #ROS #rm #指令"></a>Linux #ROS #rm #指令</h1>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm设置conda虚拟环境</title>
    <link href="/2025/04/01/Pycharm%E8%AE%BE%E7%BD%AEconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/04/01/Pycharm%E8%AE%BE%E7%BD%AEconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="1-查看或创建虚拟环境"><a href="#1-查看或创建虚拟环境" class="headerlink" title="1-查看或创建虚拟环境"></a>1-查看或创建虚拟环境</h1><p>参考[[01-Anaconda建立Python虚拟环境]]</p><h1 id="2-在pycharm中设置conda创建好的虚拟环境"><a href="#2-在pycharm中设置conda创建好的虚拟环境" class="headerlink" title="2-在pycharm中设置conda创建好的虚拟环境"></a>2-在pycharm中设置conda创建好的虚拟环境</h1><p>点击pycharm左上角的<code>file/settings</code></p><p><img src="Pasted%20image%2020250315193108.png" alt=""></p><p>选择<code>Project/Python Interpreter</code>，然后选择<code>Show ALL</code></p><p><img src="Pasted%20image%2020250315193211.png" alt=""></p><p>在弹出的界面选择左上角的<code>+</code>号<br>选择Conda环境，然后在右侧选择anconda安装目录下的<code>scripts/conda.exe</code>文件。<br>【注意：这里选择的是conda的可执行文件，而不是python的可执行文件】</p><p><img src="Pasted%20image%2020250315193347.png" alt=""></p><p>点击右侧的加载环境按钮，下方就会出现已经创建好的虚拟环境选项</p><p><img src="Pasted%20image%2020250315193511.png" alt=""></p><h1 id="3-安装库"><a href="#3-安装库" class="headerlink" title="3-安装库"></a>3-安装库</h1><p>在控制台中使用<code>pip</code><br>输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install python-opencv<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250317192531.png" alt=""></p><h1 id="PyCharm-Conda"><a href="#PyCharm-Conda" class="headerlink" title="PyCharm #Conda"></a>PyCharm #Conda</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda建立Python虚拟环境</title>
    <link href="/2025/04/01/Anaconda%E5%BB%BA%E7%AB%8BPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/04/01/Anaconda%E5%BB%BA%E7%AB%8BPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>文章主要参考CSDN风吹过得夏天的文章《使用 Anaconda 创建 Python 虚拟环境》^[<a href="https://blog.csdn.net/u011385476/article/details/105277426">https://blog.csdn.net/u011385476/article/details/105277426</a>]</p><p>Anaconda创建Python虚拟环境主要有两种方法，分别是使用CMD创建虚拟环境和使用Anaconda客户端创建虚拟环境。</p><h1 id="一、使用CMD创建虚拟环境"><a href="#一、使用CMD创建虚拟环境" class="headerlink" title="一、使用CMD创建虚拟环境"></a>一、使用CMD创建虚拟环境</h1><h2 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1-创建虚拟环境"></a>1-创建虚拟环境</h2><h4 id="打开CMD"><a href="#打开CMD" class="headerlink" title="打开CMD"></a>打开CMD</h4><p>同时按下WIN键和R键打开运行</p><p><img src="Pasted%20image%2020250315133717.png" alt=""></p><p>输入CMD点击确定，进入CMD</p><p><img src="Pasted%20image%2020250315133813.png" alt=""></p><p><img src="Pasted%20image%2020250315133825.png" alt=""></p><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p>创建Python虚拟环境的命令是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda create -n your_env_name   # your_env_name 为你虚拟环境名<br></code></pre></td></tr></table></figure><br>比如说创建一个名字是text的虚拟环境<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda create -n text<br></code></pre></td></tr></table></figure></p><p><img src="Pasted%20image%2020250315133908.png" alt=""></p><p>输入命令后，再输入一个y进行确认</p><p><img src="Pasted%20image%2020250315133958.png" alt=""></p><p>名叫text的Python虚拟环境就创建完毕了</p><h4 id="创建时指定版本"><a href="#创建时指定版本" class="headerlink" title="创建时指定版本"></a>创建时指定版本</h4><p>在创建新的虚拟环境的时候，可以指定Python的版本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda create -n text python=X.x<br></code></pre></td></tr></table></figure><br>比如说要指定Python的版本为3.8，可以输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda create -n text python=3.8<br></code></pre></td></tr></table></figure></p><h2 id="2-查看虚拟环境"><a href="#2-查看虚拟环境" class="headerlink" title="2-查看虚拟环境"></a>2-查看虚拟环境</h2><p>需要查看虚拟环境时，在CMD中输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda env list<br></code></pre></td></tr></table></figure></p><p>即可查看所有的Python虚拟环境<br><img src="Pasted%20image%2020250315161423.png" alt=""></p><h2 id="3-激活虚拟环境"><a href="#3-激活虚拟环境" class="headerlink" title="3-激活虚拟环境"></a>3-激活虚拟环境</h2><p>如果你想要使用你所创建的 python 虚拟环境，首先你就要激活你想用的虚拟环境，激活虚拟环境的命令是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda activate your_env_name<br></code></pre></td></tr></table></figure><br>比如想要激活刚刚创建的text环境，可以输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda activate test<br></code></pre></td></tr></table></figure><br>激活虚拟环境以后，在CMD的前面会显示所激活的虚拟环境的名称</p><p><img src="Pasted%20image%2020250315163306.png" alt=""></p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><p>出现“conda-script.py: error: argument COMMAND: invalid choice: ‘activate’”错误</p><p><img src="Pasted%20image%2020250315163052.png" alt=""></p><p>需要先执行<code>conda init</code>才行<br>输入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda init<br></code></pre></td></tr></table></figure><p>然后重新启动CMD</p><p><img src="Pasted%20image%2020250315163200.png" alt=""></p><h2 id="4-为虚拟环境安装包"><a href="#4-为虚拟环境安装包" class="headerlink" title="4-为虚拟环境安装包"></a>4-为虚拟环境安装包</h2><p>创建新的虚拟环境以后，可以输入<code>list</code>指令来查看安装的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda list<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250315163612.png" alt=""></p><p>安装其他包有两种方法</p><h4 id="激活虚拟环境后安装"><a href="#激活虚拟环境后安装" class="headerlink" title="激活虚拟环境后安装"></a>激活虚拟环境后安装</h4><p>使用<code>pip install</code>或者<code>conda install</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pip">pip install xxx<br></code></pre></td></tr></table></figure><p>或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda install xxx<br></code></pre></td></tr></table></figure><p>比如安装Numpy，可以输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pip">pip install Numpy<br></code></pre></td></tr></table></figure><p>或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda install Numpy<br></code></pre></td></tr></table></figure><h4 id="未激活虚拟环境直接安装"><a href="#未激活虚拟环境直接安装" class="headerlink" title="未激活虚拟环境直接安装"></a>未激活虚拟环境直接安装</h4><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">python conda install -n your_env_name [package]<br></code></pre></td></tr></table></figure><p>比如安装Numpy库，可以输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda install -n test numpy<br></code></pre></td></tr></table></figure><h2 id="5-退出以及删除虚拟软件"><a href="#5-退出以及删除虚拟软件" class="headerlink" title="5-退出以及删除虚拟软件"></a>5-退出以及删除虚拟软件</h2><p>删除当前虚拟环境的命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda deactivate<br></code></pre></td></tr></table></figure><p>删除虚拟环境的命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda remove -n your_env_name --all<br></code></pre></td></tr></table></figure><p>如果我们想要删除刚创建的 test 虚拟环境，只需要输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conda">conda remove -n test --all<br></code></pre></td></tr></table></figure><h1 id="二、使用Anaconda客户端创建虚拟环境"><a href="#二、使用Anaconda客户端创建虚拟环境" class="headerlink" title="二、使用Anaconda客户端创建虚拟环境"></a>二、使用Anaconda客户端创建虚拟环境</h1><h2 id="1-创建Python虚拟环境"><a href="#1-创建Python虚拟环境" class="headerlink" title="1-创建Python虚拟环境"></a>1-创建Python虚拟环境</h2><p>使用 Anaconda 客户端创建 python 虚拟环境，我们只要打开 anaconda 客户端，然后点击 <strong>Environment</strong> ，再点击 <strong>Create</strong> ，填写相应的东西，然后点击 <strong>Create</strong> 就可以了。</p><p><img src="Pasted%20image%2020250315165422.png" alt=""></p><p>创建完毕</p><p><img src="Pasted%20image%2020250315165841.png" alt=""></p><h2 id="2-安装包"><a href="#2-安装包" class="headerlink" title="2-安装包"></a>2-安装包</h2><p>在anaconda里面安装包，我们首先要选择虚拟环境，然后点击<strong>Not installed</strong>然后搜索想安装的包，最后点击<strong>Apply</strong>就可以了</p><p><img src="Pasted%20image%2020250315165926.png" alt=""></p><p><img src="Pasted%20image%2020250315165944.png" alt=""></p><h2 id="3-激活虚拟环境-1"><a href="#3-激活虚拟环境-1" class="headerlink" title="3-激活虚拟环境"></a>3-激活虚拟环境</h2><p>想要激活虚拟环境，我们只要点击选择的虚拟环境的<strong>停止符号</strong>，然后点击<strong>Open Terminal</strong>就可以了</p><h2 id="4-删除虚拟环境"><a href="#4-删除虚拟环境" class="headerlink" title="4-删除虚拟环境"></a>4-删除虚拟环境</h2><p>想要删除创建的虚拟环境，我们只要先选择想要的删除的虚拟环境，然后点击<strong>Remove</strong>就可以了</p><h1 id="CMD-Anaconda-Conda-虚拟环境"><a href="#CMD-Anaconda-Conda-虚拟环境" class="headerlink" title="CMD #Anaconda #Conda #虚拟环境"></a>CMD #Anaconda #Conda #虚拟环境</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>视频二维码检测</title>
    <link href="/2025/04/01/%E8%A7%86%E9%A2%91%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    <url>/2025/04/01/%E8%A7%86%E9%A2%91%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h2><p>使用计算机读取视频或者摄像头，实时检测图像中的二维码（可用手机屏幕显示二维码），并将二维码的四角位置实时叠加在显示画面中，控制台打印输出二维码内容。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 定义 draw_text 函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">img, text, pos, font, color</span>):<br>    img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))<br>    draw = ImageDraw.Draw(img_pil)<br>    draw.text(pos, text, font=font, fill=color)<br>    <span class="hljs-keyword">return</span> cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)<br><br><span class="hljs-comment"># 初始化摄像头</span><br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 创建二维码检测器</span><br>qr_code_detector = cv2.QRCodeDetector()<br><br><span class="hljs-comment"># 加载中文字体</span><br>font_path = <span class="hljs-string">&quot;simhei.ttf&quot;</span>  <span class="hljs-comment"># 请确保路径正确，simhei.ttf 是黑体字体文件</span><br>font = ImageFont.truetype(font_path, <span class="hljs-number">24</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 读取摄像头帧</span><br>    ret, frame = cap.read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 检测二维码</span><br>    retval, decoded_info, points, straight_qrcode = qr_code_detector.detectAndDecodeMulti(frame)<br><br>    <span class="hljs-keyword">if</span> retval:<br>        <span class="hljs-comment"># 打印二维码内容</span><br>        <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> decoded_info:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;QR Code Content:&quot;</span>, info)<br><br>        <span class="hljs-comment"># 绘制二维码的四角位置</span><br>        <span class="hljs-keyword">if</span> points <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            points = points.astype(<span class="hljs-built_in">int</span>)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(points)):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    cv2.line(frame, <span class="hljs-built_in">tuple</span>(points[i][j]), <span class="hljs-built_in">tuple</span>(points[i][(j + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>]), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">3</span>)<br>                <span class="hljs-comment"># 在屏幕左上角显示四角的位置坐标</span><br>                text = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;points[i]&#125;</span>&quot;</span><br>                frame = draw_text(frame, text, (<span class="hljs-number">10</span>, <span class="hljs-number">30</span> + i * <span class="hljs-number">30</span>), font, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 在屏幕左上角显示“未检测到二维码”</span><br>        frame = draw_text(frame, <span class="hljs-string">&quot;未检测到二维码&quot;</span>, (<span class="hljs-number">10</span>, <span class="hljs-number">30</span>), font, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><br>    <span class="hljs-comment"># 显示帧</span><br>    cv2.imshow(<span class="hljs-string">&quot;QR Code Detection&quot;</span>, frame)<br><br>    <span class="hljs-comment"># 按下 &#x27;q&#x27; 键退出</span><br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 释放摄像头并关闭窗口</span><br>cap.release()<br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><p>先将需要的资源进行初始化，初始化摄像头资源，二维码检测器，并预先写好字体显示函数，要注意PIL库和openCV库的色彩顺序分别为RGB和BGR。然后在循环内持续读取视频帧实现连续播放，退出循环后的release()和destroyAllWindows()函数释放资源。循环内部先读取视频帧，然后对视频帧使用detectAndDecodeMulti()函数进行检测读取内容。使用line()函数依次连接判断出的二维码四角。。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_text</span>(<span class="hljs-params">img, text, pos, font, color</span>):<br></code></pre></td></tr></table></figure><p>定义一个函数<code>draw_text</code>，用于在图像上绘制文本。</p><ol><li><code>img</code>: 输入的 OpenCV 图像（NumPy 数组格式）。</li><li><code>text</code>: 要绘制的文本内容。</li><li><code>pos</code>: 文本绘制的起始位置（左上角坐标）。</li><li><code>font</code>: 使用的字体对象。</li><li><code>color</code>: 文本颜色（BGR 格式）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))<br></code></pre></td></tr></table></figure><p>将 OpenCV 图像（BGR 格式）转换为 RGB 格式，并使用 Image.fromarray 将其转换为 PIL 图像对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">draw = ImageDraw.Draw(img_pil)<br></code></pre></td></tr></table></figure><p>创建一个 ImageDraw 对象，用于在 PIL 图像上绘制图形或文字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">draw.text(pos, text, font=font, fill=color)<br></code></pre></td></tr></table></figure><p>在 PIL 图像上绘制文本。</p><ol><li><code>pos</code>: 文本绘制的起始位置。</li><li><code>text</code>: 要绘制的文本内容。</li><li><code>font</code>: 使用的字体对象。</li><li><code>fill</code>: 文本的颜色</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)<br></code></pre></td></tr></table></figure><p>将 PIL 图像转换回 NumPy 数组，并将其从 RGB 格式转换回 BGR 格式，以便与 OpenCV 兼容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>初始化摄像头，0 表示默认摄像头。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">qr_code_detector = cv2.QRCodeDetector()<br></code></pre></td></tr></table></figure><p>创建二维码检测器对象<code>qr_code_detector</code>，用于检测和解码二维码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">font_path = <span class="hljs-string">&quot;simhei.ttf&quot;</span><br></code></pre></td></tr></table></figure><p>设置字体，simhei.ttf 是黑体字体文件，用于支持中文显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">font = ImageFont.truetype(font_path, <span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><p>加载指定路径的字体文件，并设置字体大小为 24。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br></code></pre></td></tr></table></figure><p>摄像头传输数据连续，读取摄像头数据时需要一个无限循环保证连续读取视频帧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ret, frame = cap.read()<br></code></pre></td></tr></table></figure><p>读取摄像头的一帧图像，返回值分别赋给<code>ret</code>和<code>frame</code></p><ol><li><code>ret</code>: 布尔值，表示是否成功读取帧。</li><li><code>frame</code>: 读取到的图像帧（NumPy 数组格式）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>如果未能成功读取帧<code>ret</code>为0，退出循环，结束运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">retval, decoded_info, points, straight_qrcode = qr_code_detector.detectAndDecodeMulti(frame)<br></code></pre></td></tr></table></figure><p>使用二维码检测器检测并解码图像中的二维码。</p><ol><li><code>retval</code>: 布尔值，表示是否成功检测到二维码。</li><li><code>decoded_info</code>: 解码后的二维码内容列表。</li><li><code>points</code>: 检测到的二维码的四角坐标列表。</li><li><code>straight_qrcode</code>: 矫正后的二维码图像</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> retval:<br><span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> decoded_info:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;QR Code Content:&quot;</span>, info)<br></code></pre></td></tr></table></figure><p>如果成功检测到二维码，将解码后的二维码内容输出。<br>使用<code>for</code>循环是因为<code>detectAndDecodeMulti()</code>的返回值为列表，可能有多个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> points <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>points = points.astype(<span class="hljs-built_in">int</span>)<br></code></pre></td></tr></table></figure><p>如果二维码的四角坐标不为空，将坐标数据类型转换为整数。<br><strong>为什么要转化为整数？</strong><br>OpenCV 的绘图函数（后面用到了<code>cv2.line()</code>函数）要求坐标点的值<strong>必须是整数</strong>。<br>points 是通过二维码检测器返回的坐标数组，可能包含浮点数。如果直接使用返回的坐标，函数会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(points)):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>cv2.line(frame, <span class="hljs-built_in">tuple</span>(points[i][j]), <span class="hljs-built_in">tuple</span>(points[i][(j + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>]), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>遍历每个二维码的四角坐标，并绘制绿色线条连接四个角点，形成矩形框。<br>(0, 255, 0) 表示绿色，3 表示线条宽度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;points[i]&#125;</span>&quot;</span><br>frame = draw_text(frame, text, (<span class="hljs-number">10</span>, <span class="hljs-number">30</span> + i * <span class="hljs-number">30</span>), font, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>将二维码的四角坐标转换为字符串，并调用 draw_text 函数在图像左上角显示坐标信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">else</span>:<br>frame = draw_text(frame, <span class="hljs-string">&quot;未检测到二维码&quot;</span>, (<span class="hljs-number">10</span>, <span class="hljs-number">30</span>), font, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>如果未检测到二维码，在图像左上角显示“未检测到二维码”文本，颜色为红色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cv2.imshow(<span class="hljs-string">&quot;QR Code Detection&quot;</span>, frame)<br></code></pre></td></tr></table></figure><p>使用 OpenCV 显示处理后的图像帧，在循环之中连续播放的帧成为的实时的视频画面，窗口标题为“QR Code Detection”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>检查用户是否按下键盘上的 ‘q’ 键，如果按下，则退出循环。如果不是视频不能这样写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cap.release()<br></code></pre></td></tr></table></figure><p>释放摄像头资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><p>关闭所有 OpenCV 窗口。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="Pasted%20image%2020250317224323.png" alt=""></p><p><img src="Pasted%20image%2020250317224339.png" alt=""></p><h1 id="opencv-二维码-QR-二维码识别"><a href="#opencv-二维码-QR-二维码识别" class="headerlink" title="opencv #二维码 #QR #二维码识别"></a>opencv #二维码 #QR #二维码识别</h1>]]></content>
    
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
      <tag>PIL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>霍夫圆检测</title>
    <link href="/2025/04/01/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B/"/>
    <url>/2025/04/01/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="霍夫圆检测算法"><a href="#霍夫圆检测算法" class="headerlink" title="霍夫圆检测算法"></a>霍夫圆检测算法</h2><p>[[01-霍夫圆检测算法]]</p><h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><p>编写霍夫圆检测算法函数，检测图片中的圆的位置和参数</p><p>函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">detect_circles</span>(<span class="hljs-params">img_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入：图片路径</span><br><span class="hljs-string">    输出：[</span><br><span class="hljs-string">        &#123;&#x27;center&#x27;: (x,y), &#x27;radius&#x27;: r&#125;, </span><br><span class="hljs-string">        ... # 按半径从大到小排序</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">detect_circles</span>(<span class="hljs-params">img_path</span>):<br>    <span class="hljs-comment"># 读取图片</span><br>    image = cv2.imread(img_path)<br>    <span class="hljs-keyword">if</span> image <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;无法读取图片，请检查路径是否正确&quot;</span>)<br><br>    <span class="hljs-comment"># 转换为灰度图像</span><br>    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)<br><br>    <span class="hljs-comment"># 使用高斯模糊减少噪声</span><br>    blurred = cv2.GaussianBlur(gray, (<span class="hljs-number">9</span>, <span class="hljs-number">9</span>), <span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 使用霍夫圆变换检测圆</span><br>    circles = cv2.HoughCircles(<br>        blurred,<br>        cv2.HOUGH_GRADIENT,<br>        dp=<span class="hljs-number">1.2</span>,          <span class="hljs-comment"># 累加器分辨率与图像分辨率的反比</span><br>        minDist=<span class="hljs-number">40</span>,      <span class="hljs-comment"># 检测到的圆心之间的最小距离</span><br>        param1=<span class="hljs-number">40</span>,       <span class="hljs-comment"># Canny 边缘检测的高阈值</span><br>        param2=<span class="hljs-number">40</span>,       <span class="hljs-comment"># 累加器阈值，较小的值将检测到更多的圆</span><br>        minRadius=<span class="hljs-number">40</span>,    <span class="hljs-comment"># 圆的最小半径</span><br>        maxRadius=<span class="hljs-number">150</span>    <span class="hljs-comment"># 圆的最大半径</span><br>    )<br><br>    <span class="hljs-keyword">if</span> circles <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> [], image<br><br>    <span class="hljs-comment"># 将检测到的圆转换为列表，并按半径从大到小排序</span><br>    circles = np.<span class="hljs-built_in">round</span>(circles[<span class="hljs-number">0</span>, :]).astype(<span class="hljs-string">&quot;int&quot;</span>)<br>    circles = <span class="hljs-built_in">sorted</span>(circles, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>], reverse=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 提取圆心和半径</span><br>    result = [&#123;<span class="hljs-string">&#x27;center&#x27;</span>: (x, y), <span class="hljs-string">&#x27;radius&#x27;</span>: r&#125; <span class="hljs-keyword">for</span> (x, y, r) <span class="hljs-keyword">in</span> circles]<br><br>    <span class="hljs-comment"># 在图像上绘制检测到的圆</span><br>    <span class="hljs-keyword">for</span> circle <span class="hljs-keyword">in</span> circles:<br>        center = (circle[<span class="hljs-number">0</span>], circle[<span class="hljs-number">1</span>])<br>        radius = circle[<span class="hljs-number">2</span>]<br>        cv2.circle(image, center, radius, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">4</span>)  <span class="hljs-comment"># 用绿色绘制圆</span><br>        cv2.rectangle(image, (center[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span>, center[<span class="hljs-number">1</span>] - <span class="hljs-number">5</span>), (center[<span class="hljs-number">0</span>] + <span class="hljs-number">5</span>, center[<span class="hljs-number">1</span>] + <span class="hljs-number">5</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)  <span class="hljs-comment"># 用橙色绘制圆心</span><br><br>    <span class="hljs-keyword">return</span> result, image<br><br><span class="hljs-comment"># 示例调用</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    result, image_with_circles = detect_circles(<span class="hljs-string">&quot;mission2/H.png&quot;</span>)<br>    <span class="hljs-keyword">if</span> result:<br>        <span class="hljs-keyword">for</span> circle <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;圆心: <span class="hljs-subst">&#123;circle[<span class="hljs-string">&#x27;center&#x27;</span>]&#125;</span>, 半径: <span class="hljs-subst">&#123;circle[<span class="hljs-string">&#x27;radius&#x27;</span>]&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># 显示结果图像</span><br>        cv2.imshow(<span class="hljs-string">&#x27;Detected Circles&#x27;</span>, image_with_circles)<br>        cv2.waitKey(<span class="hljs-number">0</span>)<br>        cv2.destroyAllWindows()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未检测到圆&quot;</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><p>先使用imread()函数读取指定路径的图片数据，保存在变量image中，如果无法读取，返回错误提示；若正常读取，先对图片数据进行预处理，因为霍夫圆变换检测函数HoughCircles()需要输入灰度图片，所以先使用cvtColor()函数转化为灰度图像，然后通过GaussianBlur()函数减少噪声，将预处理结果保存在blurred变量中。最后使用使用HoughCircles()函数对图片进行检测。期间要对 <code>dp</code>,<code>minDist</code>，<code>param1</code>，<code>param2</code>,  <code>minRadius</code>, <code>maxRadius</code> 六个参数不断进行调整使得输出结果理想，最后返回结果。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>根据题目要求，函数detect_circles()的输入值<code>img_path</code>是图片的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">image = cv2.imread(img_path)<br></code></pre></td></tr></table></figure><p>通过cv2.imread() 函数将<code>img_path</code>路径的图片文件加载为 NumPy 数组，数组中的每个元素分别表示像素值的BGR数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> image <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;无法读取图片，请检查路径是否正确&quot;</span>)<br></code></pre></td></tr></table></figure><p>检查图片是否成功加载，当imread返回值为空（None）时，说明图片路径无效或文件损坏，抛出异常提示用户。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)<br></code></pre></td></tr></table></figure><p>因为后面的<code>HoughCircles()</code>函数的输入需要为灰度图，所以将彩色图像转换为灰度图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">blurred = cv2.GaussianBlur(gray, (<span class="hljs-number">9</span>, <span class="hljs-number">9</span>), <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>对灰度图像进行高斯模糊处理，参数(9, 9)表示卷积核大小，2为标准差，目的是减少噪声。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">circles = cv2.HoughCircles(<br>blurred,<br>cv2.HOUGH_GRADIENT,<br>dp=<span class="hljs-number">1.2</span>,          <span class="hljs-comment"># 累加器分辨率与图像分辨率的反比</span><br>minDist=<span class="hljs-number">40</span>,      <span class="hljs-comment"># 检测到的圆心之间的最小距离</span><br>param1=<span class="hljs-number">40</span>,       <span class="hljs-comment"># Canny 边缘检测的高阈值</span><br>param2=<span class="hljs-number">40</span>,       <span class="hljs-comment"># 累加器阈值，较小的值将检测到更多的圆</span><br>minRadius=<span class="hljs-number">40</span>,    <span class="hljs-comment"># 圆的最小半径</span><br>maxRadius=<span class="hljs-number">150</span>    <span class="hljs-comment"># 圆的最大半径</span><br>)<br></code></pre></td></tr></table></figure><p>使用霍夫圆变换检测圆，使用HoughCircles()方法<br><code>cv2.HoughCircles(image, method, dp, minDist, param1= x , param2= x , minRadius= x , maxRadius= x )</code></p><ol><li><code>dp</code>                # 累加器分辨率与图像分辨率的比值</li><li><code>minDist</code>       # 检测到的圆心之间的最小距离</li><li><code>param1</code>         # Canny 边缘检测的高阈值</li><li><code>param2</code>         # 累加器阈值，较小的值将检测到更多的圆</li><li><code>minRadius</code>   # 圆的最小半径</li><li><code>maxRadius</code>   # 圆的最大半径</li></ol><p>其中<br><code>dp=1</code>表示累加器和输入图像具有相同的分辨率，<code>dp=2</code> 表示累加器的宽高是输入图像的一半。</p><p>HoughCircles()方法的返回值是一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> circles <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br><span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p>如果未检测到圆（circles为None），返回空列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">circles = np.<span class="hljs-built_in">round</span>(circles[<span class="hljs-number">0</span>, :]).astype(<span class="hljs-string">&quot;int&quot;</span>)<br>circles = <span class="hljs-built_in">sorted</span>(circles, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>], reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>将检测到的圆坐标和半径四舍五入并转换为整数类型。<br>按照半径从大到小对圆进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">result = [&#123;<span class="hljs-string">&#x27;center&#x27;</span>: (x, y), <span class="hljs-string">&#x27;radius&#x27;</span>: r&#125; <span class="hljs-keyword">for</span> (x, y, r) <span class="hljs-keyword">in</span> circles]<br></code></pre></td></tr></table></figure><p>构建包含圆心和半径信息的字典列表，方便后面的绘制和输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> circle <span class="hljs-keyword">in</span> circles:<br>    center = (circle[<span class="hljs-number">0</span>], circle[<span class="hljs-number">1</span>])<br>    radius = circle[<span class="hljs-number">2</span>]<br>    cv2.circle(image, center, radius, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">4</span>)<br>    cv2.rectangle(image, (center[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span>, center[<span class="hljs-number">1</span>] - <span class="hljs-number">5</span>), (center[<span class="hljs-number">0</span>] + <span class="hljs-number">5</span>, center[<span class="hljs-number">1</span>] + <span class="hljs-number">5</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>对圆心和圆进行绘制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> result, image<br></code></pre></td></tr></table></figure><p>返回结果。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>第一张图片</p><p><img src="Pasted%20image%2020250317223020.png" alt=""></p><p><img src="Pasted%20image%2020250317223039.png" alt=""></p><p>第二张图片</p><p><img src="Pasted%20image%2020250317223100.png" alt=""></p><p>![[Pasted image 20250317223118.png]]</p><h1 id="opencv-二维码-QR-二维码识别"><a href="#opencv-二维码-QR-二维码识别" class="headerlink" title="opencv #二维码 #QR #二维码识别"></a>opencv #二维码 #QR #二维码识别</h1><h1 id="opencv-霍夫圆-检测-opencv-python"><a href="#opencv-霍夫圆-检测-opencv-python" class="headerlink" title="opencv #霍夫圆 #检测 #opencv #python"></a>opencv #霍夫圆 #检测 #opencv #python</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二维码识别</title>
    <link href="/2025/04/01/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    <url>/2025/04/01/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><p>在项目week1中建立python脚本实现二维码识别，要求打印出二维码文本，并输出二维码四个角像素坐标</p><p>函数格式如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_qr</span>(<span class="hljs-params">img_path</span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">输入：图片路径</span><br><span class="hljs-string"></span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;content&#x27;: 二维码文本,</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;points&#x27;: [[x1,y1],...,[x4,y4]] # 四个角点像素坐标</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_qr</span>(<span class="hljs-params">img_path</span>):  <br>    <span class="hljs-comment"># 读取图片  </span><br>    image = cv2.imread(img_path)  <br>    <span class="hljs-keyword">if</span> image <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:  <br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;无法读取图片，请检查路径是否正确&quot;</span>)  <br>  <br>    <span class="hljs-comment"># 创建 QRCodeDetector 对象  </span><br>    qr_detector = cv2.QRCodeDetector()  <br>  <br>    <span class="hljs-comment"># 检测并解码二维码  </span><br>    content, points, _ = qr_detector.detectAndDecode(image)  <br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 如果没有检测到二维码，返回 None  </span><br>     <br>    points = points[<span class="hljs-number">0</span>].tolist()  <br>  <br>    <span class="hljs-comment"># 返回结果  </span><br>    <span class="hljs-keyword">return</span> &#123;  <br>        <span class="hljs-string">&#x27;content&#x27;</span>: content,  <br>        <span class="hljs-string">&#x27;points&#x27;</span>: points  <br>    &#125;  <br>   <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <br>    result = decode_qr(<span class="hljs-string">&quot;mission1/1,2,3,left.png&quot;</span>)  <br>    <span class="hljs-keyword">if</span> result:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码内容:&quot;</span>, result[<span class="hljs-string">&#x27;content&#x27;</span>])  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码角点:&quot;</span>, result[<span class="hljs-string">&#x27;points&#x27;</span>])  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未检测到二维码&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><p>先使用imread()函数读取指定路径的图片数据，如果无法读取，返回错误提示；若正常读取，使用detectAndDecode()方法检测和解码二维码，将返回值分别赋值给content,和points变量，然后将points变量转化为pyhton自带的列表形式，最后返回内容（保存在content变量中）和角点坐标（保存在points变量中）。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h4 id="imread-函数"><a href="#imread-函数" class="headerlink" title="imread()函数"></a>imread()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cv2.imread(filename, flags)<br></code></pre></td></tr></table></figure><p>参数：</p><ol><li><code>filepath</code>：读入读取图片的路径（绝对/相对）</li><li><code>flags</code>：标志位，可输入参数如下<ul><li><code>cv2.IMREAD_COLOR</code>：默认参数，读入一副彩色图片，忽略alpha通道，可用1作为实参替代</li><li><code>cv2.IMREAD_GRAYSCALE</code>：读入灰度图片，可用0作为实参替代</li><li><code>cv2.IMREAD_UNCHANGED</code>：顾名思义，读入完整图片，包括alpha通道，可用-1作为实参替代</li></ul></li></ol><p>alpha通道，又称A通道，是一个8位的灰度通道，该通道用256级灰度来记录图像中的透明度复信息，定义透明、不透明和半透明区域，其中黑表示全透明，白表示不透明，灰表示半透明</p><h5 id="路径注意点"><a href="#路径注意点" class="headerlink" title="路径注意点"></a>路径注意点</h5><p><code>filename</code>：要读取的图像的完整路径，注意文件名中<strong>不能有中文</strong>。</p><p>比如当读取文件为中文名时，输入<code>image = cv2.imread(&quot;示范.png&quot;)</code></p><p><img src="Pasted%20image%2020250316102012.png" alt=""></p><p><img src="Pasted%20image%2020250316102142.png" alt=""></p><p>报错无法找到<code>can&#39;t open/read file: check file path/integrity</code></p><p><img src="Pasted%20image%2020250316102357.png" alt=""></p><h5 id="imread-的返回值"><a href="#imread-的返回值" class="headerlink" title="imread()的返回值"></a>imread()的返回值</h5><p>imread()函数返回的是一个numpy.ndarray类型的数据，一般是一个三维数组</p><p><img src="Pasted%20image%2020250316103736.png" alt=""></p><p><img src="Pasted%20image%2020250316103943.png" alt=""></p><p>imread读取图片的颜色顺序是B-&gt;G-&gt;R<br>所以image[:,:,1] image[:,:,2] image[:,:,3] 这3个数组中分别存放图片各像素点BGR的值</p><h5 id="imshow"><a href="#imshow" class="headerlink" title="imshow()"></a>imshow()</h5><p>使用imshow()函数时，必须将<strong>输入值补全</strong>，特别是<strong>显示窗口的名称</strong>，否则无法显示，比如输入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>a1 = cv2.imread(<span class="hljs-string">&quot;mission1/1,2,3,left.png&quot;</span>)<br>cv2.imshow(a1)<br></code></pre></td></tr></table></figure><p>显示错误</p><p><img src="Pasted%20image%2020250316111608.png" alt=""></p><p>加上窗口名称后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <br>a1 = cv2.imread(<span class="hljs-string">&quot;mission1/1,2,3,left.png&quot;</span>)  <br>cv2.imshow(<span class="hljs-string">&quot;sample&quot;</span>,a1)<br></code></pre></td></tr></table></figure><p><img src="Pasted%20image%2020250316111737.png" alt=""></p><p>正常运行，但界面一闪而过</p><p><strong>图片显示后一闪而过的原因是缺少让程序暂停的等待操作。<code>cv2.imshow</code>函数只是负责显示图像窗口，但如果没有后续的等待指令，窗口会立即关闭。</strong></p><p>增加语句<code>cv2.waitKey(0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <br>a1 = cv2.imread(<span class="hljs-string">&quot;mission1/1,2,3,left.png&quot;</span>)  <br>cv2.imshow(<span class="hljs-string">&quot;sample&quot;</span>,a1)  <br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>图片正常保持显示</p><p><img src="Pasted%20image%2020250316112422.png" alt=""></p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>根据题目要求，函数decode_qr()的输入值<code>img_path</code>是二维码的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">image = cv2.imread(img_path)<br></code></pre></td></tr></table></figure><p>通过cv2.imread() 函数将<code>img_path</code>路径的图片文件加载为 NumPy 数组，数组中的每个元素分别表示像素值的BGR数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> image <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;无法读取图片，请检查路径是否正确&quot;</span>)<br></code></pre></td></tr></table></figure><p>检查图片是否成功加载，当imread返回值为空（None）时，说明图片路径无效或文件损坏，抛出异常提示用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">qr_detector = cv2.QRCodeDetector()<br></code></pre></td></tr></table></figure><p><code>cv2.QRCodeDetector()</code>是 OpenCV 提供的用于检测和解码二维码的类，创建一个了一个 QR 码检测器实例<code>qr_detector</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">content, points, _ = qr_detector.detectAndDecode(image)<br></code></pre></td></tr></table></figure><p>利用创建的实例<code>qr_detector</code>的<code>detectAndDecode()</code>方法检测图片转化的数组<code>image</code>中的二维码并解码其内容。<br><code>detectAndDecode()</code>方法会返回三个值：</p><ol><li>content：二维码包含的信息（字符串格式）。</li><li>points：二维码的四个角点坐标（NumPy 数组）。</li><li>_：二维码的二进制数据（未使用）。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>当没有检测到二维码时，<code>detectAndDecode()</code>方法会返回的第一个值<code>content</code>为空字符串，函数返回 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">points = points[<span class="hljs-number">0</span>].tolist()<br></code></pre></td></tr></table></figure><p><code>detectAndDecode()</code> 方法返回的二维码在图像中的位置信息保存在<code>points</code>中，<code>points[0]</code>中包含多个点的坐标，形式如<code>points[0] = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</code><br><code>tolist()</code>是NumPy数组的一个方法，用于将数组转换为Python原生的列表格式。<br>这一句也可以删去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-string">&#x27;content&#x27;</span>: content,<br><span class="hljs-string">&#x27;points&#x27;</span>: points<br>&#125;<br></code></pre></td></tr></table></figure><p>按要求返回值。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>第一张二维码</p><p><img src="Pasted%20image%2020250317202124.png" alt=""></p><p>第二张二维码</p><p><img src="Pasted%20image%2020250317202602.png" alt=""></p><h1 id="opencv-二维码-QR-二维码识别"><a href="#opencv-二维码-QR-二维码识别" class="headerlink" title="opencv #二维码 #QR #二维码识别"></a>opencv #二维码 #QR #二维码识别</h1>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
